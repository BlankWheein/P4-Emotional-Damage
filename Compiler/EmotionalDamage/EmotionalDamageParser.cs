//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/caspera/Documents/P4-Emotional-Damage/Compiler/EmotionalDamage/EmotionalDamage.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class EmotionalDamageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, STRING_CONSTANT=54, Inum=55, Fnum=56, Dnum=57, ID=58, WS=59;
	public const int
		RULE_prog = 0, RULE_stmts = 1, RULE_block = 2, RULE_stmt = 3, RULE_print = 4, 
		RULE_println = 5, RULE_returnstmt = 6, RULE_func = 7, RULE_gradfunc = 8, 
		RULE_rettype = 9, RULE_parameters = 10, RULE_parameter = 11, RULE_matrixparameter = 12, 
		RULE_arrparameter = 13, RULE_graddcl = 14, RULE_intdcl = 15, RULE_floatdcl = 16, 
		RULE_intarrdcl = 17, RULE_floatarrdcl = 18, RULE_arrupdate = 19, RULE_arrassign = 20, 
		RULE_matrixassign = 21, RULE_intmatrixdcl = 22, RULE_floatmatrixdcl = 23, 
		RULE_matrixupdate = 24, RULE_matrixarrexpr = 25, RULE_arrexpr = 26, RULE_matrixtranspose = 27, 
		RULE_matrixinverse = 28, RULE_numassign = 29, RULE_numupdate = 30, RULE_boolassign = 31, 
		RULE_boolupdate = 32, RULE_booldcl = 33, RULE_boolval = 34, RULE_selective = 35, 
		RULE_ifstmt = 36, RULE_elifstmt = 37, RULE_elsestmt = 38, RULE_iterative = 39, 
		RULE_forstmt = 40, RULE_whilestmt = 41, RULE_random = 42, RULE_numexpr = 43, 
		RULE_bexpr = 44, RULE_sqrt = 45, RULE_power = 46, RULE_mod = 47, RULE_unaryoperator = 48, 
		RULE_val = 49, RULE_funccall = 50, RULE_gradfunccall = 51, RULE_id = 52, 
		RULE_num = 53, RULE_numtypes = 54;
	public static readonly string[] ruleNames = {
		"prog", "stmts", "block", "stmt", "print", "println", "returnstmt", "func", 
		"gradfunc", "rettype", "parameters", "parameter", "matrixparameter", "arrparameter", 
		"graddcl", "intdcl", "floatdcl", "intarrdcl", "floatarrdcl", "arrupdate", 
		"arrassign", "matrixassign", "intmatrixdcl", "floatmatrixdcl", "matrixupdate", 
		"matrixarrexpr", "arrexpr", "matrixtranspose", "matrixinverse", "numassign", 
		"numupdate", "boolassign", "boolupdate", "booldcl", "boolval", "selective", 
		"ifstmt", "elifstmt", "elsestmt", "iterative", "forstmt", "whilestmt", 
		"random", "numexpr", "bexpr", "sqrt", "power", "mod", "unaryoperator", 
		"val", "funccall", "gradfunccall", "id", "num", "numtypes"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'print'", "'('", "')'", "'println'", "'return'", 
		"'autograd'", "'string'", "'void'", "'['", "']'", "','", "'Value'", "':'", 
		"'='", "'int'", "'float'", "'*'", "'.'", "'toMatrix'", "'toArray'", "'T'", 
		"'~'", "'bool'", "'true'", "'false'", "'if'", "'elif'", "'else'", "'for'", 
		"'while'", "'rand'", "'/'", "'+'", "'-'", "'>'", "'<'", "'!'", "'AND'", 
		"'OR'", "'sqrt'", "'**'", "'%'", "'++'", "'--'", "'.data'", "'.grad'", 
		"'.row'", "'.col'", "'.len'", "'g_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "STRING_CONSTANT", "Inum", "Fnum", 
		"Dnum", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EmotionalDamage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EmotionalDamageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EmotionalDamageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EmotionalDamageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(EmotionalDamageParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; stmts();
			State = 111; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; stmt();
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__25) | (1L << T__28) | (1L << T__31) | (1L << T__32) | (1L << T__52) | (1L << ID))) != 0)) {
				{
				State = 114; stmts();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(T__0);
			State = 118; stmts();
			State = 119; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public MatrixassignContext matrixassign() {
			return GetRuleContext<MatrixassignContext>(0);
		}
		public NumassignContext numassign() {
			return GetRuleContext<NumassignContext>(0);
		}
		public BoolassignContext boolassign() {
			return GetRuleContext<BoolassignContext>(0);
		}
		public ArrassignContext arrassign() {
			return GetRuleContext<ArrassignContext>(0);
		}
		public GraddclContext graddcl() {
			return GetRuleContext<GraddclContext>(0);
		}
		public UnaryoperatorContext unaryoperator() {
			return GetRuleContext<UnaryoperatorContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public PrintlnContext println() {
			return GetRuleContext<PrintlnContext>(0);
		}
		public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public GradfunccallContext gradfunccall() {
			return GetRuleContext<GradfunccallContext>(0);
		}
		public ReturnstmtContext returnstmt() {
			return GetRuleContext<ReturnstmtContext>(0);
		}
		public IterativeContext iterative() {
			return GetRuleContext<IterativeContext>(0);
		}
		public SelectiveContext selective() {
			return GetRuleContext<SelectiveContext>(0);
		}
		public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public GradfuncContext gradfunc() {
			return GetRuleContext<GradfuncContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmt);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 132;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 121; matrixassign();
					}
					break;
				case 2:
					{
					State = 122; numassign();
					}
					break;
				case 3:
					{
					State = 123; boolassign();
					}
					break;
				case 4:
					{
					State = 124; arrassign();
					}
					break;
				case 5:
					{
					State = 125; graddcl();
					}
					break;
				case 6:
					{
					State = 126; unaryoperator();
					}
					break;
				case 7:
					{
					State = 127; print();
					}
					break;
				case 8:
					{
					State = 128; println();
					}
					break;
				case 9:
					{
					State = 129; funccall();
					}
					break;
				case 10:
					{
					State = 130; gradfunccall();
					}
					break;
				case 11:
					{
					State = 131; returnstmt();
					}
					break;
				}
				State = 134; Match(T__2);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__31:
				case T__32:
					{
					State = 136; iterative();
					}
					break;
				case T__28:
					{
					State = 137; selective();
					}
					break;
				case T__9:
				case T__10:
				case T__14:
				case T__17:
				case T__18:
					{
					State = 138; func();
					}
					break;
				case T__8:
					{
					State = 139; gradfunc();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode STRING_CONSTANT() { return GetToken(EmotionalDamageParser.STRING_CONSTANT, 0); }
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 8, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(T__3);
			State = 145; Match(T__4);
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_CONSTANT:
				{
				State = 146; Match(STRING_CONSTANT);
				}
				break;
			case T__4:
			case T__33:
			case T__36:
			case T__39:
			case T__42:
			case T__52:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 147; bexpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 150; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintlnContext : ParserRuleContext {
		public ITerminalNode STRING_CONSTANT() { return GetToken(EmotionalDamageParser.STRING_CONSTANT, 0); }
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public PrintlnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_println; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintln(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintlnContext println() {
		PrintlnContext _localctx = new PrintlnContext(Context, State);
		EnterRule(_localctx, 10, RULE_println);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(T__6);
			State = 153; Match(T__4);
			State = 156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_CONSTANT:
				{
				State = 154; Match(STRING_CONSTANT);
				}
				break;
			case T__4:
			case T__33:
			case T__36:
			case T__39:
			case T__42:
			case T__52:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 155; bexpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 158; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstmtContext : ParserRuleContext {
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public ReturnstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstmtContext returnstmt() {
		ReturnstmtContext _localctx = new ReturnstmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_returnstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(T__7);
			State = 161; numexpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public RettypeContext rettype() {
			return GetRuleContext<RettypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 14, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; rettype();
			State = 164; id();
			State = 165; Match(T__4);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__17) | (1L << T__18))) != 0)) {
				{
				State = 166; parameters();
				}
			}

			State = 169; Match(T__5);
			State = 170; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GradfuncContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public GradfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gradfunc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGradfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GradfuncContext gradfunc() {
		GradfuncContext _localctx = new GradfuncContext(Context, State);
		EnterRule(_localctx, 16, RULE_gradfunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(T__8);
			State = 173; id();
			State = 174; Match(T__4);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__17) | (1L << T__18))) != 0)) {
				{
				State = 175; parameters();
				}
			}

			State = 178; Match(T__5);
			State = 179; Match(T__0);
			State = 180; numexpr(0);
			State = 181; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RettypeContext : ParserRuleContext {
		public NumtypesContext numtypes() {
			return GetRuleContext<NumtypesContext>(0);
		}
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public RettypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rettype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRettype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RettypeContext rettype() {
		RettypeContext _localctx = new RettypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_rettype);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183; numtypes();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; Match(T__9);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185; Match(T__10);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 186; numtypes();
				State = 187; Match(T__11);
				State = 188; val();
				State = 189; Match(T__12);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 191; numtypes();
				State = 192; Match(T__11);
				State = 193; val();
				State = 194; Match(T__13);
				State = 195; val();
				State = 196; Match(T__12);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 198; Match(T__14);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 20, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; parameter();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 202; Match(T__13);
				State = 203; parameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumtypesContext numtypes() {
			return GetRuleContext<NumtypesContext>(0);
		}
		public MatrixparameterContext matrixparameter() {
			return GetRuleContext<MatrixparameterContext>(0);
		}
		public ArrparameterContext arrparameter() {
			return GetRuleContext<ArrparameterContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 206; numtypes();
				}
				break;
			case 2:
				{
				State = 207; Match(T__9);
				}
				break;
			case 3:
				{
				State = 208; matrixparameter();
				}
				break;
			case 4:
				{
				State = 209; arrparameter();
				}
				break;
			}
			State = 212; Match(T__15);
			State = 213; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixparameterContext : ParserRuleContext {
		public NumtypesContext numtypes() {
			return GetRuleContext<NumtypesContext>(0);
		}
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public MatrixparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixparameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixparameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixparameterContext matrixparameter() {
		MatrixparameterContext _localctx = new MatrixparameterContext(Context, State);
		EnterRule(_localctx, 24, RULE_matrixparameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; numtypes();
			State = 216; Match(T__11);
			{
			State = 217; val();
			}
			State = 218; Match(T__13);
			{
			State = 219; val();
			}
			State = 220; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrparameterContext : ParserRuleContext {
		public NumtypesContext numtypes() {
			return GetRuleContext<NumtypesContext>(0);
		}
		public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		public ArrparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrparameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrparameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrparameterContext arrparameter() {
		ArrparameterContext _localctx = new ArrparameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_arrparameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; numtypes();
			State = 223; Match(T__11);
			{
			State = 224; val();
			}
			State = 225; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraddclContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public GradfunccallContext gradfunccall() {
			return GetRuleContext<GradfunccallContext>(0);
		}
		public GraddclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graddcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraddcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraddclContext graddcl() {
		GraddclContext _localctx = new GraddclContext(Context, State);
		EnterRule(_localctx, 28, RULE_graddcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(T__14);
			State = 228; id();
			State = 229; Match(T__16);
			State = 230; gradfunccall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntdclContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public IntdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntdclContext intdcl() {
		IntdclContext _localctx = new IntdclContext(Context, State);
		EnterRule(_localctx, 30, RULE_intdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(T__17);
			State = 233; id();
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 234; Match(T__16);
				State = 235; numexpr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatdclContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public FloatdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatdclContext floatdcl() {
		FloatdclContext _localctx = new FloatdclContext(Context, State);
		EnterRule(_localctx, 32, RULE_floatdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(T__18);
			State = 239; id();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 240; Match(T__16);
				State = 241; numexpr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntarrdclContext : ParserRuleContext {
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public IntarrdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intarrdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntarrdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntarrdclContext intarrdcl() {
		IntarrdclContext _localctx = new IntarrdclContext(Context, State);
		EnterRule(_localctx, 34, RULE_intarrdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(T__17);
			State = 245; Match(T__11);
			State = 246; val();
			State = 247; Match(T__12);
			State = 248; id();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 249; Match(T__16);
				State = 250; val();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatarrdclContext : ParserRuleContext {
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public FloatarrdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatarrdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatarrdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatarrdclContext floatarrdcl() {
		FloatarrdclContext _localctx = new FloatarrdclContext(Context, State);
		EnterRule(_localctx, 36, RULE_floatarrdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(T__18);
			State = 254; Match(T__11);
			State = 255; val();
			State = 256; Match(T__12);
			State = 257; id();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 258; Match(T__16);
				State = 259; val();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrupdateContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public ArrexprContext arrexpr() {
			return GetRuleContext<ArrexprContext>(0);
		}
		public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		public ArrupdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrupdate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrupdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrupdateContext arrupdate() {
		ArrupdateContext _localctx = new ArrupdateContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrupdate);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 262; id();
				State = 263; Match(T__11);
				State = 264; Match(T__19);
				State = 265; Match(T__12);
				State = 266; Match(T__16);
				State = 269;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
				case T__33:
				case T__36:
				case T__42:
				case T__52:
				case Inum:
				case Fnum:
				case Dnum:
				case ID:
					{
					State = 267; numexpr(0);
					}
					break;
				case T__22:
					{
					State = 268; arrexpr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271; id();
				State = 272; Match(T__11);
				State = 273; val();
				State = 274; Match(T__12);
				State = 275; Match(T__16);
				State = 276; numexpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrassignContext : ParserRuleContext {
		public IntarrdclContext intarrdcl() {
			return GetRuleContext<IntarrdclContext>(0);
		}
		public FloatarrdclContext floatarrdcl() {
			return GetRuleContext<FloatarrdclContext>(0);
		}
		public ArrupdateContext arrupdate() {
			return GetRuleContext<ArrupdateContext>(0);
		}
		public ArrassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrassign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrassignContext arrassign() {
		ArrassignContext _localctx = new ArrassignContext(Context, State);
		EnterRule(_localctx, 40, RULE_arrassign);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280; intarrdcl();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281; floatarrdcl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 282; arrupdate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixassignContext : ParserRuleContext {
		public IntmatrixdclContext intmatrixdcl() {
			return GetRuleContext<IntmatrixdclContext>(0);
		}
		public FloatmatrixdclContext floatmatrixdcl() {
			return GetRuleContext<FloatmatrixdclContext>(0);
		}
		public MatrixupdateContext matrixupdate() {
			return GetRuleContext<MatrixupdateContext>(0);
		}
		public MatrixassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixassign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixassignContext matrixassign() {
		MatrixassignContext _localctx = new MatrixassignContext(Context, State);
		EnterRule(_localctx, 42, RULE_matrixassign);
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285; intmatrixdcl();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286; floatmatrixdcl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 287; matrixupdate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntmatrixdclContext : ParserRuleContext {
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public MatrixarrexprContext matrixarrexpr() {
			return GetRuleContext<MatrixarrexprContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public IntmatrixdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intmatrixdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntmatrixdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntmatrixdclContext intmatrixdcl() {
		IntmatrixdclContext _localctx = new IntmatrixdclContext(Context, State);
		EnterRule(_localctx, 44, RULE_intmatrixdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(T__17);
			State = 291; Match(T__11);
			State = 292; val();
			State = 293; Match(T__13);
			State = 294; val();
			State = 295; Match(T__12);
			State = 296; id();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 297; Match(T__16);
				State = 300;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 298; matrixarrexpr();
					}
					break;
				case 2:
					{
					State = 299; numexpr(0);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatmatrixdclContext : ParserRuleContext {
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public MatrixarrexprContext matrixarrexpr() {
			return GetRuleContext<MatrixarrexprContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public FloatmatrixdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatmatrixdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatmatrixdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatmatrixdclContext floatmatrixdcl() {
		FloatmatrixdclContext _localctx = new FloatmatrixdclContext(Context, State);
		EnterRule(_localctx, 46, RULE_floatmatrixdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(T__18);
			State = 305; Match(T__11);
			State = 306; val();
			State = 307; Match(T__13);
			State = 308; val();
			State = 309; Match(T__12);
			State = 310; id();
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 311; Match(T__16);
				State = 314;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 312; matrixarrexpr();
					}
					break;
				case 2:
					{
					State = 313; numexpr(0);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixupdateContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public MatrixarrexprContext matrixarrexpr() {
			return GetRuleContext<MatrixarrexprContext>(0);
		}
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public MatrixupdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixupdate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixupdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixupdateContext matrixupdate() {
		MatrixupdateContext _localctx = new MatrixupdateContext(Context, State);
		EnterRule(_localctx, 48, RULE_matrixupdate);
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 318; id();
				State = 319; Match(T__11);
				State = 320; Match(T__19);
				State = 321; Match(T__13);
				State = 322; Match(T__19);
				State = 323; Match(T__12);
				State = 324; Match(T__16);
				State = 327;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 325; numexpr(0);
					}
					break;
				case 2:
					{
					State = 326; matrixarrexpr();
					}
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; id();
				State = 330; Match(T__11);
				State = 331; val();
				State = 332; Match(T__13);
				State = 333; val();
				State = 334; Match(T__12);
				State = 335; Match(T__16);
				State = 336; numexpr(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 338; id();
				State = 339; Match(T__11);
				State = 340; val();
				State = 341; Match(T__13);
				State = 342; Match(T__19);
				State = 343; Match(T__12);
				State = 344; Match(T__16);
				State = 345; numexpr(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 347; id();
				State = 348; Match(T__11);
				State = 349; Match(T__19);
				State = 350; Match(T__13);
				State = 351; val();
				State = 352; Match(T__12);
				State = 353; Match(T__16);
				State = 354; numexpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixarrexprContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public MatrixtransposeContext matrixtranspose() {
			return GetRuleContext<MatrixtransposeContext>(0);
		}
		public MatrixinverseContext matrixinverse() {
			return GetRuleContext<MatrixinverseContext>(0);
		}
		public MatrixarrexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixarrexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixarrexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixarrexprContext matrixarrexpr() {
		MatrixarrexprContext _localctx = new MatrixarrexprContext(Context, State);
		EnterRule(_localctx, 50, RULE_matrixarrexpr);
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 358; id();
				State = 359; Match(T__20);
				State = 360; id();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362; matrixtranspose();
				State = 363; Match(T__4);
				State = 364; id();
				State = 365; Match(T__5);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 367; matrixinverse();
				State = 368; Match(T__4);
				State = 369; id();
				State = 370; Match(T__5);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 4);
				{
				State = 372; Match(T__21);
				State = 373; Match(T__4);
				State = 374; id();
				State = 375; Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrexprContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ArrexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrexprContext arrexpr() {
		ArrexprContext _localctx = new ArrexprContext(Context, State);
		EnterRule(_localctx, 52, RULE_arrexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(T__22);
			State = 380; Match(T__4);
			State = 381; id();
			State = 382; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixtransposeContext : ParserRuleContext {
		public MatrixtransposeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixtranspose; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixtranspose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixtransposeContext matrixtranspose() {
		MatrixtransposeContext _localctx = new MatrixtransposeContext(Context, State);
		EnterRule(_localctx, 54, RULE_matrixtranspose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixinverseContext : ParserRuleContext {
		public MatrixinverseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixinverse; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixinverse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixinverseContext matrixinverse() {
		MatrixinverseContext _localctx = new MatrixinverseContext(Context, State);
		EnterRule(_localctx, 56, RULE_matrixinverse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumassignContext : ParserRuleContext {
		public IntdclContext intdcl() {
			return GetRuleContext<IntdclContext>(0);
		}
		public FloatdclContext floatdcl() {
			return GetRuleContext<FloatdclContext>(0);
		}
		public NumupdateContext numupdate() {
			return GetRuleContext<NumupdateContext>(0);
		}
		public NumassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numassign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumassignContext numassign() {
		NumassignContext _localctx = new NumassignContext(Context, State);
		EnterRule(_localctx, 58, RULE_numassign);
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 388; intdcl();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 389; floatdcl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 390; numupdate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumupdateContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public NumupdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numupdate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumupdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumupdateContext numupdate() {
		NumupdateContext _localctx = new NumupdateContext(Context, State);
		EnterRule(_localctx, 60, RULE_numupdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; id();
			State = 394; Match(T__16);
			State = 395; numexpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolassignContext : ParserRuleContext {
		public BooldclContext booldcl() {
			return GetRuleContext<BooldclContext>(0);
		}
		public BoolupdateContext boolupdate() {
			return GetRuleContext<BoolupdateContext>(0);
		}
		public BoolassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolassign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolassignContext boolassign() {
		BoolassignContext _localctx = new BoolassignContext(Context, State);
		EnterRule(_localctx, 62, RULE_boolassign);
		try {
			State = 399;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 397; booldcl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 398; boolupdate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolupdateContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BoolvalContext boolval() {
			return GetRuleContext<BoolvalContext>(0);
		}
		public BoolupdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolupdate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolupdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolupdateContext boolupdate() {
		BoolupdateContext _localctx = new BoolupdateContext(Context, State);
		EnterRule(_localctx, 64, RULE_boolupdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; id();
			State = 402; Match(T__16);
			State = 405;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__33:
			case T__36:
			case T__39:
			case T__42:
			case T__52:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 403; bexpr(0);
				}
				break;
			case T__26:
			case T__27:
				{
				State = 404; boolval();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooldclContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BoolvalContext boolval() {
			return GetRuleContext<BoolvalContext>(0);
		}
		public BooldclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booldcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooldcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooldclContext booldcl() {
		BooldclContext _localctx = new BooldclContext(Context, State);
		EnterRule(_localctx, 66, RULE_booldcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(T__25);
			State = 408; id();
			State = 409; Match(T__16);
			State = 412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__33:
			case T__36:
			case T__39:
			case T__42:
			case T__52:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 410; bexpr(0);
				}
				break;
			case T__26:
			case T__27:
				{
				State = 411; boolval();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolvalContext : ParserRuleContext {
		public BoolvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolval; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolvalContext boolval() {
		BoolvalContext _localctx = new BoolvalContext(Context, State);
		EnterRule(_localctx, 68, RULE_boolval);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			_la = TokenStream.LA(1);
			if ( !(_la==T__26 || _la==T__27) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectiveContext : ParserRuleContext {
		public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		public ElifstmtContext[] elifstmt() {
			return GetRuleContexts<ElifstmtContext>();
		}
		public ElifstmtContext elifstmt(int i) {
			return GetRuleContext<ElifstmtContext>(i);
		}
		public ElsestmtContext elsestmt() {
			return GetRuleContext<ElsestmtContext>(0);
		}
		public SelectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectiveContext selective() {
		SelectiveContext _localctx = new SelectiveContext(Context, State);
		EnterRule(_localctx, 70, RULE_selective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; ifstmt();
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__29) {
				{
				{
				State = 417; elifstmt();
				}
				}
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30) {
				{
				State = 423; elsestmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_ifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(T__28);
			State = 427; Match(T__4);
			State = 428; bexpr(0);
			State = 429; Match(T__5);
			State = 430; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifstmtContext : ParserRuleContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElifstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifstmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifstmtContext elifstmt() {
		ElifstmtContext _localctx = new ElifstmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_elifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(T__29);
			State = 433; Match(T__4);
			State = 434; bexpr(0);
			State = 435; Match(T__5);
			State = 436; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsestmtContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElsestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsestmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsestmtContext elsestmt() {
		ElsestmtContext _localctx = new ElsestmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_elsestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; Match(T__30);
			State = 439; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterativeContext : ParserRuleContext {
		public ForstmtContext forstmt() {
			return GetRuleContext<ForstmtContext>(0);
		}
		public WhilestmtContext whilestmt() {
			return GetRuleContext<WhilestmtContext>(0);
		}
		public IterativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterative; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterativeContext iterative() {
		IterativeContext _localctx = new IterativeContext(Context, State);
		EnterRule(_localctx, 78, RULE_iterative);
		try {
			State = 443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 441; forstmt();
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 442; whilestmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstmtContext : ParserRuleContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public UnaryoperatorContext unaryoperator() {
			return GetRuleContext<UnaryoperatorContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IntdclContext intdcl() {
			return GetRuleContext<IntdclContext>(0);
		}
		public ForstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstmtContext forstmt() {
		ForstmtContext _localctx = new ForstmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_forstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; Match(T__31);
			State = 446; Match(T__4);
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 447; intdcl();
				}
			}

			State = 450; Match(T__2);
			State = 451; bexpr(0);
			State = 452; Match(T__2);
			State = 453; unaryoperator();
			State = 454; Match(T__5);
			State = 455; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestmtContext : ParserRuleContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhilestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilestmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestmtContext whilestmt() {
		WhilestmtContext _localctx = new WhilestmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_whilestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(T__32);
			State = 458; Match(T__4);
			State = 459; bexpr(0);
			State = 460; Match(T__5);
			State = 461; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomContext : ParserRuleContext {
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public RandomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_random; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomContext random() {
		RandomContext _localctx = new RandomContext(Context, State);
		EnterRule(_localctx, 84, RULE_random);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(T__33);
			State = 464; Match(T__4);
			State = 465; val();
			State = 466; Match(T__13);
			State = 467; val();
			State = 468; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumexprContext : ParserRuleContext {
		public NumexprContext[] numexpr() {
			return GetRuleContexts<NumexprContext>();
		}
		public NumexprContext numexpr(int i) {
			return GetRuleContext<NumexprContext>(i);
		}
		public SqrtContext sqrt() {
			return GetRuleContext<SqrtContext>(0);
		}
		public RandomContext random() {
			return GetRuleContext<RandomContext>(0);
		}
		public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		public NumexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumexprContext numexpr() {
		return numexpr(0);
	}

	private NumexprContext numexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumexprContext _localctx = new NumexprContext(Context, _parentState);
		NumexprContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_numexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				State = 471; Match(T__4);
				State = 472; numexpr(0);
				State = 473; Match(T__5);
				}
				break;
			case T__42:
				{
				State = 475; sqrt();
				State = 476; numexpr(6);
				}
				break;
			case T__33:
				{
				State = 478; random();
				}
				break;
			case T__36:
			case T__52:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 479; val();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 495;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new NumexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numexpr);
						State = 482;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 485;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case T__44:
							{
							State = 483; mod();
							}
							break;
						case T__43:
							{
							State = 484; power();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 487; numexpr(6);
						}
						break;
					case 2:
						{
						_localctx = new NumexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numexpr);
						State = 489;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 490;
						_la = TokenStream.LA(1);
						if ( !(_la==T__19 || _la==T__34) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 491; numexpr(5);
						}
						break;
					case 3:
						{
						_localctx = new NumexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numexpr);
						State = 492;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 493;
						_la = TokenStream.LA(1);
						if ( !(_la==T__35 || _la==T__36) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 494; numexpr(4);
						}
						break;
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BexprContext : ParserRuleContext {
		public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public BexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BexprContext bexpr() {
		return bexpr(0);
	}

	private BexprContext bexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BexprContext _localctx = new BexprContext(Context, _parentState);
		BexprContext _prevctx = _localctx;
		int _startState = 88;
		EnterRecursionRule(_localctx, 88, RULE_bexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 501; Match(T__39);
				State = 502; Match(T__4);
				State = 503; bexpr(0);
				State = 504; Match(T__5);
				}
				break;
			case 2:
				{
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__39) {
					{
					State = 506; Match(T__39);
					}
				}

				State = 509; numexpr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 525;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
					case 1:
						{
						_localctx = new BexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 512;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 513;
						_la = TokenStream.LA(1);
						if ( !(_la==T__37 || _la==T__38) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 515;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__16) {
							{
							State = 514; Match(T__16);
							}
						}

						State = 517; bexpr(6);
						}
						break;
					case 2:
						{
						_localctx = new BexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 518;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 519;
						_la = TokenStream.LA(1);
						if ( !(_la==T__16 || _la==T__39) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 520; Match(T__16);
						State = 521; bexpr(5);
						}
						break;
					case 3:
						{
						_localctx = new BexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 522;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 523;
						_la = TokenStream.LA(1);
						if ( !(_la==T__40 || _la==T__41) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 524; bexpr(4);
						}
						break;
					}
					} 
				}
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SqrtContext : ParserRuleContext {
		public SqrtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqrt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqrtContext sqrt() {
		SqrtContext _localctx = new SqrtContext(Context, State);
		EnterRule(_localctx, 90, RULE_sqrt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 92, RULE_power);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532; Match(T__43);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 94, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534; Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryoperatorContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public UnaryoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryoperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryoperatorContext unaryoperator() {
		UnaryoperatorContext _localctx = new UnaryoperatorContext(Context, State);
		EnterRule(_localctx, 96, RULE_unaryoperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 536; id();
				State = 537; Match(T__45);
				}
				break;
			case 2:
				{
				State = 539; id();
				State = 540; Match(T__46);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public GradfunccallContext gradfunccall() {
			return GetRuleContext<GradfunccallContext>(0);
		}
		public ValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValContext val() {
		ValContext _localctx = new ValContext(Context, State);
		EnterRule(_localctx, 98, RULE_val);
		int _la;
		try {
			State = 574;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 544; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__36) {
					{
					State = 545; Match(T__36);
					}
				}

				State = 548; num();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 549; id();
				State = 550; Match(T__11);
				State = 551; val();
				State = 552; Match(T__12);
				State = 554;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 553;
					_la = TokenStream.LA(1);
					if ( !(_la==T__47 || _la==T__48) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 556; id();
				State = 557; Match(T__11);
				State = 558; val();
				State = 559; Match(T__13);
				State = 560; val();
				State = 561; Match(T__12);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 563; id();
				State = 564; Match(T__49);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 566; id();
				State = 567; Match(T__50);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 569; id();
				State = 570; Match(T__51);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 572; funccall();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 573; gradfunccall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 100, RULE_funccall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576; id();
			State = 577; Match(T__4);
			State = 586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 578; id();
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__13) {
					{
					{
					State = 579; Match(T__13);
					State = 580; id();
					}
					}
					State = 585;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 588; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GradfunccallContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public GradfunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gradfunccall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGradfunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GradfunccallContext gradfunccall() {
		GradfunccallContext _localctx = new GradfunccallContext(Context, State);
		EnterRule(_localctx, 102, RULE_gradfunccall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590; Match(T__52);
			State = 591; id();
			State = 592; Match(T__4);
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__36) | (1L << T__52) | (1L << Inum) | (1L << Fnum) | (1L << Dnum) | (1L << ID))) != 0)) {
				{
				State = 593; val();
				State = 598;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__13) {
					{
					{
					State = 594; Match(T__13);
					State = 595; val();
					}
					}
					State = 600;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 603; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(EmotionalDamageParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 104, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public ITerminalNode Fnum() { return GetToken(EmotionalDamageParser.Fnum, 0); }
		public ITerminalNode Dnum() { return GetToken(EmotionalDamageParser.Dnum, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 106, RULE_num);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Inum) | (1L << Fnum) | (1L << Dnum))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumtypesContext : ParserRuleContext {
		public NumtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numtypes; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumtypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumtypesContext numtypes() {
		NumtypesContext _localctx = new NumtypesContext(Context, State);
		EnterRule(_localctx, 108, RULE_numtypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			_la = TokenStream.LA(1);
			if ( !(_la==T__17 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 43: return numexpr_sempred((NumexprContext)_localctx, predIndex);
		case 44: return bexpr_sempred((BexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool numexpr_sempred(NumexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool bexpr_sempred(BexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '=', '\x266', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'v', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x87', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x8F', 
		'\n', '\x5', '\x5', '\x5', '\x91', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x97', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x9F', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\xAA', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\xB3', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\xCA', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\xCF', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xD5', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xEF', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xF5', 
		'\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xFE', '\n', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x107', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x110', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x119', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x11E', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x123', '\n', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x12F', '\n', '\x18', '\x5', '\x18', '\x131', '\n', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\x13D', '\n', '\x19', '\x5', '\x19', '\x13F', '\n', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', 
		'\x14A', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x167', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x17C', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x18A', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x5', '!', '\x192', '\n', '!', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x198', '\n', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', 
		'\x19F', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\a', 
		'%', '\x1A5', '\n', '%', '\f', '%', '\xE', '%', '\x1A8', '\v', '%', '\x3', 
		'%', '\x5', '%', '\x1AB', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', ')', '\x3', ')', '\x5', ')', '\x1BE', '\n', ')', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x5', '*', '\x1C3', '\n', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x1E3', 
		'\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x1E8', '\n', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\a', '-', '\x1F2', '\n', '-', '\f', '-', 
		'\xE', '-', '\x1F5', '\v', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x1FE', '\n', '.', 
		'\x3', '.', '\x5', '.', '\x201', '\n', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x5', '.', '\x206', '\n', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\a', '.', 
		'\x210', '\n', '.', '\f', '.', '\xE', '.', '\x213', '\v', '.', '\x3', 
		'/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x5', '\x32', '\x221', '\n', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x5', '\x33', '\x225', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', 
		'\x22D', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', 
		'\x33', '\x241', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x248', '\n', '\x34', '\f', 
		'\x34', '\xE', '\x34', '\x24B', '\v', '\x34', '\x5', '\x34', '\x24D', 
		'\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', 
		'\x257', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x25A', '\v', '\x35', 
		'\x5', '\x35', '\x25C', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x2', '\x4', 'X', 'Z', '\x39', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', '\x2', '\v', '\x3', '\x2', '\x1D', '\x1E', 
		'\x4', '\x2', '\x16', '\x16', '%', '%', '\x3', '\x2', '&', '\'', '\x3', 
		'\x2', '(', ')', '\x4', '\x2', '\x13', '\x13', '*', '*', '\x3', '\x2', 
		'+', ',', '\x3', '\x2', '\x32', '\x33', '\x3', '\x2', '\x39', ';', '\x3', 
		'\x2', '\x14', '\x15', '\x2', '\x284', '\x2', 'p', '\x3', '\x2', '\x2', 
		'\x2', '\x4', 's', '\x3', '\x2', '\x2', '\x2', '\x6', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x90', '\x3', '\x2', '\x2', '\x2', '\n', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x10', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xE0', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xEA', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '$', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xFF', '\x3', '\x2', '\x2', '\x2', '(', '\x118', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x11D', '\x3', '\x2', '\x2', '\x2', ',', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x132', '\x3', '\x2', '\x2', '\x2', '\x32', '\x166', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x36', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x182', '\x3', '\x2', '\x2', '\x2', 
		':', '\x184', '\x3', '\x2', '\x2', '\x2', '<', '\x189', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x18B', '\x3', '\x2', '\x2', '\x2', '@', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x199', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1A0', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1A2', '\x3', '\x2', '\x2', '\x2', 'J', '\x1AC', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1B2', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1B8', '\x3', '\x2', '\x2', '\x2', 'P', '\x1BD', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1BF', '\x3', '\x2', '\x2', '\x2', 'T', '\x1CB', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x1D1', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x1E2', '\x3', '\x2', '\x2', '\x2', 'Z', '\x200', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x214', '\x3', '\x2', '\x2', '\x2', '^', '\x216', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x218', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x220', '\x3', '\x2', '\x2', '\x2', '\x64', '\x240', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x242', '\x3', '\x2', '\x2', '\x2', 'h', '\x250', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x261', '\x3', '\x2', '\x2', '\x2', 'n', '\x263', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'q', '\x5', '\x4', '\x3', '\x2', 'q', 'r', '\a', '\x2', 
		'\x2', '\x3', 'r', '\x3', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x5', 
		'\b', '\x5', '\x2', 't', 'v', '\x5', '\x4', '\x3', '\x2', 'u', 't', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\x3', '\x2', '\x2', 'x', 
		'y', '\x5', '\x4', '\x3', '\x2', 'y', 'z', '\a', '\x4', '\x2', '\x2', 
		'z', '\a', '\x3', '\x2', '\x2', '\x2', '{', '\x87', '\x5', ',', '\x17', 
		'\x2', '|', '\x87', '\x5', '<', '\x1F', '\x2', '}', '\x87', '\x5', '@', 
		'!', '\x2', '~', '\x87', '\x5', '*', '\x16', '\x2', '\x7F', '\x87', '\x5', 
		'\x1E', '\x10', '\x2', '\x80', '\x87', '\x5', '\x62', '\x32', '\x2', '\x81', 
		'\x87', '\x5', '\n', '\x6', '\x2', '\x82', '\x87', '\x5', '\f', '\a', 
		'\x2', '\x83', '\x87', '\x5', '\x66', '\x34', '\x2', '\x84', '\x87', '\x5', 
		'h', '\x35', '\x2', '\x85', '\x87', '\x5', '\xE', '\b', '\x2', '\x86', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x86', '|', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '}', '\x3', '\x2', '\x2', '\x2', '\x86', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x86', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x81', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x86', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\a', '\x5', '\x2', '\x2', '\x89', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8F', '\x5', 'P', ')', '\x2', '\x8B', '\x8F', '\x5', 
		'H', '%', '\x2', '\x8C', '\x8F', '\x5', '\x10', '\t', '\x2', '\x8D', '\x8F', 
		'\x5', '\x12', '\n', '\x2', '\x8E', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x93', '\a', '\x6', '\x2', '\x2', '\x93', '\x96', 
		'\a', '\a', '\x2', '\x2', '\x94', '\x97', '\a', '\x38', '\x2', '\x2', 
		'\x95', '\x97', '\x5', 'Z', '.', '\x2', '\x96', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\b', '\x2', '\x2', 
		'\x99', '\v', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\t', 
		'\x2', '\x2', '\x9B', '\x9E', '\a', '\a', '\x2', '\x2', '\x9C', '\x9F', 
		'\a', '\x38', '\x2', '\x2', '\x9D', '\x9F', '\x5', 'Z', '.', '\x2', '\x9E', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', 
		'\b', '\x2', '\x2', '\xA1', '\r', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\a', '\n', '\x2', '\x2', '\xA3', '\xA4', '\x5', 'X', '-', '\x2', 
		'\xA4', '\xF', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x5', '\x14', 
		'\v', '\x2', '\xA6', '\xA7', '\x5', 'j', '\x36', '\x2', '\xA7', '\xA9', 
		'\a', '\a', '\x2', '\x2', '\xA8', '\xAA', '\x5', '\x16', '\f', '\x2', 
		'\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', 
		'\a', '\b', '\x2', '\x2', '\xAC', '\xAD', '\x5', '\x6', '\x4', '\x2', 
		'\xAD', '\x11', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '\v', 
		'\x2', '\x2', '\xAF', '\xB0', '\x5', 'j', '\x36', '\x2', '\xB0', '\xB2', 
		'\a', '\a', '\x2', '\x2', '\xB1', '\xB3', '\x5', '\x16', '\f', '\x2', 
		'\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', 
		'\a', '\b', '\x2', '\x2', '\xB5', '\xB6', '\a', '\x3', '\x2', '\x2', '\xB6', 
		'\xB7', '\x5', 'X', '-', '\x2', '\xB7', '\xB8', '\a', '\x4', '\x2', '\x2', 
		'\xB8', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xCA', '\x5', 'n', 
		'\x38', '\x2', '\xBA', '\xCA', '\a', '\f', '\x2', '\x2', '\xBB', '\xCA', 
		'\a', '\r', '\x2', '\x2', '\xBC', '\xBD', '\x5', 'n', '\x38', '\x2', '\xBD', 
		'\xBE', '\a', '\xE', '\x2', '\x2', '\xBE', '\xBF', '\x5', '\x64', '\x33', 
		'\x2', '\xBF', '\xC0', '\a', '\xF', '\x2', '\x2', '\xC0', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\x5', 'n', '\x38', '\x2', '\xC2', 
		'\xC3', '\a', '\xE', '\x2', '\x2', '\xC3', '\xC4', '\x5', '\x64', '\x33', 
		'\x2', '\xC4', '\xC5', '\a', '\x10', '\x2', '\x2', '\xC5', '\xC6', '\x5', 
		'\x64', '\x33', '\x2', '\xC6', '\xC7', '\a', '\xF', '\x2', '\x2', '\xC7', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', '\a', '\x11', '\x2', 
		'\x2', '\xC9', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCE', '\x5', '\x18', '\r', '\x2', '\xCC', 
		'\xCD', '\a', '\x10', '\x2', '\x2', '\xCD', '\xCF', '\x5', '\x16', '\f', 
		'\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\x17', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD5', '\x5', 'n', '\x38', '\x2', '\xD1', '\xD5', '\a', '\f', '\x2', 
		'\x2', '\xD2', '\xD5', '\x5', '\x1A', '\xE', '\x2', '\xD3', '\xD5', '\x5', 
		'\x1C', '\xF', '\x2', '\xD4', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x12', '\x2', '\x2', '\xD7', 
		'\xD8', '\x5', 'j', '\x36', '\x2', '\xD8', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDA', '\x5', 'n', '\x38', '\x2', '\xDA', '\xDB', '\a', 
		'\xE', '\x2', '\x2', '\xDB', '\xDC', '\x5', '\x64', '\x33', '\x2', '\xDC', 
		'\xDD', '\a', '\x10', '\x2', '\x2', '\xDD', '\xDE', '\x5', '\x64', '\x33', 
		'\x2', '\xDE', '\xDF', '\a', '\xF', '\x2', '\x2', '\xDF', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE1', '\x5', 'n', '\x38', '\x2', '\xE1', 
		'\xE2', '\a', '\xE', '\x2', '\x2', '\xE2', '\xE3', '\x5', '\x64', '\x33', 
		'\x2', '\xE3', '\xE4', '\a', '\xF', '\x2', '\x2', '\xE4', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', '\x11', '\x2', '\x2', '\xE6', 
		'\xE7', '\x5', 'j', '\x36', '\x2', '\xE7', '\xE8', '\a', '\x13', '\x2', 
		'\x2', '\xE8', '\xE9', '\x5', 'h', '\x35', '\x2', '\xE9', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x14', '\x2', '\x2', '\xEB', 
		'\xEE', '\x5', 'j', '\x36', '\x2', '\xEC', '\xED', '\a', '\x13', '\x2', 
		'\x2', '\xED', '\xEF', '\x5', 'X', '-', '\x2', '\xEE', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\a', '\x15', '\x2', 
		'\x2', '\xF1', '\xF4', '\x5', 'j', '\x36', '\x2', '\xF2', '\xF3', '\a', 
		'\x13', '\x2', '\x2', '\xF3', '\xF5', '\x5', 'X', '-', '\x2', '\xF4', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '#', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', 
		'\x14', '\x2', '\x2', '\xF7', '\xF8', '\a', '\xE', '\x2', '\x2', '\xF8', 
		'\xF9', '\x5', '\x64', '\x33', '\x2', '\xF9', '\xFA', '\a', '\xF', '\x2', 
		'\x2', '\xFA', '\xFD', '\x5', 'j', '\x36', '\x2', '\xFB', '\xFC', '\a', 
		'\x13', '\x2', '\x2', '\xFC', '\xFE', '\x5', '\x64', '\x33', '\x2', '\xFD', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '%', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\a', 
		'\x15', '\x2', '\x2', '\x100', '\x101', '\a', '\xE', '\x2', '\x2', '\x101', 
		'\x102', '\x5', '\x64', '\x33', '\x2', '\x102', '\x103', '\a', '\xF', 
		'\x2', '\x2', '\x103', '\x106', '\x5', 'j', '\x36', '\x2', '\x104', '\x105', 
		'\a', '\x13', '\x2', '\x2', '\x105', '\x107', '\x5', '\x64', '\x33', '\x2', 
		'\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\'', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x109', '\x5', 'j', '\x36', '\x2', '\x109', '\x10A', '\a', '\xE', '\x2', 
		'\x2', '\x10A', '\x10B', '\a', '\x16', '\x2', '\x2', '\x10B', '\x10C', 
		'\a', '\xF', '\x2', '\x2', '\x10C', '\x10F', '\a', '\x13', '\x2', '\x2', 
		'\x10D', '\x110', '\x5', 'X', '-', '\x2', '\x10E', '\x110', '\x5', '\x36', 
		'\x1C', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x110', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x112', '\x5', 'j', '\x36', '\x2', '\x112', '\x113', 
		'\a', '\xE', '\x2', '\x2', '\x113', '\x114', '\x5', '\x64', '\x33', '\x2', 
		'\x114', '\x115', '\a', '\xF', '\x2', '\x2', '\x115', '\x116', '\a', '\x13', 
		'\x2', '\x2', '\x116', '\x117', '\x5', 'X', '-', '\x2', '\x117', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x111', '\x3', '\x2', '\x2', '\x2', '\x119', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x11A', '\x11E', '\x5', '$', '\x13', '\x2', '\x11B', '\x11E', 
		'\x5', '&', '\x14', '\x2', '\x11C', '\x11E', '\x5', '(', '\x15', '\x2', 
		'\x11D', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x123', '\x5', '.', '\x18', 
		'\x2', '\x120', '\x123', '\x5', '\x30', '\x19', '\x2', '\x121', '\x123', 
		'\x5', '\x32', '\x1A', '\x2', '\x122', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x120', '\x3', '\x2', '\x2', '\x2', '\x122', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '-', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x125', '\a', '\x14', '\x2', '\x2', '\x125', '\x126', '\a', '\xE', '\x2', 
		'\x2', '\x126', '\x127', '\x5', '\x64', '\x33', '\x2', '\x127', '\x128', 
		'\a', '\x10', '\x2', '\x2', '\x128', '\x129', '\x5', '\x64', '\x33', '\x2', 
		'\x129', '\x12A', '\a', '\xF', '\x2', '\x2', '\x12A', '\x130', '\x5', 
		'j', '\x36', '\x2', '\x12B', '\x12E', '\a', '\x13', '\x2', '\x2', '\x12C', 
		'\x12F', '\x5', '\x34', '\x1B', '\x2', '\x12D', '\x12F', '\x5', 'X', '-', 
		'\x2', '\x12E', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '/', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x133', '\a', '\x15', '\x2', '\x2', '\x133', '\x134', '\a', '\xE', '\x2', 
		'\x2', '\x134', '\x135', '\x5', '\x64', '\x33', '\x2', '\x135', '\x136', 
		'\a', '\x10', '\x2', '\x2', '\x136', '\x137', '\x5', '\x64', '\x33', '\x2', 
		'\x137', '\x138', '\a', '\xF', '\x2', '\x2', '\x138', '\x13E', '\x5', 
		'j', '\x36', '\x2', '\x139', '\x13C', '\a', '\x13', '\x2', '\x2', '\x13A', 
		'\x13D', '\x5', '\x34', '\x1B', '\x2', '\x13B', '\x13D', '\x5', 'X', '-', 
		'\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x31', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\x5', 'j', '\x36', '\x2', '\x141', '\x142', '\a', '\xE', '\x2', 
		'\x2', '\x142', '\x143', '\a', '\x16', '\x2', '\x2', '\x143', '\x144', 
		'\a', '\x10', '\x2', '\x2', '\x144', '\x145', '\a', '\x16', '\x2', '\x2', 
		'\x145', '\x146', '\a', '\xF', '\x2', '\x2', '\x146', '\x149', '\a', '\x13', 
		'\x2', '\x2', '\x147', '\x14A', '\x5', 'X', '-', '\x2', '\x148', '\x14A', 
		'\x5', '\x34', '\x1B', '\x2', '\x149', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x14C', '\x5', 'j', '\x36', '\x2', '\x14C', 
		'\x14D', '\a', '\xE', '\x2', '\x2', '\x14D', '\x14E', '\x5', '\x64', '\x33', 
		'\x2', '\x14E', '\x14F', '\a', '\x10', '\x2', '\x2', '\x14F', '\x150', 
		'\x5', '\x64', '\x33', '\x2', '\x150', '\x151', '\a', '\xF', '\x2', '\x2', 
		'\x151', '\x152', '\a', '\x13', '\x2', '\x2', '\x152', '\x153', '\x5', 
		'X', '-', '\x2', '\x153', '\x167', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x155', '\x5', 'j', '\x36', '\x2', '\x155', '\x156', '\a', '\xE', '\x2', 
		'\x2', '\x156', '\x157', '\x5', '\x64', '\x33', '\x2', '\x157', '\x158', 
		'\a', '\x10', '\x2', '\x2', '\x158', '\x159', '\a', '\x16', '\x2', '\x2', 
		'\x159', '\x15A', '\a', '\xF', '\x2', '\x2', '\x15A', '\x15B', '\a', '\x13', 
		'\x2', '\x2', '\x15B', '\x15C', '\x5', 'X', '-', '\x2', '\x15C', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\x5', 'j', '\x36', '\x2', 
		'\x15E', '\x15F', '\a', '\xE', '\x2', '\x2', '\x15F', '\x160', '\a', '\x16', 
		'\x2', '\x2', '\x160', '\x161', '\a', '\x10', '\x2', '\x2', '\x161', '\x162', 
		'\x5', '\x64', '\x33', '\x2', '\x162', '\x163', '\a', '\xF', '\x2', '\x2', 
		'\x163', '\x164', '\a', '\x13', '\x2', '\x2', '\x164', '\x165', '\x5', 
		'X', '-', '\x2', '\x165', '\x167', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x166', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x154', '\x3', '\x2', '\x2', '\x2', '\x166', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x169', '\x5', 'j', '\x36', '\x2', '\x169', '\x16A', '\a', '\x17', 
		'\x2', '\x2', '\x16A', '\x16B', '\x5', 'j', '\x36', '\x2', '\x16B', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\x5', '\x38', '\x1D', '\x2', 
		'\x16D', '\x16E', '\a', '\a', '\x2', '\x2', '\x16E', '\x16F', '\x5', 'j', 
		'\x36', '\x2', '\x16F', '\x170', '\a', '\b', '\x2', '\x2', '\x170', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\x5', ':', '\x1E', '\x2', 
		'\x172', '\x173', '\a', '\a', '\x2', '\x2', '\x173', '\x174', '\x5', 'j', 
		'\x36', '\x2', '\x174', '\x175', '\a', '\b', '\x2', '\x2', '\x175', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\a', '\x18', '\x2', '\x2', 
		'\x177', '\x178', '\a', '\a', '\x2', '\x2', '\x178', '\x179', '\x5', 'j', 
		'\x36', '\x2', '\x179', '\x17A', '\a', '\b', '\x2', '\x2', '\x17A', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x17B', '\x176', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\a', '\x19', '\x2', 
		'\x2', '\x17E', '\x17F', '\a', '\a', '\x2', '\x2', '\x17F', '\x180', '\x5', 
		'j', '\x36', '\x2', '\x180', '\x181', '\a', '\b', '\x2', '\x2', '\x181', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\a', '\x1A', '\x2', 
		'\x2', '\x183', '\x39', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', 
		'\a', '\x1B', '\x2', '\x2', '\x185', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x18A', '\x5', ' ', '\x11', '\x2', '\x187', '\x18A', '\x5', 
		'\"', '\x12', '\x2', '\x188', '\x18A', '\x5', '>', ' ', '\x2', '\x189', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x189', '\x187', '\x3', '\x2', '\x2', 
		'\x2', '\x189', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x18B', '\x18C', '\x5', 'j', '\x36', '\x2', '\x18C', 
		'\x18D', '\a', '\x13', '\x2', '\x2', '\x18D', '\x18E', '\x5', 'X', '-', 
		'\x2', '\x18E', '?', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x192', '\x5', 
		'\x44', '#', '\x2', '\x190', '\x192', '\x5', '\x42', '\"', '\x2', '\x191', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x191', '\x190', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x41', '\x3', '\x2', '\x2', '\x2', '\x193', '\x194', 
		'\x5', 'j', '\x36', '\x2', '\x194', '\x197', '\a', '\x13', '\x2', '\x2', 
		'\x195', '\x198', '\x5', 'Z', '.', '\x2', '\x196', '\x198', '\x5', '\x46', 
		'$', '\x2', '\x197', '\x195', '\x3', '\x2', '\x2', '\x2', '\x197', '\x196', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x19A', '\a', '\x1C', '\x2', '\x2', '\x19A', '\x19B', '\x5', 
		'j', '\x36', '\x2', '\x19B', '\x19E', '\a', '\x13', '\x2', '\x2', '\x19C', 
		'\x19F', '\x5', 'Z', '.', '\x2', '\x19D', '\x19F', '\x5', '\x46', '$', 
		'\x2', '\x19E', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x19F', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\x1A1', '\t', '\x2', '\x2', '\x2', '\x1A1', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x1A2', '\x1A6', '\x5', 'J', '&', '\x2', '\x1A3', '\x1A5', 
		'\x5', 'L', '\'', '\x2', '\x1A4', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A4', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A6', '\x3', '\x2', '\x2', 
		'\x2', '\x1A9', '\x1AB', '\x5', 'N', '(', '\x2', '\x1AA', '\x1A9', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\a', '\x1F', '\x2', 
		'\x2', '\x1AD', '\x1AE', '\a', '\a', '\x2', '\x2', '\x1AE', '\x1AF', '\x5', 
		'Z', '.', '\x2', '\x1AF', '\x1B0', '\a', '\b', '\x2', '\x2', '\x1B0', 
		'\x1B1', '\x5', '\x6', '\x4', '\x2', '\x1B1', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x1B2', '\x1B3', '\a', ' ', '\x2', '\x2', '\x1B3', '\x1B4', '\a', 
		'\a', '\x2', '\x2', '\x1B4', '\x1B5', '\x5', 'Z', '.', '\x2', '\x1B5', 
		'\x1B6', '\a', '\b', '\x2', '\x2', '\x1B6', '\x1B7', '\x5', '\x6', '\x4', 
		'\x2', '\x1B7', 'M', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\a', 
		'!', '\x2', '\x2', '\x1B9', '\x1BA', '\x5', '\x6', '\x4', '\x2', '\x1BA', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BE', '\x5', 'R', '*', '\x2', 
		'\x1BC', '\x1BE', '\x5', 'T', '+', '\x2', '\x1BD', '\x1BB', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BE', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\a', '\"', '\x2', '\x2', 
		'\x1C0', '\x1C2', '\a', '\a', '\x2', '\x2', '\x1C1', '\x1C3', '\x5', ' ', 
		'\x11', '\x2', '\x1C2', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\x3', '\x2', '\x2', 
		'\x2', '\x1C4', '\x1C5', '\a', '\x5', '\x2', '\x2', '\x1C5', '\x1C6', 
		'\x5', 'Z', '.', '\x2', '\x1C6', '\x1C7', '\a', '\x5', '\x2', '\x2', '\x1C7', 
		'\x1C8', '\x5', '\x62', '\x32', '\x2', '\x1C8', '\x1C9', '\a', '\b', '\x2', 
		'\x2', '\x1C9', '\x1CA', '\x5', '\x6', '\x4', '\x2', '\x1CA', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\a', '#', '\x2', '\x2', '\x1CC', 
		'\x1CD', '\a', '\a', '\x2', '\x2', '\x1CD', '\x1CE', '\x5', 'Z', '.', 
		'\x2', '\x1CE', '\x1CF', '\a', '\b', '\x2', '\x2', '\x1CF', '\x1D0', '\x5', 
		'\x6', '\x4', '\x2', '\x1D0', 'U', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D2', '\a', '$', '\x2', '\x2', '\x1D2', '\x1D3', '\a', '\a', '\x2', 
		'\x2', '\x1D3', '\x1D4', '\x5', '\x64', '\x33', '\x2', '\x1D4', '\x1D5', 
		'\a', '\x10', '\x2', '\x2', '\x1D5', '\x1D6', '\x5', '\x64', '\x33', '\x2', 
		'\x1D6', '\x1D7', '\a', '\b', '\x2', '\x2', '\x1D7', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x1D8', '\x1D9', '\b', '-', '\x1', '\x2', '\x1D9', '\x1DA', 
		'\a', '\a', '\x2', '\x2', '\x1DA', '\x1DB', '\x5', 'X', '-', '\x2', '\x1DB', 
		'\x1DC', '\a', '\b', '\x2', '\x2', '\x1DC', '\x1E3', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x1DE', '\x5', '\\', '/', '\x2', '\x1DE', '\x1DF', '\x5', 
		'X', '-', '\b', '\x1DF', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E0', 
		'\x1E3', '\x5', 'V', ',', '\x2', '\x1E1', '\x1E3', '\x5', '\x64', '\x33', 
		'\x2', '\x1E2', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E0', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1F3', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1E7', '\f', '\a', '\x2', '\x2', '\x1E5', 
		'\x1E8', '\x5', '`', '\x31', '\x2', '\x1E6', '\x1E8', '\x5', '^', '\x30', 
		'\x2', '\x1E7', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'\x1E9', '\x1EA', '\x5', 'X', '-', '\b', '\x1EA', '\x1F2', '\x3', '\x2', 
		'\x2', '\x2', '\x1EB', '\x1EC', '\f', '\x6', '\x2', '\x2', '\x1EC', '\x1ED', 
		'\t', '\x3', '\x2', '\x2', '\x1ED', '\x1F2', '\x5', 'X', '-', '\a', '\x1EE', 
		'\x1EF', '\f', '\x5', '\x2', '\x2', '\x1EF', '\x1F0', '\t', '\x4', '\x2', 
		'\x2', '\x1F0', '\x1F2', '\x5', 'X', '-', '\x6', '\x1F1', '\x1E4', '\x3', 
		'\x2', '\x2', '\x2', '\x1F1', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F5', '\x3', '\x2', '\x2', 
		'\x2', '\x1F3', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', 
		'\x3', '\x2', '\x2', '\x2', '\x1F4', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\b', 
		'.', '\x1', '\x2', '\x1F7', '\x1F8', '\a', '*', '\x2', '\x2', '\x1F8', 
		'\x1F9', '\a', '\a', '\x2', '\x2', '\x1F9', '\x1FA', '\x5', 'Z', '.', 
		'\x2', '\x1FA', '\x1FB', '\a', '\b', '\x2', '\x2', '\x1FB', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x1FC', '\x1FE', '\a', '*', '\x2', '\x2', '\x1FD', 
		'\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\x3', '\x2', '\x2', 
		'\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x201', 
		'\x5', 'X', '-', '\x2', '\x200', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x201', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\x202', '\x203', '\f', '\a', '\x2', '\x2', '\x203', 
		'\x205', '\t', '\x5', '\x2', '\x2', '\x204', '\x206', '\a', '\x13', '\x2', 
		'\x2', '\x205', '\x204', '\x3', '\x2', '\x2', '\x2', '\x205', '\x206', 
		'\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', '\x2', 
		'\x207', '\x210', '\x5', 'Z', '.', '\b', '\x208', '\x209', '\f', '\x6', 
		'\x2', '\x2', '\x209', '\x20A', '\t', '\x6', '\x2', '\x2', '\x20A', '\x20B', 
		'\a', '\x13', '\x2', '\x2', '\x20B', '\x210', '\x5', 'Z', '.', '\a', '\x20C', 
		'\x20D', '\f', '\x5', '\x2', '\x2', '\x20D', '\x20E', '\t', '\a', '\x2', 
		'\x2', '\x20E', '\x210', '\x5', 'Z', '.', '\x6', '\x20F', '\x202', '\x3', 
		'\x2', '\x2', '\x2', '\x20F', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20F', 
		'\x20C', '\x3', '\x2', '\x2', '\x2', '\x210', '\x213', '\x3', '\x2', '\x2', 
		'\x2', '\x211', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x211', '\x212', 
		'\x3', '\x2', '\x2', '\x2', '\x212', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x213', '\x211', '\x3', '\x2', '\x2', '\x2', '\x214', '\x215', '\a', 
		'-', '\x2', '\x2', '\x215', ']', '\x3', '\x2', '\x2', '\x2', '\x216', 
		'\x217', '\a', '.', '\x2', '\x2', '\x217', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x218', '\x219', '\a', '/', '\x2', '\x2', '\x219', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x21A', '\x21B', '\x5', 'j', '\x36', '\x2', '\x21B', '\x21C', 
		'\a', '\x30', '\x2', '\x2', '\x21C', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', '\x21E', '\x5', 'j', '\x36', '\x2', '\x21E', '\x21F', '\a', '\x31', 
		'\x2', '\x2', '\x21F', '\x221', '\x3', '\x2', '\x2', '\x2', '\x220', '\x21A', 
		'\x3', '\x2', '\x2', '\x2', '\x220', '\x21D', '\x3', '\x2', '\x2', '\x2', 
		'\x221', '\x63', '\x3', '\x2', '\x2', '\x2', '\x222', '\x241', '\x5', 
		'j', '\x36', '\x2', '\x223', '\x225', '\a', '\'', '\x2', '\x2', '\x224', 
		'\x223', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\x3', '\x2', '\x2', 
		'\x2', '\x225', '\x226', '\x3', '\x2', '\x2', '\x2', '\x226', '\x241', 
		'\x5', 'l', '\x37', '\x2', '\x227', '\x228', '\x5', 'j', '\x36', '\x2', 
		'\x228', '\x229', '\a', '\xE', '\x2', '\x2', '\x229', '\x22A', '\x5', 
		'\x64', '\x33', '\x2', '\x22A', '\x22C', '\a', '\xF', '\x2', '\x2', '\x22B', 
		'\x22D', '\t', '\b', '\x2', '\x2', '\x22C', '\x22B', '\x3', '\x2', '\x2', 
		'\x2', '\x22C', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x241', 
		'\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', '\x5', 'j', '\x36', '\x2', 
		'\x22F', '\x230', '\a', '\xE', '\x2', '\x2', '\x230', '\x231', '\x5', 
		'\x64', '\x33', '\x2', '\x231', '\x232', '\a', '\x10', '\x2', '\x2', '\x232', 
		'\x233', '\x5', '\x64', '\x33', '\x2', '\x233', '\x234', '\a', '\xF', 
		'\x2', '\x2', '\x234', '\x241', '\x3', '\x2', '\x2', '\x2', '\x235', '\x236', 
		'\x5', 'j', '\x36', '\x2', '\x236', '\x237', '\a', '\x34', '\x2', '\x2', 
		'\x237', '\x241', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\x5', 
		'j', '\x36', '\x2', '\x239', '\x23A', '\a', '\x35', '\x2', '\x2', '\x23A', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23C', '\x5', 'j', '\x36', 
		'\x2', '\x23C', '\x23D', '\a', '\x36', '\x2', '\x2', '\x23D', '\x241', 
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\x241', '\x5', '\x66', '\x34', '\x2', 
		'\x23F', '\x241', '\x5', 'h', '\x35', '\x2', '\x240', '\x222', '\x3', 
		'\x2', '\x2', '\x2', '\x240', '\x224', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x240', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x240', '\x235', '\x3', '\x2', '\x2', '\x2', '\x240', '\x238', 
		'\x3', '\x2', '\x2', '\x2', '\x240', '\x23B', '\x3', '\x2', '\x2', '\x2', 
		'\x240', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x240', '\x23F', '\x3', 
		'\x2', '\x2', '\x2', '\x241', '\x65', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x243', '\x5', 'j', '\x36', '\x2', '\x243', '\x24C', '\a', '\a', '\x2', 
		'\x2', '\x244', '\x249', '\x5', 'j', '\x36', '\x2', '\x245', '\x246', 
		'\a', '\x10', '\x2', '\x2', '\x246', '\x248', '\x5', 'j', '\x36', '\x2', 
		'\x247', '\x245', '\x3', '\x2', '\x2', '\x2', '\x248', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x249', '\x247', '\x3', '\x2', '\x2', '\x2', '\x249', 
		'\x24A', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24D', '\x3', '\x2', '\x2', 
		'\x2', '\x24B', '\x249', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x244', 
		'\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\x3', '\x2', '\x2', '\x2', 
		'\x24D', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x24F', '\a', 
		'\b', '\x2', '\x2', '\x24F', 'g', '\x3', '\x2', '\x2', '\x2', '\x250', 
		'\x251', '\a', '\x37', '\x2', '\x2', '\x251', '\x252', '\x5', 'j', '\x36', 
		'\x2', '\x252', '\x25B', '\a', '\a', '\x2', '\x2', '\x253', '\x258', '\x5', 
		'\x64', '\x33', '\x2', '\x254', '\x255', '\a', '\x10', '\x2', '\x2', '\x255', 
		'\x257', '\x5', '\x64', '\x33', '\x2', '\x256', '\x254', '\x3', '\x2', 
		'\x2', '\x2', '\x257', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x258', '\x256', 
		'\x3', '\x2', '\x2', '\x2', '\x258', '\x259', '\x3', '\x2', '\x2', '\x2', 
		'\x259', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x258', '\x3', 
		'\x2', '\x2', '\x2', '\x25B', '\x253', '\x3', '\x2', '\x2', '\x2', '\x25B', 
		'\x25C', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', 
		'\x2', '\x25D', '\x25E', '\a', '\b', '\x2', '\x2', '\x25E', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x25F', '\x260', '\a', '<', '\x2', '\x2', '\x260', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x261', '\x262', '\t', '\t', '\x2', 
		'\x2', '\x262', 'm', '\x3', '\x2', '\x2', '\x2', '\x263', '\x264', '\t', 
		'\n', '\x2', '\x2', '\x264', 'o', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'u', '\x86', '\x8E', '\x90', '\x96', '\x9E', '\xA9', '\xB2', '\xC9', '\xCE', 
		'\xD4', '\xEE', '\xF4', '\xFD', '\x106', '\x10F', '\x118', '\x11D', '\x122', 
		'\x12E', '\x130', '\x13C', '\x13E', '\x149', '\x166', '\x17B', '\x189', 
		'\x191', '\x197', '\x19E', '\x1A6', '\x1AA', '\x1BD', '\x1C2', '\x1E2', 
		'\x1E7', '\x1F1', '\x1F3', '\x1FD', '\x200', '\x205', '\x20F', '\x211', 
		'\x220', '\x224', '\x22C', '\x240', '\x249', '\x24C', '\x258', '\x25B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

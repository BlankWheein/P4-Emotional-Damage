//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EmotionalDamage.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class EmotionalDamageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, Inum=50, Fnum=51, IDENTIFIER=52, 
		STRING_CONSTANT=53, WS=54, LINE_COMMENT=55;
	public const int
		RULE_prog = 0, RULE_stmts = 1, RULE_numtype = 2, RULE_print = 3, RULE_types = 4, 
		RULE_returntype = 5, RULE_dcl = 6, RULE_stmt = 7, RULE_ifstmt = 8, RULE_elifstmt = 9, 
		RULE_elsestmt = 10, RULE_expr = 11, RULE_bexpr = 12;
	public static readonly string[] ruleNames = {
		"prog", "stmts", "numtype", "print", "types", "returntype", "dcl", "stmt", 
		"ifstmt", "elifstmt", "elsestmt", "expr", "bexpr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'print'", "'println'", "'['", "']'", "'bool'", 
		"'string'", "'void'", "'('", "','", "')'", "'{'", "'}'", "';'", "'='", 
		"'\\\\'", "'$'", "'return'", "'.rand'", "'T'", "'\u00A7'", "'.'", "'relu'", 
		"'++'", "'--'", "'while'", "'for'", "'if'", "'elif'", "'else'", "'sqrt'", 
		"'**'", "'%'", "'*'", "'/'", "'+'", "'-'", "'.row'", "'.col'", "'.len'", 
		"'>'", "'<'", "'>='", "'<='", "'=='", "'true'", "'false'", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "Inum", "Fnum", "IDENTIFIER", "STRING_CONSTANT", "WS", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EmotionalDamage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EmotionalDamageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EmotionalDamageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EmotionalDamageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EmotionalDamageParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			stmts();
			State = 27;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__18) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 31;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__6:
				case T__7:
				case T__8:
					{
					State = 29;
					dcl();
					}
					break;
				case T__2:
				case T__3:
				case T__18:
				case T__26:
				case T__27:
				case T__28:
				case IDENTIFIER:
					{
					State = 30;
					stmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumtypeContext : ParserRuleContext {
		public NumtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterNumtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitNumtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumtypeContext numtype() {
		NumtypeContext _localctx = new NumtypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_numtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 6, RULE_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Inum() { return GetTokens(EmotionalDamageParser.Inum); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum(int i) {
			return GetToken(EmotionalDamageParser.Inum, i);
		}
		public TypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_types; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesContext types() {
		TypesContext _localctx = new TypesContext(Context, State);
		EnterRule(_localctx, 8, RULE_types);
		int _la;
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				Match(T__0);
				State = 44;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 41;
					Match(T__4);
					State = 42;
					Match(Inum);
					State = 43;
					Match(T__5);
					}
					break;
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 46;
					Match(T__4);
					State = 47;
					Match(Inum);
					State = 48;
					Match(T__5);
					}
				}

				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				Match(T__1);
				State = 55;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 52;
					Match(T__4);
					State = 53;
					Match(Inum);
					State = 54;
					Match(T__5);
					}
					break;
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 57;
					Match(T__4);
					State = 58;
					Match(Inum);
					State = 59;
					Match(T__5);
					}
				}

				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62;
				Match(T__6);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63;
				Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturntypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		public ReturntypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returntype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterReturntype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitReturntype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturntype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturntypeContext returntype() {
		ReturntypeContext _localctx = new ReturntypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_returntype);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__6:
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				types();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
	 
		public DclContext() { }
		public virtual void CopyFrom(DclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayDeclarationContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumtypeContext numtype() {
			return GetRuleContext<NumtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public ArrayDeclarationContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringDclContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CONSTANT() { return GetToken(EmotionalDamageParser.STRING_CONSTANT, 0); }
		public StringDclContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterStringDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitStringDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDcl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatrixDeclarationContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumtypeContext numtype() {
			return GetRuleContext<NumtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Inum() { return GetTokens(EmotionalDamageParser.Inum); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum(int i) {
			return GetToken(EmotionalDamageParser.Inum, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public MatrixDeclarationContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterMatrixDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitMatrixDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumDclContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumtypeContext numtype() {
			return GetRuleContext<NumtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NumDclContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterNumDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitNumDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumDcl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GradientDclContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumtypeContext numtype() {
			return GetRuleContext<NumtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public GradientDclContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterGradientDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitGradientDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGradientDcl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncDclContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturntypeContext returntype() {
			return GetRuleContext<ReturntypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext[] types() {
			return GetRuleContexts<TypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types(int i) {
			return GetRuleContext<TypesContext>(i);
		}
		public FuncDclContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterFuncDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitFuncDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDcl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolDeclarationContext : DclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BoolDeclarationContext(DclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterBoolDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitBoolDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 12, RULE_dcl);
		int _la;
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new FuncDclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				returntype();
				State = 71;
				Match(IDENTIFIER);
				State = 72;
				Match(T__9);
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__6) | (1L << T__7))) != 0)) {
					{
					{
					State = 73;
					types();
					State = 74;
					Match(IDENTIFIER);
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__10) {
						{
						{
						State = 76;
						Match(T__10);
						State = 77;
						types();
						State = 78;
						Match(IDENTIFIER);
						}
						}
						State = 84;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 87;
				Match(T__11);
				State = 88;
				Match(T__12);
				State = 89;
				stmts();
				State = 90;
				Match(T__13);
				}
				break;
			case 2:
				_localctx = new MatrixDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				numtype();
				State = 93;
				Match(T__4);
				State = 94;
				Match(Inum);
				State = 95;
				Match(T__5);
				State = 96;
				Match(T__4);
				State = 97;
				Match(Inum);
				State = 98;
				Match(T__5);
				State = 99;
				Match(IDENTIFIER);
				State = 100;
				Match(T__14);
				}
				break;
			case 3:
				_localctx = new ArrayDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				numtype();
				State = 103;
				Match(T__4);
				State = 104;
				Match(Inum);
				State = 105;
				Match(T__5);
				State = 106;
				Match(IDENTIFIER);
				State = 107;
				Match(T__14);
				}
				break;
			case 4:
				_localctx = new NumDclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 109;
				numtype();
				State = 110;
				Match(IDENTIFIER);
				State = 111;
				Match(T__15);
				State = 112;
				expr(0);
				State = 113;
				Match(T__14);
				}
				break;
			case 5:
				_localctx = new StringDclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 115;
				Match(T__7);
				State = 116;
				Match(IDENTIFIER);
				State = 117;
				Match(T__15);
				State = 118;
				Match(STRING_CONSTANT);
				State = 119;
				Match(T__14);
				}
				break;
			case 6:
				_localctx = new BoolDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 120;
				Match(T__6);
				State = 121;
				Match(IDENTIFIER);
				State = 122;
				Match(T__15);
				State = 123;
				bexpr();
				State = 124;
				Match(T__14);
				}
				break;
			case 7:
				_localctx = new GradientDclContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 126;
				numtype();
				State = 127;
				Match(IDENTIFIER);
				State = 128;
				Match(T__15);
				State = 129;
				Match(IDENTIFIER);
				State = 130;
				Match(T__16);
				State = 131;
				Match(IDENTIFIER);
				State = 132;
				Match(T__14);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryPlusContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public UnaryPlusContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterUnaryPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitUnaryPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public UnaryMinusContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterUnaryMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitUnaryMinus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayElementAssignStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CONSTANT() { return GetToken(EmotionalDamageParser.STRING_CONSTANT, 0); }
		public ArrayElementAssignStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterArrayElementAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitArrayElementAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotExprsContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public DotExprsContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterDotExprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitDotExprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotExprs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolAssignStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BoolAssignStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterBoolAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitBoolAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CONSTANT() { return GetToken(EmotionalDamageParser.STRING_CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumAssignStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NumAssignStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterNumAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitNumAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatrixElementAssignStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Inum() { return GetTokens(EmotionalDamageParser.Inum); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum(int i) {
			return GetToken(EmotionalDamageParser.Inum, i);
		}
		public MatrixElementAssignStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterMatrixElementAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitMatrixElementAssignStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixElementAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public WhileStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectiveContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifstmtContext[] elifstmt() {
			return GetRuleContexts<ElifstmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifstmtContext elifstmt(int i) {
			return GetRuleContext<ElifstmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsestmtContext elsestmt() {
			return GetRuleContext<ElsestmtContext>(0);
		}
		public SelectiveContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterSelective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitSelective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public FuncStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterFuncStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitFuncStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public ReturnStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReluStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Inum() { return GetTokens(EmotionalDamageParser.Inum); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum(int i) {
			return GetToken(EmotionalDamageParser.Inum, i);
		}
		public ReluStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterReluStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitReluStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReluStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ForStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RandIdentifierStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public RandIdentifierStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterRandIdentifierStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitRandIdentifierStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandIdentifierStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TransposeMatrixStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public TransposeMatrixStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterTransposeMatrixStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitTransposeMatrixStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransposeMatrixStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_stmt);
		int _la;
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				print();
				State = 137;
				Match(T__9);
				State = 143;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__17:
				case STRING_CONSTANT:
					{
					State = 139;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__17) {
						{
						State = 138;
						Match(T__17);
						}
					}

					State = 141;
					Match(STRING_CONSTANT);
					}
					break;
				case T__9:
				case T__31:
				case T__37:
				case Inum:
				case Fnum:
				case IDENTIFIER:
					{
					State = 142;
					expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 145;
				Match(T__11);
				State = 146;
				Match(T__14);
				}
				break;
			case 2:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				Match(T__18);
				State = 149;
				Match(IDENTIFIER);
				State = 150;
				Match(T__14);
				}
				break;
			case 3:
				_localctx = new NumAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 151;
				Match(IDENTIFIER);
				State = 152;
				Match(T__15);
				State = 153;
				expr(0);
				State = 154;
				Match(T__14);
				}
				break;
			case 4:
				_localctx = new RandIdentifierStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 156;
				Match(IDENTIFIER);
				State = 157;
				Match(T__19);
				State = 158;
				Match(T__9);
				State = 159;
				Match(IDENTIFIER);
				State = 160;
				Match(T__10);
				State = 161;
				Match(IDENTIFIER);
				State = 162;
				Match(T__11);
				State = 163;
				Match(T__14);
				}
				break;
			case 5:
				_localctx = new BoolAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 164;
				Match(IDENTIFIER);
				State = 165;
				Match(T__15);
				State = 166;
				bexpr();
				State = 167;
				Match(T__14);
				}
				break;
			case 6:
				_localctx = new TransposeMatrixStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 169;
				Match(IDENTIFIER);
				State = 170;
				Match(T__15);
				State = 171;
				Match(T__20);
				State = 172;
				Match(T__9);
				State = 173;
				Match(IDENTIFIER);
				State = 174;
				Match(T__11);
				State = 175;
				Match(T__14);
				}
				break;
			case 7:
				_localctx = new DotExprsContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 176;
				Match(IDENTIFIER);
				State = 177;
				Match(T__15);
				State = 178;
				Match(IDENTIFIER);
				State = 179;
				Match(T__21);
				State = 180;
				Match(IDENTIFIER);
				State = 181;
				Match(T__14);
				}
				break;
			case 8:
				_localctx = new ReluStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 182;
				Match(IDENTIFIER);
				State = 186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 183;
					Match(T__4);
					State = 184;
					_la = TokenStream.LA(1);
					if ( !(_la==Inum || _la==IDENTIFIER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 185;
					Match(T__5);
					}
					break;
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 188;
					Match(T__4);
					State = 189;
					_la = TokenStream.LA(1);
					if ( !(_la==Inum || _la==IDENTIFIER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 190;
					Match(T__5);
					}
				}

				State = 193;
				Match(T__22);
				State = 194;
				Match(T__23);
				State = 195;
				Match(T__14);
				}
				break;
			case 9:
				_localctx = new MatrixElementAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 196;
				Match(IDENTIFIER);
				State = 197;
				Match(T__4);
				State = 198;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 199;
				Match(T__5);
				State = 200;
				Match(T__4);
				State = 201;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 202;
				Match(T__5);
				State = 203;
				Match(T__15);
				State = 204;
				expr(0);
				State = 205;
				Match(T__14);
				}
				break;
			case 10:
				_localctx = new ArrayElementAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 207;
				Match(IDENTIFIER);
				State = 208;
				Match(T__4);
				State = 209;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 210;
				Match(T__5);
				State = 211;
				Match(T__15);
				State = 214;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__9:
				case T__31:
				case T__37:
				case Inum:
				case Fnum:
				case IDENTIFIER:
					{
					State = 212;
					expr(0);
					}
					break;
				case STRING_CONSTANT:
					{
					State = 213;
					Match(STRING_CONSTANT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 216;
				Match(T__14);
				}
				break;
			case 11:
				_localctx = new UnaryPlusContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 217;
				Match(IDENTIFIER);
				State = 218;
				Match(T__24);
				State = 219;
				Match(T__14);
				}
				break;
			case 12:
				_localctx = new UnaryMinusContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 220;
				Match(IDENTIFIER);
				State = 221;
				Match(T__25);
				State = 222;
				Match(T__14);
				}
				break;
			case 13:
				_localctx = new FuncStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 223;
				Match(IDENTIFIER);
				State = 224;
				Match(T__9);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 225;
					Match(IDENTIFIER);
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__10) {
						{
						{
						State = 226;
						Match(T__10);
						State = 227;
						Match(IDENTIFIER);
						}
						}
						State = 232;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 235;
				Match(T__11);
				State = 236;
				Match(T__14);
				}
				break;
			case 14:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 237;
				Match(T__26);
				State = 238;
				Match(T__9);
				State = 241;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 239;
					bexpr();
					}
					break;
				case 2:
					{
					State = 240;
					Match(IDENTIFIER);
					}
					break;
				}
				State = 243;
				Match(T__11);
				State = 244;
				Match(T__12);
				State = 245;
				stmts();
				State = 246;
				Match(T__13);
				}
				break;
			case 15:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 248;
				Match(T__27);
				State = 249;
				Match(T__9);
				State = 250;
				Match(T__0);
				State = 251;
				Match(IDENTIFIER);
				State = 252;
				Match(T__15);
				State = 253;
				expr(0);
				State = 254;
				Match(T__14);
				State = 255;
				bexpr();
				State = 256;
				Match(T__14);
				State = 261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 257;
					Match(IDENTIFIER);
					State = 258;
					Match(T__24);
					}
					break;
				case 2:
					{
					State = 259;
					Match(IDENTIFIER);
					State = 260;
					Match(T__25);
					}
					break;
				}
				State = 263;
				Match(T__11);
				State = 264;
				Match(T__12);
				State = 265;
				stmts();
				State = 266;
				Match(T__13);
				}
				break;
			case 16:
				_localctx = new SelectiveContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 268;
				ifstmt();
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__29) {
					{
					{
					State = 269;
					elifstmt();
					}
					}
					State = 274;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30) {
					{
					State = 275;
					elsestmt();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(T__28);
			State = 281;
			Match(T__9);
			State = 282;
			bexpr();
			State = 283;
			Match(T__11);
			State = 284;
			Match(T__12);
			State = 285;
			stmts();
			State = 286;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ElifstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterElifstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitElifstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifstmtContext elifstmt() {
		ElifstmtContext _localctx = new ElifstmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_elifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(T__29);
			State = 289;
			Match(T__9);
			State = 290;
			bexpr();
			State = 291;
			Match(T__11);
			State = 292;
			Match(T__12);
			State = 293;
			stmts();
			State = 294;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ElsestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterElsestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitElsestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsestmtContext elsestmt() {
		ElsestmtContext _localctx = new ElsestmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_elsestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(T__30);
			State = 297;
			Match(T__12);
			State = 298;
			stmts();
			State = 299;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RowidContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public RowidContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterRowid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitRowid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LengthidContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public LengthidContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterLengthid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitLengthid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntValContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public IntValContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterIntVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitIntVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PowExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterPowExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitPowExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegValContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegValContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterNegVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitNegVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatValContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fnum() { return GetToken(EmotionalDamageParser.Fnum, 0); }
		public FloatValContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterFloatVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitFloatVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DivideExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterDivideExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitDivideExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public FuncCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumArrValueContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public NumArrValueContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterNumArrValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitNumArrValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumArrValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PlusExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterPlusExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitPlusExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumValueContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public NumValueContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterNumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitNumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumMatrixValueContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Inum() { return GetTokens(EmotionalDamageParser.Inum); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum(int i) {
			return GetToken(EmotionalDamageParser.Inum, i);
		}
		public NumMatrixValueContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterNumMatrixValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitNumMatrixValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumMatrixValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqrtExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SqrtExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterSqrtExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitSqrtExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrtExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ModExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterModExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitModExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimesExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TimesExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterTimesExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitTimesExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimesExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColidContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public ColidContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterColid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitColid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MinusExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterMinusExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitMinusExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 302;
				Match(T__9);
				State = 303;
				expr(0);
				State = 304;
				Match(T__11);
				}
				break;
			case 2:
				{
				_localctx = new FuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 306;
				Match(IDENTIFIER);
				State = 307;
				Match(T__9);
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 308;
					Match(IDENTIFIER);
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__10) {
						{
						{
						State = 309;
						Match(T__10);
						State = 310;
						Match(IDENTIFIER);
						}
						}
						State = 315;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 318;
				Match(T__11);
				}
				break;
			case 3:
				{
				_localctx = new SqrtExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 319;
				Match(T__31);
				State = 320;
				Match(T__9);
				State = 321;
				expr(0);
				State = 322;
				Match(T__11);
				}
				break;
			case 4:
				{
				_localctx = new NumValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 324;
				Match(IDENTIFIER);
				}
				break;
			case 5:
				{
				_localctx = new NumArrValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 325;
				Match(IDENTIFIER);
				{
				State = 326;
				Match(T__4);
				State = 327;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 328;
				Match(T__5);
				}
				}
				break;
			case 6:
				{
				_localctx = new NumMatrixValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 329;
				Match(IDENTIFIER);
				{
				State = 330;
				Match(T__4);
				State = 331;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 332;
				Match(T__5);
				}
				{
				State = 334;
				Match(T__4);
				State = 335;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 336;
				Match(T__5);
				}
				}
				break;
			case 7:
				{
				_localctx = new RowidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 337;
				Match(IDENTIFIER);
				State = 338;
				Match(T__38);
				}
				break;
			case 8:
				{
				_localctx = new ColidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 339;
				Match(IDENTIFIER);
				State = 340;
				Match(T__39);
				}
				break;
			case 9:
				{
				_localctx = new LengthidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 341;
				Match(IDENTIFIER);
				State = 342;
				Match(T__40);
				}
				break;
			case 10:
				{
				_localctx = new NegValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 343;
				Match(T__37);
				State = 344;
				expr(3);
				}
				break;
			case 11:
				{
				_localctx = new IntValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 345;
				Match(Inum);
				}
				break;
			case 12:
				{
				_localctx = new FloatValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 346;
				Match(Fnum);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 369;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 367;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new PowExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 349;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 350;
						Match(T__32);
						State = 351;
						expr(16);
						}
						break;
					case 2:
						{
						_localctx = new ModExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 352;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 353;
						Match(T__33);
						State = 354;
						expr(15);
						}
						break;
					case 3:
						{
						_localctx = new TimesExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 355;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 356;
						Match(T__34);
						State = 357;
						expr(14);
						}
						break;
					case 4:
						{
						_localctx = new DivideExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 358;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 359;
						Match(T__35);
						State = 360;
						expr(13);
						}
						break;
					case 5:
						{
						_localctx = new PlusExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 361;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 362;
						Match(T__36);
						State = 363;
						expr(12);
						}
						break;
					case 6:
						{
						_localctx = new MinusExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 364;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 365;
						Match(T__37);
						State = 366;
						expr(11);
						}
						break;
					}
					} 
				}
				State = 371;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BexprContext : ParserRuleContext {
		public BexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bexpr; } }
	 
		public BexprContext() { }
		public virtual void CopyFrom(BexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualsContext : BexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public EqualsContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterEqualsContext : BexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public GreaterEqualsContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterGreaterEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitGreaterEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerEqualsContext : BexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public SmallerEqualsContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterSmallerEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitSmallerEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolValueContext : BexprContext {
		public BoolValueContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterBoolValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitBoolValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterContext : BexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public GreaterContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterGreater(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitGreater(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerContext : BexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public SmallerContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterSmaller(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitSmaller(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmaller(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualsContext : BexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public NotEqualsContext(BexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.EnterNotEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEmotionalDamageListener typedListener = listener as IEmotionalDamageListener;
			if (typedListener != null) typedListener.ExitNotEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEquals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BexprContext bexpr() {
		BexprContext _localctx = new BexprContext(Context, State);
		EnterRule(_localctx, 24, RULE_bexpr);
		int _la;
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new GreaterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				Match(IDENTIFIER);
				State = 373;
				Match(T__41);
				State = 374;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				_localctx = new SmallerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 375;
				Match(IDENTIFIER);
				State = 376;
				Match(T__42);
				State = 377;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				_localctx = new GreaterEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 378;
				Match(IDENTIFIER);
				State = 379;
				Match(T__43);
				State = 380;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				_localctx = new SmallerEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 381;
				Match(IDENTIFIER);
				State = 382;
				Match(T__44);
				State = 383;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 5:
				_localctx = new EqualsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 384;
				Match(IDENTIFIER);
				State = 385;
				Match(T__45);
				State = 386;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__46) | (1L << T__47) | (1L << Inum) | (1L << IDENTIFIER))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				_localctx = new NotEqualsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 387;
				Match(IDENTIFIER);
				State = 388;
				Match(T__48);
				State = 389;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__46) | (1L << T__47) | (1L << Inum) | (1L << IDENTIFIER))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 7:
				_localctx = new BoolValueContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 390;
				_la = TokenStream.LA(1);
				if ( !(_la==T__46 || _la==T__47) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\x18C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\"', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '%', 
		'\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '/', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x34', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', ':', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '?', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x43', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'G', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'S', '\n', 
		'\b', '\f', '\b', '\xE', '\b', 'V', '\v', '\b', '\x5', '\b', 'X', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x89', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x8E', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x92', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\xBD', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\xC2', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xD9', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', '\xE7', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '\xEA', '\v', '\t', '\x5', '\t', '\xEC', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\xF4', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x108', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\x111', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\x114', '\v', '\t', '\x3', '\t', '\x5', '\t', '\x117', '\n', 
		'\t', '\x5', '\t', '\x119', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '\x13A', '\n', '\r', '\f', '\r', '\xE', '\r', 
		'\x13D', '\v', '\r', '\x5', '\r', '\x13F', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x15E', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x172', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\x175', '\v', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x18A', '\n', 
		'\xE', '\x3', '\xE', '\x2', '\x3', '\x18', '\xF', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x2', '\a', '\x3', '\x2', '\x3', '\x4', '\x3', '\x2', '\x5', '\x6', '\x4', 
		'\x2', '\x34', '\x34', '\x36', '\x36', '\x5', '\x2', '\x31', '\x32', '\x34', 
		'\x34', '\x36', '\x36', '\x3', '\x2', '\x31', '\x32', '\x2', '\x1C3', 
		'\x2', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x4', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '&', '\x3', '\x2', '\x2', '\x2', '\b', '(', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x42', '\x3', '\x2', '\x2', '\x2', '\f', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x118', '\x3', '\x2', '\x2', '\x2', '\x12', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x122', '\x3', '\x2', '\x2', '\x2', '\x16', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x189', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x5', '\x4', 
		'\x3', '\x2', '\x1D', '\x1E', '\a', '\x2', '\x2', '\x3', '\x1E', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', '\"', '\x5', '\xE', '\b', '\x2', ' ', 
		'\"', '\x5', '\x10', '\t', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', 
		'\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x5', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\t', '\x2', '\x2', '\x2', '\'', '\a', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\t', '\x3', '\x2', '\x2', ')', '\t', '\x3', 
		'\x2', '\x2', '\x2', '*', '.', '\a', '\x3', '\x2', '\x2', '+', ',', '\a', 
		'\a', '\x2', '\x2', ',', '-', '\a', '\x34', '\x2', '\x2', '-', '/', '\a', 
		'\b', '\x2', '\x2', '.', '+', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x33', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x31', '\a', '\a', '\x2', '\x2', '\x31', '\x32', '\a', '\x34', '\x2', 
		'\x2', '\x32', '\x34', '\a', '\b', '\x2', '\x2', '\x33', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x35', '\x39', '\a', '\x4', '\x2', 
		'\x2', '\x36', '\x37', '\a', '\a', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\x34', '\x2', '\x2', '\x38', ':', '\a', '\b', '\x2', '\x2', '\x39', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', 
		'>', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '\a', '\x2', '\x2', '<', 
		'=', '\a', '\x34', '\x2', '\x2', '=', '?', '\a', '\b', '\x2', '\x2', '>', 
		';', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x43', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\a', '\t', '\x2', 
		'\x2', '\x41', '\x43', '\a', '\n', '\x2', '\x2', '\x42', '*', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x35', '\x3', '\x2', '\x2', '\x2', '\x42', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\v', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\x5', '\n', '\x6', 
		'\x2', '\x45', 'G', '\a', '\v', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\x5', '\f', '\a', '\x2', 'I', 'J', '\a', 
		'\x36', '\x2', '\x2', 'J', 'W', '\a', '\f', '\x2', '\x2', 'K', 'L', '\x5', 
		'\n', '\x6', '\x2', 'L', 'M', '\a', '\x36', '\x2', '\x2', 'M', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'O', '\a', '\r', '\x2', '\x2', 'O', 'P', '\x5', 
		'\n', '\x6', '\x2', 'P', 'Q', '\a', '\x36', '\x2', '\x2', 'Q', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'N', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'K', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', 
		'\xE', '\x2', '\x2', 'Z', '[', '\a', '\xF', '\x2', '\x2', '[', '\\', '\x5', 
		'\x4', '\x3', '\x2', '\\', ']', '\a', '\x10', '\x2', '\x2', ']', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\x5', '\x6', '\x4', '\x2', '_', 
		'`', '\a', '\a', '\x2', '\x2', '`', '\x61', '\a', '\x34', '\x2', '\x2', 
		'\x61', '\x62', '\a', '\b', '\x2', '\x2', '\x62', '\x63', '\a', '\a', 
		'\x2', '\x2', '\x63', '\x64', '\a', '\x34', '\x2', '\x2', '\x64', '\x65', 
		'\a', '\b', '\x2', '\x2', '\x65', '\x66', '\a', '\x36', '\x2', '\x2', 
		'\x66', 'g', '\a', '\x11', '\x2', '\x2', 'g', '\x89', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\x5', '\x6', '\x4', '\x2', 'i', 'j', '\a', '\a', '\x2', 
		'\x2', 'j', 'k', '\a', '\x34', '\x2', '\x2', 'k', 'l', '\a', '\b', '\x2', 
		'\x2', 'l', 'm', '\a', '\x36', '\x2', '\x2', 'm', 'n', '\a', '\x11', '\x2', 
		'\x2', 'n', '\x89', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x5', '\x6', 
		'\x4', '\x2', 'p', 'q', '\a', '\x36', '\x2', '\x2', 'q', 'r', '\a', '\x12', 
		'\x2', '\x2', 'r', 's', '\x5', '\x18', '\r', '\x2', 's', 't', '\a', '\x11', 
		'\x2', '\x2', 't', '\x89', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', 
		'\n', '\x2', '\x2', 'v', 'w', '\a', '\x36', '\x2', '\x2', 'w', 'x', '\a', 
		'\x12', '\x2', '\x2', 'x', 'y', '\a', '\x37', '\x2', '\x2', 'y', '\x89', 
		'\a', '\x11', '\x2', '\x2', 'z', '{', '\a', '\t', '\x2', '\x2', '{', '|', 
		'\a', '\x36', '\x2', '\x2', '|', '}', '\a', '\x12', '\x2', '\x2', '}', 
		'~', '\x5', '\x1A', '\xE', '\x2', '~', '\x7F', '\a', '\x11', '\x2', '\x2', 
		'\x7F', '\x89', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x5', '\x6', 
		'\x4', '\x2', '\x81', '\x82', '\a', '\x36', '\x2', '\x2', '\x82', '\x83', 
		'\a', '\x12', '\x2', '\x2', '\x83', '\x84', '\a', '\x36', '\x2', '\x2', 
		'\x84', '\x85', '\a', '\x13', '\x2', '\x2', '\x85', '\x86', '\a', '\x36', 
		'\x2', '\x2', '\x86', '\x87', '\a', '\x11', '\x2', '\x2', '\x87', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x88', 'H', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x88', 'h', '\x3', '\x2', '\x2', '\x2', 
		'\x88', 'o', '\x3', '\x2', '\x2', '\x2', '\x88', 'u', '\x3', '\x2', '\x2', 
		'\x2', '\x88', 'z', '\x3', '\x2', '\x2', '\x2', '\x88', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\xF', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\x5', '\b', '\x5', '\x2', '\x8B', '\x91', '\a', '\f', '\x2', 
		'\x2', '\x8C', '\x8E', '\a', '\x14', '\x2', '\x2', '\x8D', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x92', '\a', '\x37', '\x2', 
		'\x2', '\x90', '\x92', '\x5', '\x18', '\r', '\x2', '\x91', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\xE', '\x2', 
		'\x2', '\x94', '\x95', '\a', '\x11', '\x2', '\x2', '\x95', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\a', '\x15', '\x2', '\x2', '\x97', 
		'\x98', '\a', '\x36', '\x2', '\x2', '\x98', '\x119', '\a', '\x11', '\x2', 
		'\x2', '\x99', '\x9A', '\a', '\x36', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		'\x12', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\x18', '\r', '\x2', '\x9C', 
		'\x9D', '\a', '\x11', '\x2', '\x2', '\x9D', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '\x36', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		'\x16', '\x2', '\x2', '\xA0', '\xA1', '\a', '\f', '\x2', '\x2', '\xA1', 
		'\xA2', '\a', '\x36', '\x2', '\x2', '\xA2', '\xA3', '\a', '\r', '\x2', 
		'\x2', '\xA3', '\xA4', '\a', '\x36', '\x2', '\x2', '\xA4', '\xA5', '\a', 
		'\xE', '\x2', '\x2', '\xA5', '\x119', '\a', '\x11', '\x2', '\x2', '\xA6', 
		'\xA7', '\a', '\x36', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x12', '\x2', 
		'\x2', '\xA8', '\xA9', '\x5', '\x1A', '\xE', '\x2', '\xA9', '\xAA', '\a', 
		'\x11', '\x2', '\x2', '\xAA', '\x119', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\a', '\x36', '\x2', '\x2', '\xAC', '\xAD', '\a', '\x12', '\x2', 
		'\x2', '\xAD', '\xAE', '\a', '\x17', '\x2', '\x2', '\xAE', '\xAF', '\a', 
		'\f', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x36', '\x2', '\x2', '\xB0', 
		'\xB1', '\a', '\xE', '\x2', '\x2', '\xB1', '\x119', '\a', '\x11', '\x2', 
		'\x2', '\xB2', '\xB3', '\a', '\x36', '\x2', '\x2', '\xB3', '\xB4', '\a', 
		'\x12', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x36', '\x2', '\x2', '\xB5', 
		'\xB6', '\a', '\x18', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x36', '\x2', 
		'\x2', '\xB7', '\x119', '\a', '\x11', '\x2', '\x2', '\xB8', '\xBC', '\a', 
		'\x36', '\x2', '\x2', '\xB9', '\xBA', '\a', '\a', '\x2', '\x2', '\xBA', 
		'\xBB', '\t', '\x4', '\x2', '\x2', '\xBB', '\xBD', '\a', '\b', '\x2', 
		'\x2', '\xBC', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBF', '\a', '\a', '\x2', '\x2', '\xBF', '\xC0', '\t', '\x4', '\x2', 
		'\x2', '\xC0', '\xC2', '\a', '\b', '\x2', '\x2', '\xC1', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x19', '\x2', 
		'\x2', '\xC4', '\xC5', '\a', '\x1A', '\x2', '\x2', '\xC5', '\x119', '\a', 
		'\x11', '\x2', '\x2', '\xC6', '\xC7', '\a', '\x36', '\x2', '\x2', '\xC7', 
		'\xC8', '\a', '\a', '\x2', '\x2', '\xC8', '\xC9', '\t', '\x4', '\x2', 
		'\x2', '\xC9', '\xCA', '\a', '\b', '\x2', '\x2', '\xCA', '\xCB', '\a', 
		'\a', '\x2', '\x2', '\xCB', '\xCC', '\t', '\x4', '\x2', '\x2', '\xCC', 
		'\xCD', '\a', '\b', '\x2', '\x2', '\xCD', '\xCE', '\a', '\x12', '\x2', 
		'\x2', '\xCE', '\xCF', '\x5', '\x18', '\r', '\x2', '\xCF', '\xD0', '\a', 
		'\x11', '\x2', '\x2', '\xD0', '\x119', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\a', '\x36', '\x2', '\x2', '\xD2', '\xD3', '\a', '\a', '\x2', 
		'\x2', '\xD3', '\xD4', '\t', '\x4', '\x2', '\x2', '\xD4', '\xD5', '\a', 
		'\b', '\x2', '\x2', '\xD5', '\xD8', '\a', '\x12', '\x2', '\x2', '\xD6', 
		'\xD9', '\x5', '\x18', '\r', '\x2', '\xD7', '\xD9', '\a', '\x37', '\x2', 
		'\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\x119', '\a', '\x11', '\x2', '\x2', '\xDB', '\xDC', '\a', '\x36', '\x2', 
		'\x2', '\xDC', '\xDD', '\a', '\x1B', '\x2', '\x2', '\xDD', '\x119', '\a', 
		'\x11', '\x2', '\x2', '\xDE', '\xDF', '\a', '\x36', '\x2', '\x2', '\xDF', 
		'\xE0', '\a', '\x1C', '\x2', '\x2', '\xE0', '\x119', '\a', '\x11', '\x2', 
		'\x2', '\xE1', '\xE2', '\a', '\x36', '\x2', '\x2', '\xE2', '\xEB', '\a', 
		'\f', '\x2', '\x2', '\xE3', '\xE8', '\a', '\x36', '\x2', '\x2', '\xE4', 
		'\xE5', '\a', '\r', '\x2', '\x2', '\xE5', '\xE7', '\a', '\x36', '\x2', 
		'\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '\xE', '\x2', 
		'\x2', '\xEE', '\x119', '\a', '\x11', '\x2', '\x2', '\xEF', '\xF0', '\a', 
		'\x1D', '\x2', '\x2', '\xF0', '\xF3', '\a', '\f', '\x2', '\x2', '\xF1', 
		'\xF4', '\x5', '\x1A', '\xE', '\x2', '\xF2', '\xF4', '\a', '\x36', '\x2', 
		'\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF6', '\a', '\xE', '\x2', '\x2', '\xF6', '\xF7', '\a', '\xF', '\x2', 
		'\x2', '\xF7', '\xF8', '\x5', '\x4', '\x3', '\x2', '\xF8', '\xF9', '\a', 
		'\x10', '\x2', '\x2', '\xF9', '\x119', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\a', '\x1E', '\x2', '\x2', '\xFB', '\xFC', '\a', '\f', '\x2', 
		'\x2', '\xFC', '\xFD', '\a', '\x3', '\x2', '\x2', '\xFD', '\xFE', '\a', 
		'\x36', '\x2', '\x2', '\xFE', '\xFF', '\a', '\x12', '\x2', '\x2', '\xFF', 
		'\x100', '\x5', '\x18', '\r', '\x2', '\x100', '\x101', '\a', '\x11', '\x2', 
		'\x2', '\x101', '\x102', '\x5', '\x1A', '\xE', '\x2', '\x102', '\x107', 
		'\a', '\x11', '\x2', '\x2', '\x103', '\x104', '\a', '\x36', '\x2', '\x2', 
		'\x104', '\x108', '\a', '\x1B', '\x2', '\x2', '\x105', '\x106', '\a', 
		'\x36', '\x2', '\x2', '\x106', '\x108', '\a', '\x1C', '\x2', '\x2', '\x107', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', 
		'\a', '\xE', '\x2', '\x2', '\x10A', '\x10B', '\a', '\xF', '\x2', '\x2', 
		'\x10B', '\x10C', '\x5', '\x4', '\x3', '\x2', '\x10C', '\x10D', '\a', 
		'\x10', '\x2', '\x2', '\x10D', '\x119', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x112', '\x5', '\x12', '\n', '\x2', '\x10F', '\x111', '\x5', '\x14', 
		'\v', '\x2', '\x110', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x111', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x117', '\x5', '\x16', '\f', '\x2', '\x116', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x96', '\x3', '\x2', '\x2', '\x2', '\x118', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x118', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x118', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\xB2', '\x3', '\x2', '\x2', '\x2', '\x118', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\x118', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x118', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\xDE', '\x3', '\x2', '\x2', '\x2', '\x118', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\x118', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x118', '\xFA', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\a', '\x1F', 
		'\x2', '\x2', '\x11B', '\x11C', '\a', '\f', '\x2', '\x2', '\x11C', '\x11D', 
		'\x5', '\x1A', '\xE', '\x2', '\x11D', '\x11E', '\a', '\xE', '\x2', '\x2', 
		'\x11E', '\x11F', '\a', '\xF', '\x2', '\x2', '\x11F', '\x120', '\x5', 
		'\x4', '\x3', '\x2', '\x120', '\x121', '\a', '\x10', '\x2', '\x2', '\x121', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\a', ' ', '\x2', 
		'\x2', '\x123', '\x124', '\a', '\f', '\x2', '\x2', '\x124', '\x125', '\x5', 
		'\x1A', '\xE', '\x2', '\x125', '\x126', '\a', '\xE', '\x2', '\x2', '\x126', 
		'\x127', '\a', '\xF', '\x2', '\x2', '\x127', '\x128', '\x5', '\x4', '\x3', 
		'\x2', '\x128', '\x129', '\a', '\x10', '\x2', '\x2', '\x129', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\a', '!', '\x2', '\x2', 
		'\x12B', '\x12C', '\a', '\xF', '\x2', '\x2', '\x12C', '\x12D', '\x5', 
		'\x4', '\x3', '\x2', '\x12D', '\x12E', '\a', '\x10', '\x2', '\x2', '\x12E', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\b', '\r', '\x1', 
		'\x2', '\x130', '\x131', '\a', '\f', '\x2', '\x2', '\x131', '\x132', '\x5', 
		'\x18', '\r', '\x2', '\x132', '\x133', '\a', '\xE', '\x2', '\x2', '\x133', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\a', '\x36', '\x2', 
		'\x2', '\x135', '\x13E', '\a', '\f', '\x2', '\x2', '\x136', '\x13B', '\a', 
		'\x36', '\x2', '\x2', '\x137', '\x138', '\a', '\r', '\x2', '\x2', '\x138', 
		'\x13A', '\a', '\x36', '\x2', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x136', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x15E', '\a', '\xE', '\x2', '\x2', '\x141', '\x142', 
		'\a', '\"', '\x2', '\x2', '\x142', '\x143', '\a', '\f', '\x2', '\x2', 
		'\x143', '\x144', '\x5', '\x18', '\r', '\x2', '\x144', '\x145', '\a', 
		'\xE', '\x2', '\x2', '\x145', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x15E', '\a', '\x36', '\x2', '\x2', '\x147', '\x148', '\a', '\x36', '\x2', 
		'\x2', '\x148', '\x149', '\a', '\a', '\x2', '\x2', '\x149', '\x14A', '\t', 
		'\x4', '\x2', '\x2', '\x14A', '\x15E', '\a', '\b', '\x2', '\x2', '\x14B', 
		'\x14C', '\a', '\x36', '\x2', '\x2', '\x14C', '\x14D', '\a', '\a', '\x2', 
		'\x2', '\x14D', '\x14E', '\t', '\x4', '\x2', '\x2', '\x14E', '\x14F', 
		'\a', '\b', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x151', '\a', '\a', '\x2', '\x2', '\x151', '\x152', '\t', '\x4', 
		'\x2', '\x2', '\x152', '\x15E', '\a', '\b', '\x2', '\x2', '\x153', '\x154', 
		'\a', '\x36', '\x2', '\x2', '\x154', '\x15E', '\a', ')', '\x2', '\x2', 
		'\x155', '\x156', '\a', '\x36', '\x2', '\x2', '\x156', '\x15E', '\a', 
		'*', '\x2', '\x2', '\x157', '\x158', '\a', '\x36', '\x2', '\x2', '\x158', 
		'\x15E', '\a', '+', '\x2', '\x2', '\x159', '\x15A', '\a', '(', '\x2', 
		'\x2', '\x15A', '\x15E', '\x5', '\x18', '\r', '\x5', '\x15B', '\x15E', 
		'\a', '\x34', '\x2', '\x2', '\x15C', '\x15E', '\a', '\x35', '\x2', '\x2', 
		'\x15D', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x141', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x15D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x15D', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x157', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15C', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x160', '\f', '\x11', '\x2', '\x2', '\x160', '\x161', 
		'\a', '#', '\x2', '\x2', '\x161', '\x172', '\x5', '\x18', '\r', '\x12', 
		'\x162', '\x163', '\f', '\x10', '\x2', '\x2', '\x163', '\x164', '\a', 
		'$', '\x2', '\x2', '\x164', '\x172', '\x5', '\x18', '\r', '\x11', '\x165', 
		'\x166', '\f', '\xF', '\x2', '\x2', '\x166', '\x167', '\a', '%', '\x2', 
		'\x2', '\x167', '\x172', '\x5', '\x18', '\r', '\x10', '\x168', '\x169', 
		'\f', '\xE', '\x2', '\x2', '\x169', '\x16A', '\a', '&', '\x2', '\x2', 
		'\x16A', '\x172', '\x5', '\x18', '\r', '\xF', '\x16B', '\x16C', '\f', 
		'\r', '\x2', '\x2', '\x16C', '\x16D', '\a', '\'', '\x2', '\x2', '\x16D', 
		'\x172', '\x5', '\x18', '\r', '\xE', '\x16E', '\x16F', '\f', '\f', '\x2', 
		'\x2', '\x16F', '\x170', '\a', '(', '\x2', '\x2', '\x170', '\x172', '\x5', 
		'\x18', '\r', '\r', '\x171', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x171', '\x165', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x168', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x175', '\x3', '\x2', '\x2', '\x2', '\x173', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x174', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x175', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x176', '\x177', '\a', '\x36', '\x2', '\x2', '\x177', '\x178', 
		'\a', ',', '\x2', '\x2', '\x178', '\x18A', '\t', '\x4', '\x2', '\x2', 
		'\x179', '\x17A', '\a', '\x36', '\x2', '\x2', '\x17A', '\x17B', '\a', 
		'-', '\x2', '\x2', '\x17B', '\x18A', '\t', '\x4', '\x2', '\x2', '\x17C', 
		'\x17D', '\a', '\x36', '\x2', '\x2', '\x17D', '\x17E', '\a', '.', '\x2', 
		'\x2', '\x17E', '\x18A', '\t', '\x4', '\x2', '\x2', '\x17F', '\x180', 
		'\a', '\x36', '\x2', '\x2', '\x180', '\x181', '\a', '/', '\x2', '\x2', 
		'\x181', '\x18A', '\t', '\x4', '\x2', '\x2', '\x182', '\x183', '\a', '\x36', 
		'\x2', '\x2', '\x183', '\x184', '\a', '\x30', '\x2', '\x2', '\x184', '\x18A', 
		'\t', '\x5', '\x2', '\x2', '\x185', '\x186', '\a', '\x36', '\x2', '\x2', 
		'\x186', '\x187', '\a', '\x33', '\x2', '\x2', '\x187', '\x18A', '\t', 
		'\x5', '\x2', '\x2', '\x188', '\x18A', '\t', '\x6', '\x2', '\x2', '\x189', 
		'\x176', '\x3', '\x2', '\x2', '\x2', '\x189', '\x179', '\x3', '\x2', '\x2', 
		'\x2', '\x189', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x189', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x182', '\x3', '\x2', '\x2', '\x2', 
		'\x189', '\x185', '\x3', '\x2', '\x2', '\x2', '\x189', '\x188', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'!', '#', '.', '\x33', '\x39', '>', '\x42', '\x46', 'T', 'W', '\x88', 
		'\x8D', '\x91', '\xBC', '\xC1', '\xD8', '\xE8', '\xEB', '\xF3', '\x107', 
		'\x112', '\x116', '\x118', '\x13B', '\x13E', '\x15D', '\x171', '\x173', 
		'\x189',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

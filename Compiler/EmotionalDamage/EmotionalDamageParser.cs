//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/caspera/Documents/P4-Emotional-Damage/Compiler/EmotionalDamage/EmotionalDamage.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class EmotionalDamageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, STRING_CONSTANT=50, Inum=51, Fnum=52, 
		Dnum=53, ID=54, WS=55;
	public const int
		RULE_prog = 0, RULE_stmts = 1, RULE_block = 2, RULE_stmt = 3, RULE_print = 4, 
		RULE_println = 5, RULE_returnstmt = 6, RULE_func = 7, RULE_gradfunc = 8, 
		RULE_rettype = 9, RULE_parameters = 10, RULE_parameter = 11, RULE_matrixparameter = 12, 
		RULE_arrparameter = 13, RULE_intdcl = 14, RULE_floatdcl = 15, RULE_intarrdcl = 16, 
		RULE_floatarrdcl = 17, RULE_arrupdate = 18, RULE_arrassign = 19, RULE_matrixassign = 20, 
		RULE_intmatrixdcl = 21, RULE_floatmatrixdcl = 22, RULE_matrixupdate = 23, 
		RULE_matrixarrexpr = 24, RULE_arrexpr = 25, RULE_matrixtranspose = 26, 
		RULE_matrixinverse = 27, RULE_numassign = 28, RULE_numupdate = 29, RULE_boolassign = 30, 
		RULE_boolupdate = 31, RULE_booldcl = 32, RULE_boolval = 33, RULE_selective = 34, 
		RULE_ifstmt = 35, RULE_elifstmt = 36, RULE_elsestmt = 37, RULE_iterative = 38, 
		RULE_forstmt = 39, RULE_whilestmt = 40, RULE_random = 41, RULE_numexpr = 42, 
		RULE_bexpr = 43, RULE_sqrt = 44, RULE_power = 45, RULE_mod = 46, RULE_unaryoperator = 47, 
		RULE_val = 48, RULE_funccall = 49, RULE_gradfunccall = 50, RULE_id = 51, 
		RULE_num = 52, RULE_numtypes = 53;
	public static readonly string[] ruleNames = {
		"prog", "stmts", "block", "stmt", "print", "println", "returnstmt", "func", 
		"gradfunc", "rettype", "parameters", "parameter", "matrixparameter", "arrparameter", 
		"intdcl", "floatdcl", "intarrdcl", "floatarrdcl", "arrupdate", "arrassign", 
		"matrixassign", "intmatrixdcl", "floatmatrixdcl", "matrixupdate", "matrixarrexpr", 
		"arrexpr", "matrixtranspose", "matrixinverse", "numassign", "numupdate", 
		"boolassign", "boolupdate", "booldcl", "boolval", "selective", "ifstmt", 
		"elifstmt", "elsestmt", "iterative", "forstmt", "whilestmt", "random", 
		"numexpr", "bexpr", "sqrt", "power", "mod", "unaryoperator", "val", "funccall", 
		"gradfunccall", "id", "num", "numtypes"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'print'", "'('", "')'", "'println'", "'return'", 
		"'autograd'", "'string'", "'void'", "'['", "']'", "','", "'int'", "'='", 
		"'float'", "'*'", "'.'", "'toMatrix'", "'toArray'", "'T'", "'~'", "'bool'", 
		"'true'", "'false'", "'if'", "'elif'", "'else'", "'for'", "'while'", "'rand'", 
		"'/'", "'+'", "'-'", "'>'", "'<'", "'!'", "'AND'", "'OR'", "'sqrt'", "'**'", 
		"'%'", "'++'", "'--'", "'.row'", "'.col'", "'.len'", "'.backwards'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "STRING_CONSTANT", "Inum", "Fnum", "Dnum", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EmotionalDamage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EmotionalDamageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EmotionalDamageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EmotionalDamageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(EmotionalDamageParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; stmts();
			State = 109; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; stmt();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__14) | (1L << T__16) | (1L << T__23) | (1L << T__26) | (1L << T__29) | (1L << T__30) | (1L << ID))) != 0)) {
				{
				State = 112; stmts();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(T__0);
			State = 116; stmts();
			State = 117; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public MatrixassignContext matrixassign() {
			return GetRuleContext<MatrixassignContext>(0);
		}
		public NumassignContext numassign() {
			return GetRuleContext<NumassignContext>(0);
		}
		public BoolassignContext boolassign() {
			return GetRuleContext<BoolassignContext>(0);
		}
		public ArrassignContext arrassign() {
			return GetRuleContext<ArrassignContext>(0);
		}
		public UnaryoperatorContext unaryoperator() {
			return GetRuleContext<UnaryoperatorContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public PrintlnContext println() {
			return GetRuleContext<PrintlnContext>(0);
		}
		public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public GradfunccallContext gradfunccall() {
			return GetRuleContext<GradfunccallContext>(0);
		}
		public ReturnstmtContext returnstmt() {
			return GetRuleContext<ReturnstmtContext>(0);
		}
		public IterativeContext iterative() {
			return GetRuleContext<IterativeContext>(0);
		}
		public SelectiveContext selective() {
			return GetRuleContext<SelectiveContext>(0);
		}
		public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public GradfuncContext gradfunc() {
			return GetRuleContext<GradfuncContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmt);
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 129;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 119; matrixassign();
					}
					break;
				case 2:
					{
					State = 120; numassign();
					}
					break;
				case 3:
					{
					State = 121; boolassign();
					}
					break;
				case 4:
					{
					State = 122; arrassign();
					}
					break;
				case 5:
					{
					State = 123; unaryoperator();
					}
					break;
				case 6:
					{
					State = 124; print();
					}
					break;
				case 7:
					{
					State = 125; println();
					}
					break;
				case 8:
					{
					State = 126; funccall();
					}
					break;
				case 9:
					{
					State = 127; gradfunccall();
					}
					break;
				case 10:
					{
					State = 128; returnstmt();
					}
					break;
				}
				State = 131; Match(T__2);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__29:
				case T__30:
					{
					State = 133; iterative();
					}
					break;
				case T__26:
					{
					State = 134; selective();
					}
					break;
				case T__9:
				case T__10:
				case T__14:
				case T__16:
					{
					State = 135; func();
					}
					break;
				case T__8:
					{
					State = 136; gradfunc();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode STRING_CONSTANT() { return GetToken(EmotionalDamageParser.STRING_CONSTANT, 0); }
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 8, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(T__3);
			State = 142; Match(T__4);
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_CONSTANT:
				{
				State = 143; Match(STRING_CONSTANT);
				}
				break;
			case T__4:
			case T__31:
			case T__34:
			case T__37:
			case T__40:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 144; bexpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 147; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintlnContext : ParserRuleContext {
		public ITerminalNode STRING_CONSTANT() { return GetToken(EmotionalDamageParser.STRING_CONSTANT, 0); }
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public PrintlnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_println; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintln(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintlnContext println() {
		PrintlnContext _localctx = new PrintlnContext(Context, State);
		EnterRule(_localctx, 10, RULE_println);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(T__6);
			State = 150; Match(T__4);
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_CONSTANT:
				{
				State = 151; Match(STRING_CONSTANT);
				}
				break;
			case T__4:
			case T__31:
			case T__34:
			case T__37:
			case T__40:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 152; bexpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 155; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnstmtContext : ParserRuleContext {
		public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		public ReturnstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnstmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnstmtContext returnstmt() {
		ReturnstmtContext _localctx = new ReturnstmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_returnstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(T__7);
			State = 158; val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public RettypeContext rettype() {
			return GetRuleContext<RettypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 14, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; rettype();
			State = 161; id();
			State = 162; Match(T__4);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__14) | (1L << T__16))) != 0)) {
				{
				State = 163; parameters();
				}
			}

			State = 166; Match(T__5);
			State = 167; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GradfuncContext : ParserRuleContext {
		public RettypeContext rettype() {
			return GetRuleContext<RettypeContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public GradfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gradfunc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGradfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GradfuncContext gradfunc() {
		GradfuncContext _localctx = new GradfuncContext(Context, State);
		EnterRule(_localctx, 16, RULE_gradfunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(T__8);
			State = 170; rettype();
			State = 171; id();
			State = 172; Match(T__4);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__14) | (1L << T__16))) != 0)) {
				{
				State = 173; parameters();
				}
			}

			State = 176; Match(T__5);
			State = 177; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RettypeContext : ParserRuleContext {
		public NumtypesContext numtypes() {
			return GetRuleContext<NumtypesContext>(0);
		}
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public RettypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rettype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRettype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RettypeContext rettype() {
		RettypeContext _localctx = new RettypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_rettype);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179; numtypes();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; Match(T__9);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181; Match(T__10);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 182; numtypes();
				State = 183; Match(T__11);
				State = 184; val();
				State = 185; Match(T__12);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 187; numtypes();
				State = 188; Match(T__11);
				State = 189; val();
				State = 190; Match(T__13);
				State = 191; val();
				State = 192; Match(T__12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 20, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; parameter();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 197; Match(T__13);
				State = 198; parameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumtypesContext numtypes() {
			return GetRuleContext<NumtypesContext>(0);
		}
		public MatrixparameterContext matrixparameter() {
			return GetRuleContext<MatrixparameterContext>(0);
		}
		public ArrparameterContext arrparameter() {
			return GetRuleContext<ArrparameterContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 201; numtypes();
				}
				break;
			case 2:
				{
				State = 202; Match(T__9);
				}
				break;
			case 3:
				{
				State = 203; matrixparameter();
				}
				break;
			case 4:
				{
				State = 204; arrparameter();
				}
				break;
			}
			State = 207; id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixparameterContext : ParserRuleContext {
		public NumtypesContext numtypes() {
			return GetRuleContext<NumtypesContext>(0);
		}
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public MatrixparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixparameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixparameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixparameterContext matrixparameter() {
		MatrixparameterContext _localctx = new MatrixparameterContext(Context, State);
		EnterRule(_localctx, 24, RULE_matrixparameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; numtypes();
			State = 210; Match(T__11);
			{
			State = 211; val();
			}
			State = 212; Match(T__13);
			{
			State = 213; val();
			}
			State = 214; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrparameterContext : ParserRuleContext {
		public NumtypesContext numtypes() {
			return GetRuleContext<NumtypesContext>(0);
		}
		public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		public ArrparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrparameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrparameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrparameterContext arrparameter() {
		ArrparameterContext _localctx = new ArrparameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_arrparameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; numtypes();
			State = 217; Match(T__11);
			{
			State = 218; val();
			}
			State = 219; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntdclContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public IntdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntdclContext intdcl() {
		IntdclContext _localctx = new IntdclContext(Context, State);
		EnterRule(_localctx, 28, RULE_intdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(T__14);
			State = 222; id();
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 223; Match(T__15);
				State = 224; numexpr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatdclContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public FloatdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatdclContext floatdcl() {
		FloatdclContext _localctx = new FloatdclContext(Context, State);
		EnterRule(_localctx, 30, RULE_floatdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(T__16);
			State = 228; id();
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 229; Match(T__15);
				State = 230; numexpr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntarrdclContext : ParserRuleContext {
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public IntarrdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intarrdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntarrdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntarrdclContext intarrdcl() {
		IntarrdclContext _localctx = new IntarrdclContext(Context, State);
		EnterRule(_localctx, 32, RULE_intarrdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(T__14);
			State = 234; Match(T__11);
			State = 235; val();
			State = 236; Match(T__12);
			State = 237; id();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 238; Match(T__15);
				State = 239; val();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatarrdclContext : ParserRuleContext {
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public FloatarrdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatarrdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatarrdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatarrdclContext floatarrdcl() {
		FloatarrdclContext _localctx = new FloatarrdclContext(Context, State);
		EnterRule(_localctx, 34, RULE_floatarrdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; Match(T__16);
			State = 243; Match(T__11);
			State = 244; val();
			State = 245; Match(T__12);
			State = 246; id();
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 247; Match(T__15);
				State = 248; val();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrupdateContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public ArrexprContext arrexpr() {
			return GetRuleContext<ArrexprContext>(0);
		}
		public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		public ArrupdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrupdate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrupdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrupdateContext arrupdate() {
		ArrupdateContext _localctx = new ArrupdateContext(Context, State);
		EnterRule(_localctx, 36, RULE_arrupdate);
		try {
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 251; id();
				State = 252; Match(T__15);
				State = 255;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
				case T__31:
				case T__34:
				case T__40:
				case Inum:
				case Fnum:
				case Dnum:
				case ID:
					{
					State = 253; numexpr(0);
					}
					break;
				case T__20:
					{
					State = 254; arrexpr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257; id();
				State = 258; Match(T__11);
				State = 259; val();
				State = 260; Match(T__12);
				State = 261; Match(T__15);
				State = 262; numexpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrassignContext : ParserRuleContext {
		public IntarrdclContext intarrdcl() {
			return GetRuleContext<IntarrdclContext>(0);
		}
		public FloatarrdclContext floatarrdcl() {
			return GetRuleContext<FloatarrdclContext>(0);
		}
		public ArrupdateContext arrupdate() {
			return GetRuleContext<ArrupdateContext>(0);
		}
		public ArrassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrassign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrassignContext arrassign() {
		ArrassignContext _localctx = new ArrassignContext(Context, State);
		EnterRule(_localctx, 38, RULE_arrassign);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266; intarrdcl();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267; floatarrdcl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 268; arrupdate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixassignContext : ParserRuleContext {
		public IntmatrixdclContext intmatrixdcl() {
			return GetRuleContext<IntmatrixdclContext>(0);
		}
		public FloatmatrixdclContext floatmatrixdcl() {
			return GetRuleContext<FloatmatrixdclContext>(0);
		}
		public MatrixupdateContext matrixupdate() {
			return GetRuleContext<MatrixupdateContext>(0);
		}
		public MatrixassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixassign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixassignContext matrixassign() {
		MatrixassignContext _localctx = new MatrixassignContext(Context, State);
		EnterRule(_localctx, 40, RULE_matrixassign);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271; intmatrixdcl();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272; floatmatrixdcl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 273; matrixupdate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntmatrixdclContext : ParserRuleContext {
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public MatrixarrexprContext matrixarrexpr() {
			return GetRuleContext<MatrixarrexprContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public IntmatrixdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intmatrixdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntmatrixdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntmatrixdclContext intmatrixdcl() {
		IntmatrixdclContext _localctx = new IntmatrixdclContext(Context, State);
		EnterRule(_localctx, 42, RULE_intmatrixdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(T__14);
			State = 277; Match(T__11);
			State = 278; val();
			State = 279; Match(T__13);
			State = 280; val();
			State = 281; Match(T__12);
			State = 282; id();
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 283; Match(T__15);
				State = 286;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 284; matrixarrexpr();
					}
					break;
				case 2:
					{
					State = 285; numexpr(0);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatmatrixdclContext : ParserRuleContext {
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public MatrixarrexprContext matrixarrexpr() {
			return GetRuleContext<MatrixarrexprContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public FloatmatrixdclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatmatrixdcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatmatrixdcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatmatrixdclContext floatmatrixdcl() {
		FloatmatrixdclContext _localctx = new FloatmatrixdclContext(Context, State);
		EnterRule(_localctx, 44, RULE_floatmatrixdcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(T__16);
			State = 291; Match(T__11);
			State = 292; val();
			State = 293; Match(T__13);
			State = 294; val();
			State = 295; Match(T__12);
			State = 296; id();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 297; Match(T__15);
				State = 300;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 298; matrixarrexpr();
					}
					break;
				case 2:
					{
					State = 299; numexpr(0);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixupdateContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public MatrixarrexprContext matrixarrexpr() {
			return GetRuleContext<MatrixarrexprContext>(0);
		}
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public MatrixupdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixupdate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixupdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixupdateContext matrixupdate() {
		MatrixupdateContext _localctx = new MatrixupdateContext(Context, State);
		EnterRule(_localctx, 46, RULE_matrixupdate);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 304; id();
				State = 305; Match(T__15);
				State = 308;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 306; numexpr(0);
					}
					break;
				case 2:
					{
					State = 307; matrixarrexpr();
					}
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310; id();
				State = 311; Match(T__11);
				State = 312; val();
				State = 313; Match(T__13);
				State = 314; val();
				State = 315; Match(T__12);
				State = 316; Match(T__15);
				State = 317; numexpr(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 319; id();
				State = 320; Match(T__11);
				State = 321; val();
				State = 322; Match(T__13);
				State = 323; Match(T__17);
				State = 324; Match(T__12);
				State = 325; Match(T__15);
				State = 326; numexpr(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 328; id();
				State = 329; Match(T__11);
				State = 330; Match(T__17);
				State = 331; Match(T__13);
				State = 332; val();
				State = 333; Match(T__12);
				State = 334; Match(T__15);
				State = 335; numexpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixarrexprContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public MatrixtransposeContext matrixtranspose() {
			return GetRuleContext<MatrixtransposeContext>(0);
		}
		public MatrixinverseContext matrixinverse() {
			return GetRuleContext<MatrixinverseContext>(0);
		}
		public MatrixarrexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixarrexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixarrexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixarrexprContext matrixarrexpr() {
		MatrixarrexprContext _localctx = new MatrixarrexprContext(Context, State);
		EnterRule(_localctx, 48, RULE_matrixarrexpr);
		try {
			State = 358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 339; id();
				State = 340; Match(T__18);
				State = 341; id();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; matrixtranspose();
				State = 344; Match(T__4);
				State = 345; id();
				State = 346; Match(T__5);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 3);
				{
				State = 348; matrixinverse();
				State = 349; Match(T__4);
				State = 350; id();
				State = 351; Match(T__5);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 4);
				{
				State = 353; Match(T__19);
				State = 354; Match(T__4);
				State = 355; id();
				State = 356; Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrexprContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ArrexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrexprContext arrexpr() {
		ArrexprContext _localctx = new ArrexprContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(T__20);
			State = 361; Match(T__4);
			State = 362; id();
			State = 363; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixtransposeContext : ParserRuleContext {
		public MatrixtransposeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixtranspose; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixtranspose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixtransposeContext matrixtranspose() {
		MatrixtransposeContext _localctx = new MatrixtransposeContext(Context, State);
		EnterRule(_localctx, 52, RULE_matrixtranspose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatrixinverseContext : ParserRuleContext {
		public MatrixinverseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matrixinverse; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixinverse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatrixinverseContext matrixinverse() {
		MatrixinverseContext _localctx = new MatrixinverseContext(Context, State);
		EnterRule(_localctx, 54, RULE_matrixinverse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(T__22);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumassignContext : ParserRuleContext {
		public IntdclContext intdcl() {
			return GetRuleContext<IntdclContext>(0);
		}
		public FloatdclContext floatdcl() {
			return GetRuleContext<FloatdclContext>(0);
		}
		public NumupdateContext numupdate() {
			return GetRuleContext<NumupdateContext>(0);
		}
		public NumassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numassign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumassignContext numassign() {
		NumassignContext _localctx = new NumassignContext(Context, State);
		EnterRule(_localctx, 56, RULE_numassign);
		try {
			State = 372;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369; intdcl();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 370; floatdcl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 371; numupdate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumupdateContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public NumupdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numupdate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumupdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumupdateContext numupdate() {
		NumupdateContext _localctx = new NumupdateContext(Context, State);
		EnterRule(_localctx, 58, RULE_numupdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; id();
			State = 375; Match(T__15);
			State = 376; numexpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolassignContext : ParserRuleContext {
		public BooldclContext booldcl() {
			return GetRuleContext<BooldclContext>(0);
		}
		public BoolupdateContext boolupdate() {
			return GetRuleContext<BoolupdateContext>(0);
		}
		public BoolassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolassign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolassignContext boolassign() {
		BoolassignContext _localctx = new BoolassignContext(Context, State);
		EnterRule(_localctx, 60, RULE_boolassign);
		try {
			State = 380;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 378; booldcl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 379; boolupdate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolupdateContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BoolvalContext boolval() {
			return GetRuleContext<BoolvalContext>(0);
		}
		public BoolupdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolupdate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolupdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolupdateContext boolupdate() {
		BoolupdateContext _localctx = new BoolupdateContext(Context, State);
		EnterRule(_localctx, 62, RULE_boolupdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; id();
			State = 383; Match(T__15);
			State = 386;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__31:
			case T__34:
			case T__37:
			case T__40:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 384; bexpr(0);
				}
				break;
			case T__24:
			case T__25:
				{
				State = 385; boolval();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooldclContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BoolvalContext boolval() {
			return GetRuleContext<BoolvalContext>(0);
		}
		public BooldclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booldcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooldcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooldclContext booldcl() {
		BooldclContext _localctx = new BooldclContext(Context, State);
		EnterRule(_localctx, 64, RULE_booldcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(T__23);
			State = 389; id();
			State = 390; Match(T__15);
			State = 393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__31:
			case T__34:
			case T__37:
			case T__40:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 391; bexpr(0);
				}
				break;
			case T__24:
			case T__25:
				{
				State = 392; boolval();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolvalContext : ParserRuleContext {
		public BoolvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolval; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolvalContext boolval() {
		BoolvalContext _localctx = new BoolvalContext(Context, State);
		EnterRule(_localctx, 66, RULE_boolval);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			_la = TokenStream.LA(1);
			if ( !(_la==T__24 || _la==T__25) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectiveContext : ParserRuleContext {
		public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		public ElifstmtContext[] elifstmt() {
			return GetRuleContexts<ElifstmtContext>();
		}
		public ElifstmtContext elifstmt(int i) {
			return GetRuleContext<ElifstmtContext>(i);
		}
		public ElsestmtContext elsestmt() {
			return GetRuleContext<ElsestmtContext>(0);
		}
		public SelectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selective; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectiveContext selective() {
		SelectiveContext _localctx = new SelectiveContext(Context, State);
		EnterRule(_localctx, 68, RULE_selective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; ifstmt();
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__27) {
				{
				{
				State = 398; elifstmt();
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28) {
				{
				State = 404; elsestmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_ifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(T__26);
			State = 408; Match(T__4);
			State = 409; bexpr(0);
			State = 410; Match(T__5);
			State = 411; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifstmtContext : ParserRuleContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElifstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifstmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifstmtContext elifstmt() {
		ElifstmtContext _localctx = new ElifstmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_elifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; Match(T__27);
			State = 414; Match(T__4);
			State = 415; bexpr(0);
			State = 416; Match(T__5);
			State = 417; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsestmtContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElsestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsestmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsestmtContext elsestmt() {
		ElsestmtContext _localctx = new ElsestmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_elsestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(T__28);
			State = 420; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterativeContext : ParserRuleContext {
		public ForstmtContext forstmt() {
			return GetRuleContext<ForstmtContext>(0);
		}
		public WhilestmtContext whilestmt() {
			return GetRuleContext<WhilestmtContext>(0);
		}
		public IterativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterative; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterativeContext iterative() {
		IterativeContext _localctx = new IterativeContext(Context, State);
		EnterRule(_localctx, 76, RULE_iterative);
		try {
			State = 424;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__29:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422; forstmt();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423; whilestmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstmtContext : ParserRuleContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public UnaryoperatorContext unaryoperator() {
			return GetRuleContext<UnaryoperatorContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IntdclContext intdcl() {
			return GetRuleContext<IntdclContext>(0);
		}
		public ForstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstmtContext forstmt() {
		ForstmtContext _localctx = new ForstmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_forstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(T__29);
			State = 427; Match(T__4);
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 428; intdcl();
				}
			}

			State = 431; Match(T__2);
			State = 432; bexpr(0);
			State = 433; Match(T__2);
			State = 434; unaryoperator();
			State = 435; Match(T__5);
			State = 436; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestmtContext : ParserRuleContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhilestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilestmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestmtContext whilestmt() {
		WhilestmtContext _localctx = new WhilestmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_whilestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; Match(T__30);
			State = 439; Match(T__4);
			State = 440; bexpr(0);
			State = 441; Match(T__5);
			State = 442; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomContext : ParserRuleContext {
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public RandomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_random; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomContext random() {
		RandomContext _localctx = new RandomContext(Context, State);
		EnterRule(_localctx, 82, RULE_random);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; Match(T__31);
			State = 445; Match(T__4);
			State = 446; val();
			State = 447; Match(T__13);
			State = 448; val();
			State = 449; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumexprContext : ParserRuleContext {
		public NumexprContext[] numexpr() {
			return GetRuleContexts<NumexprContext>();
		}
		public NumexprContext numexpr(int i) {
			return GetRuleContext<NumexprContext>(i);
		}
		public SqrtContext sqrt() {
			return GetRuleContext<SqrtContext>(0);
		}
		public RandomContext random() {
			return GetRuleContext<RandomContext>(0);
		}
		public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		public NumexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumexprContext numexpr() {
		return numexpr(0);
	}

	private NumexprContext numexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NumexprContext _localctx = new NumexprContext(Context, _parentState);
		NumexprContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_numexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				State = 452; Match(T__4);
				State = 453; numexpr(0);
				State = 454; Match(T__5);
				}
				break;
			case T__40:
				{
				State = 456; sqrt();
				State = 457; numexpr(6);
				}
				break;
			case T__31:
				{
				State = 459; random();
				}
				break;
			case T__34:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 460; val();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 478;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 476;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new NumexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numexpr);
						State = 463;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 466;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case T__42:
							{
							State = 464; mod();
							}
							break;
						case T__41:
							{
							State = 465; power();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 468; numexpr(6);
						}
						break;
					case 2:
						{
						_localctx = new NumexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numexpr);
						State = 470;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 471;
						_la = TokenStream.LA(1);
						if ( !(_la==T__17 || _la==T__32) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 472; numexpr(5);
						}
						break;
					case 3:
						{
						_localctx = new NumexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_numexpr);
						State = 473;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 474;
						_la = TokenStream.LA(1);
						if ( !(_la==T__33 || _la==T__34) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 475; numexpr(4);
						}
						break;
					}
					} 
				}
				State = 480;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BexprContext : ParserRuleContext {
		public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		public NumexprContext numexpr() {
			return GetRuleContext<NumexprContext>(0);
		}
		public BexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BexprContext bexpr() {
		return bexpr(0);
	}

	private BexprContext bexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BexprContext _localctx = new BexprContext(Context, _parentState);
		BexprContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_bexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 482; Match(T__37);
				State = 483; Match(T__4);
				State = 484; bexpr(0);
				State = 485; Match(T__5);
				}
				break;
			case 2:
				{
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__37) {
					{
					State = 487; Match(T__37);
					}
				}

				State = 490; numexpr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 508;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 506;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
					case 1:
						{
						_localctx = new BexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 493;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 494;
						_la = TokenStream.LA(1);
						if ( !(_la==T__35 || _la==T__36) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 496;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__15) {
							{
							State = 495; Match(T__15);
							}
						}

						State = 498; bexpr(6);
						}
						break;
					case 2:
						{
						_localctx = new BexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 499;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 500;
						_la = TokenStream.LA(1);
						if ( !(_la==T__15 || _la==T__37) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 501; Match(T__15);
						State = 502; bexpr(5);
						}
						break;
					case 3:
						{
						_localctx = new BexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 503;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 504;
						_la = TokenStream.LA(1);
						if ( !(_la==T__38 || _la==T__39) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 505; bexpr(4);
						}
						break;
					}
					} 
				}
				State = 510;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SqrtContext : ParserRuleContext {
		public SqrtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqrt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqrtContext sqrt() {
		SqrtContext _localctx = new SqrtContext(Context, State);
		EnterRule(_localctx, 88, RULE_sqrt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511; Match(T__40);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 90, RULE_power);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(T__41);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 92, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515; Match(T__42);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryoperatorContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public UnaryoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryoperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryoperatorContext unaryoperator() {
		UnaryoperatorContext _localctx = new UnaryoperatorContext(Context, State);
		EnterRule(_localctx, 94, RULE_unaryoperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 517; id();
				State = 518; Match(T__43);
				}
				break;
			case 2:
				{
				State = 520; id();
				State = 521; Match(T__44);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		public GradfunccallContext gradfunccall() {
			return GetRuleContext<GradfunccallContext>(0);
		}
		public ValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValContext val() {
		ValContext _localctx = new ValContext(Context, State);
		EnterRule(_localctx, 96, RULE_val);
		int _la;
		try {
			State = 553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 525; id();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__34) {
					{
					State = 526; Match(T__34);
					}
				}

				State = 529; num();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 530; id();
				State = 531; Match(T__11);
				State = 532; val();
				State = 533; Match(T__12);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 535; id();
				State = 536; Match(T__11);
				State = 537; val();
				State = 538; Match(T__13);
				State = 539; val();
				State = 540; Match(T__12);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 542; id();
				State = 543; Match(T__45);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 545; id();
				State = 546; Match(T__46);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 548; id();
				State = 549; Match(T__47);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 551; funccall();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 552; gradfunccall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 98, RULE_funccall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555; id();
			State = 556; Match(T__4);
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 557; id();
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__13) {
					{
					{
					State = 558; Match(T__13);
					State = 559; id();
					}
					}
					State = 564;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 567; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GradfunccallContext : ParserRuleContext {
		public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public GradfunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gradfunccall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGradfunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GradfunccallContext gradfunccall() {
		GradfunccallContext _localctx = new GradfunccallContext(Context, State);
		EnterRule(_localctx, 100, RULE_gradfunccall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; id();
			State = 570; Match(T__4);
			State = 579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 571; id();
				State = 576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__13) {
					{
					{
					State = 572; Match(T__13);
					State = 573; id();
					}
					}
					State = 578;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 581; Match(T__5);
			State = 582; Match(T__48);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(EmotionalDamageParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 102, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public ITerminalNode Fnum() { return GetToken(EmotionalDamageParser.Fnum, 0); }
		public ITerminalNode Dnum() { return GetToken(EmotionalDamageParser.Dnum, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 104, RULE_num);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Inum) | (1L << Fnum) | (1L << Dnum))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumtypesContext : ParserRuleContext {
		public NumtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numtypes; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumtypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumtypesContext numtypes() {
		NumtypesContext _localctx = new NumtypesContext(Context, State);
		EnterRule(_localctx, 106, RULE_numtypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			_la = TokenStream.LA(1);
			if ( !(_la==T__14 || _la==T__16) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 42: return numexpr_sempred((NumexprContext)_localctx, predIndex);
		case 43: return bexpr_sempred((BexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool numexpr_sempred(NumexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool bexpr_sempred(BexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\x251', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 't', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x84', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x8C', '\n', '\x5', '\x5', '\x5', '\x8E', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x94', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x9C', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xA7', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xB1', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xC5', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\xCA', '\n', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xD0', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\xE4', '\n', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xEA', '\n', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xF3', '\n', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xFC', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x102', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x10B', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x110', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x115', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x121', '\n', '\x17', '\x5', '\x17', 
		'\x123', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x12F', '\n', '\x18', '\x5', '\x18', 
		'\x131', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x137', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\x154', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x169', '\n', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x177', '\n', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x17F', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', 
		'!', '\x185', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x18C', '\n', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '$', '\x3', '$', '\a', '$', '\x192', '\n', '$', '\f', '$', 
		'\xE', '$', '\x195', '\v', '$', '\x3', '$', '\x5', '$', '\x198', '\n', 
		'$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x5', 
		'(', '\x1AB', '\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', 
		'\x1B0', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x5', ',', '\x1D0', '\n', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x5', ',', '\x1D5', '\n', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', 
		',', '\x1DF', '\n', ',', '\f', ',', '\xE', ',', '\x1E2', '\v', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x5', '-', '\x1EB', '\n', '-', '\x3', '-', '\x5', '-', '\x1EE', 
		'\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x1F3', '\n', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\a', '-', '\x1FD', '\n', '-', '\f', '-', 
		'\xE', '-', '\x200', '\v', '-', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x20E', 
		'\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x212', '\n', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', 
		'\x32', '\x22C', '\n', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\a', '\x33', '\x233', '\n', '\x33', '\f', 
		'\x33', '\xE', '\x33', '\x236', '\v', '\x33', '\x5', '\x33', '\x238', 
		'\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x241', '\n', 
		'\x34', '\f', '\x34', '\xE', '\x34', '\x244', '\v', '\x34', '\x5', '\x34', 
		'\x246', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x2', '\x4', 'V', 'X', '\x38', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', '\x2', '\n', '\x3', '\x2', '\x1B', '\x1C', '\x4', 
		'\x2', '\x14', '\x14', '#', '#', '\x3', '\x2', '$', '%', '\x3', '\x2', 
		'&', '\'', '\x4', '\x2', '\x12', '\x12', '(', '(', '\x3', '\x2', ')', 
		'*', '\x3', '\x2', '\x35', '\x37', '\x4', '\x2', '\x11', '\x11', '\x13', 
		'\x13', '\x2', '\x26D', '\x2', 'n', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x6', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x8D', '\x3', '\x2', '\x2', '\x2', '\n', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x97', '\x3', '\x2', '\x2', '\x2', '\xE', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x18', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xE5', '\x3', '\x2', '\x2', '\x2', '\"', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xF4', '\x3', '\x2', '\x2', '\x2', '&', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x114', '\x3', '\x2', '\x2', '\x2', ',', '\x116', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x124', '\x3', '\x2', '\x2', '\x2', '\x30', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x36', '\x16F', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x171', '\x3', '\x2', '\x2', '\x2', ':', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x17E', '\x3', '\x2', '\x2', '\x2', '@', '\x180', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x186', '\x3', '\x2', '\x2', '\x2', '\x44', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x199', '\x3', '\x2', '\x2', '\x2', 'J', '\x19F', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x1A5', '\x3', '\x2', '\x2', '\x2', 'N', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1AC', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1B8', '\x3', '\x2', '\x2', '\x2', 'T', '\x1BE', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x1CF', '\x3', '\x2', '\x2', '\x2', 'X', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x201', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x203', '\x3', '\x2', '\x2', '\x2', '^', '\x205', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x62', '\x22B', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x22D', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x23B', '\x3', '\x2', '\x2', '\x2', 'h', '\x24A', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x24C', '\x3', '\x2', '\x2', '\x2', 'l', '\x24E', 
		'\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x5', '\x4', '\x3', '\x2', 'o', 
		'p', '\a', '\x2', '\x2', '\x3', 'p', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'q', 's', '\x5', '\b', '\x5', '\x2', 'r', 't', '\x5', '\x4', '\x3', '\x2', 
		's', 'r', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', '\x5', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\x3', '\x2', 
		'\x2', 'v', 'w', '\x5', '\x4', '\x3', '\x2', 'w', 'x', '\a', '\x4', '\x2', 
		'\x2', 'x', '\a', '\x3', '\x2', '\x2', '\x2', 'y', '\x84', '\x5', '*', 
		'\x16', '\x2', 'z', '\x84', '\x5', ':', '\x1E', '\x2', '{', '\x84', '\x5', 
		'>', ' ', '\x2', '|', '\x84', '\x5', '(', '\x15', '\x2', '}', '\x84', 
		'\x5', '`', '\x31', '\x2', '~', '\x84', '\x5', '\n', '\x6', '\x2', '\x7F', 
		'\x84', '\x5', '\f', '\a', '\x2', '\x80', '\x84', '\x5', '\x64', '\x33', 
		'\x2', '\x81', '\x84', '\x5', '\x66', '\x34', '\x2', '\x82', '\x84', '\x5', 
		'\xE', '\b', '\x2', '\x83', 'y', '\x3', '\x2', '\x2', '\x2', '\x83', 'z', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '{', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x83', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '~', '\x3', '\x2', '\x2', '\x2', '\x83', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', '\x5', 
		'\x2', '\x2', '\x86', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8C', 
		'\x5', 'N', '(', '\x2', '\x88', '\x8C', '\x5', '\x46', '$', '\x2', '\x89', 
		'\x8C', '\x5', '\x10', '\t', '\x2', '\x8A', '\x8C', '\x5', '\x12', '\n', 
		'\x2', '\x8B', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x83', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\t', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\a', '\x6', '\x2', '\x2', '\x90', '\x93', '\a', '\a', '\x2', 
		'\x2', '\x91', '\x94', '\a', '\x34', '\x2', '\x2', '\x92', '\x94', '\x5', 
		'X', '-', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x96', '\a', '\b', '\x2', '\x2', '\x96', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x98', '\a', '\t', '\x2', '\x2', '\x98', '\x9B', 
		'\a', '\a', '\x2', '\x2', '\x99', '\x9C', '\a', '\x34', '\x2', '\x2', 
		'\x9A', '\x9C', '\x5', 'X', '-', '\x2', '\x9B', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\b', '\x2', '\x2', 
		'\x9E', '\r', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '\n', 
		'\x2', '\x2', '\xA0', '\xA1', '\x5', '\x62', '\x32', '\x2', '\xA1', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x5', '\x14', '\v', '\x2', 
		'\xA3', '\xA4', '\x5', 'h', '\x35', '\x2', '\xA4', '\xA6', '\a', '\a', 
		'\x2', '\x2', '\xA5', '\xA7', '\x5', '\x16', '\f', '\x2', '\xA6', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\a', '\b', 
		'\x2', '\x2', '\xA9', '\xAA', '\x5', '\x6', '\x4', '\x2', '\xAA', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', '\v', '\x2', '\x2', 
		'\xAC', '\xAD', '\x5', '\x14', '\v', '\x2', '\xAD', '\xAE', '\x5', 'h', 
		'\x35', '\x2', '\xAE', '\xB0', '\a', '\a', '\x2', '\x2', '\xAF', '\xB1', 
		'\x5', '\x16', '\f', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB3', '\a', '\b', '\x2', '\x2', '\xB3', '\xB4', 
		'\x5', '\x6', '\x4', '\x2', '\xB4', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xC5', '\x5', 'l', '\x37', '\x2', '\xB6', '\xC5', '\a', '\f', 
		'\x2', '\x2', '\xB7', '\xC5', '\a', '\r', '\x2', '\x2', '\xB8', '\xB9', 
		'\x5', 'l', '\x37', '\x2', '\xB9', '\xBA', '\a', '\xE', '\x2', '\x2', 
		'\xBA', '\xBB', '\x5', '\x62', '\x32', '\x2', '\xBB', '\xBC', '\a', '\xF', 
		'\x2', '\x2', '\xBC', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', 
		'\x5', 'l', '\x37', '\x2', '\xBE', '\xBF', '\a', '\xE', '\x2', '\x2', 
		'\xBF', '\xC0', '\x5', '\x62', '\x32', '\x2', '\xC0', '\xC1', '\a', '\x10', 
		'\x2', '\x2', '\xC1', '\xC2', '\x5', '\x62', '\x32', '\x2', '\xC2', '\xC3', 
		'\a', '\xF', '\x2', '\x2', '\xC3', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\x15', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC9', '\x5', '\x18', 
		'\r', '\x2', '\xC7', '\xC8', '\a', '\x10', '\x2', '\x2', '\xC8', '\xCA', 
		'\x5', '\x16', '\f', '\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xD0', '\x5', 'l', '\x37', '\x2', '\xCC', '\xD0', 
		'\a', '\f', '\x2', '\x2', '\xCD', '\xD0', '\x5', '\x1A', '\xE', '\x2', 
		'\xCE', '\xD0', '\x5', '\x1C', '\xF', '\x2', '\xCF', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x5', 'h', 
		'\x35', '\x2', '\xD2', '\x19', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', 
		'\x5', 'l', '\x37', '\x2', '\xD4', '\xD5', '\a', '\xE', '\x2', '\x2', 
		'\xD5', '\xD6', '\x5', '\x62', '\x32', '\x2', '\xD6', '\xD7', '\a', '\x10', 
		'\x2', '\x2', '\xD7', '\xD8', '\x5', '\x62', '\x32', '\x2', '\xD8', '\xD9', 
		'\a', '\xF', '\x2', '\x2', '\xD9', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDB', '\x5', 'l', '\x37', '\x2', '\xDB', '\xDC', '\a', '\xE', 
		'\x2', '\x2', '\xDC', '\xDD', '\x5', '\x62', '\x32', '\x2', '\xDD', '\xDE', 
		'\a', '\xF', '\x2', '\x2', '\xDE', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xE0', '\a', '\x11', '\x2', '\x2', '\xE0', '\xE3', '\x5', 'h', 
		'\x35', '\x2', '\xE1', '\xE2', '\a', '\x12', '\x2', '\x2', '\xE2', '\xE4', 
		'\x5', 'V', ',', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\a', '\x13', '\x2', '\x2', '\xE6', '\xE9', '\x5', 
		'h', '\x35', '\x2', '\xE7', '\xE8', '\a', '\x12', '\x2', '\x2', '\xE8', 
		'\xEA', '\x5', 'V', ',', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEC', '\a', '\x11', '\x2', '\x2', '\xEC', '\xED', 
		'\a', '\xE', '\x2', '\x2', '\xED', '\xEE', '\x5', '\x62', '\x32', '\x2', 
		'\xEE', '\xEF', '\a', '\xF', '\x2', '\x2', '\xEF', '\xF2', '\x5', 'h', 
		'\x35', '\x2', '\xF0', '\xF1', '\a', '\x12', '\x2', '\x2', '\xF1', '\xF3', 
		'\x5', '\x62', '\x32', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xF5', '\a', '\x13', '\x2', '\x2', '\xF5', '\xF6', 
		'\a', '\xE', '\x2', '\x2', '\xF6', '\xF7', '\x5', '\x62', '\x32', '\x2', 
		'\xF7', '\xF8', '\a', '\xF', '\x2', '\x2', '\xF8', '\xFB', '\x5', 'h', 
		'\x35', '\x2', '\xF9', '\xFA', '\a', '\x12', '\x2', '\x2', '\xFA', '\xFC', 
		'\x5', '\x62', '\x32', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\xFE', '\x5', 'h', '\x35', '\x2', '\xFE', '\x101', 
		'\a', '\x12', '\x2', '\x2', '\xFF', '\x102', '\x5', 'V', ',', '\x2', '\x100', 
		'\x102', '\x5', '\x34', '\x1B', '\x2', '\x101', '\xFF', '\x3', '\x2', 
		'\x2', '\x2', '\x101', '\x100', '\x3', '\x2', '\x2', '\x2', '\x102', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x5', 'h', '\x35', '\x2', 
		'\x104', '\x105', '\a', '\xE', '\x2', '\x2', '\x105', '\x106', '\x5', 
		'\x62', '\x32', '\x2', '\x106', '\x107', '\a', '\xF', '\x2', '\x2', '\x107', 
		'\x108', '\a', '\x12', '\x2', '\x2', '\x108', '\x109', '\x5', 'V', ',', 
		'\x2', '\x109', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10A', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\'', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x110', '\x5', '\"', 
		'\x12', '\x2', '\x10D', '\x110', '\x5', '$', '\x13', '\x2', '\x10E', '\x110', 
		'\x5', '&', '\x14', '\x2', '\x10F', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x110', ')', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x115', '\x5', ',', '\x17', '\x2', '\x112', '\x115', '\x5', '.', '\x18', 
		'\x2', '\x113', '\x115', '\x5', '\x30', '\x19', '\x2', '\x114', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x116', '\x117', '\a', '\x11', '\x2', '\x2', '\x117', '\x118', 
		'\a', '\xE', '\x2', '\x2', '\x118', '\x119', '\x5', '\x62', '\x32', '\x2', 
		'\x119', '\x11A', '\a', '\x10', '\x2', '\x2', '\x11A', '\x11B', '\x5', 
		'\x62', '\x32', '\x2', '\x11B', '\x11C', '\a', '\xF', '\x2', '\x2', '\x11C', 
		'\x122', '\x5', 'h', '\x35', '\x2', '\x11D', '\x120', '\a', '\x12', '\x2', 
		'\x2', '\x11E', '\x121', '\x5', '\x32', '\x1A', '\x2', '\x11F', '\x121', 
		'\x5', 'V', ',', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x121', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x123', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x124', '\x125', '\a', '\x13', '\x2', '\x2', '\x125', '\x126', 
		'\a', '\xE', '\x2', '\x2', '\x126', '\x127', '\x5', '\x62', '\x32', '\x2', 
		'\x127', '\x128', '\a', '\x10', '\x2', '\x2', '\x128', '\x129', '\x5', 
		'\x62', '\x32', '\x2', '\x129', '\x12A', '\a', '\xF', '\x2', '\x2', '\x12A', 
		'\x130', '\x5', 'h', '\x35', '\x2', '\x12B', '\x12E', '\a', '\x12', '\x2', 
		'\x2', '\x12C', '\x12F', '\x5', '\x32', '\x1A', '\x2', '\x12D', '\x12F', 
		'\x5', 'V', ',', '\x2', '\x12E', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x131', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x133', '\x5', 'h', '\x35', '\x2', '\x133', '\x136', 
		'\a', '\x12', '\x2', '\x2', '\x134', '\x137', '\x5', 'V', ',', '\x2', 
		'\x135', '\x137', '\x5', '\x32', '\x1A', '\x2', '\x136', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x135', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x5', 'h', '\x35', 
		'\x2', '\x139', '\x13A', '\a', '\xE', '\x2', '\x2', '\x13A', '\x13B', 
		'\x5', '\x62', '\x32', '\x2', '\x13B', '\x13C', '\a', '\x10', '\x2', '\x2', 
		'\x13C', '\x13D', '\x5', '\x62', '\x32', '\x2', '\x13D', '\x13E', '\a', 
		'\xF', '\x2', '\x2', '\x13E', '\x13F', '\a', '\x12', '\x2', '\x2', '\x13F', 
		'\x140', '\x5', 'V', ',', '\x2', '\x140', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x142', '\x5', 'h', '\x35', '\x2', '\x142', '\x143', 
		'\a', '\xE', '\x2', '\x2', '\x143', '\x144', '\x5', '\x62', '\x32', '\x2', 
		'\x144', '\x145', '\a', '\x10', '\x2', '\x2', '\x145', '\x146', '\a', 
		'\x14', '\x2', '\x2', '\x146', '\x147', '\a', '\xF', '\x2', '\x2', '\x147', 
		'\x148', '\a', '\x12', '\x2', '\x2', '\x148', '\x149', '\x5', 'V', ',', 
		'\x2', '\x149', '\x154', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', 
		'\x5', 'h', '\x35', '\x2', '\x14B', '\x14C', '\a', '\xE', '\x2', '\x2', 
		'\x14C', '\x14D', '\a', '\x14', '\x2', '\x2', '\x14D', '\x14E', '\a', 
		'\x10', '\x2', '\x2', '\x14E', '\x14F', '\x5', '\x62', '\x32', '\x2', 
		'\x14F', '\x150', '\a', '\xF', '\x2', '\x2', '\x150', '\x151', '\a', '\x12', 
		'\x2', '\x2', '\x151', '\x152', '\x5', 'V', ',', '\x2', '\x152', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x153', '\x138', '\x3', '\x2', '\x2', '\x2', '\x153', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x153', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x5', 'h', '\x35', 
		'\x2', '\x156', '\x157', '\a', '\x15', '\x2', '\x2', '\x157', '\x158', 
		'\x5', 'h', '\x35', '\x2', '\x158', '\x169', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x15A', '\x5', '\x36', '\x1C', '\x2', '\x15A', '\x15B', '\a', 
		'\a', '\x2', '\x2', '\x15B', '\x15C', '\x5', 'h', '\x35', '\x2', '\x15C', 
		'\x15D', '\a', '\b', '\x2', '\x2', '\x15D', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x15F', '\x5', '\x38', '\x1D', '\x2', '\x15F', '\x160', 
		'\a', '\a', '\x2', '\x2', '\x160', '\x161', '\x5', 'h', '\x35', '\x2', 
		'\x161', '\x162', '\a', '\b', '\x2', '\x2', '\x162', '\x169', '\x3', '\x2', 
		'\x2', '\x2', '\x163', '\x164', '\a', '\x16', '\x2', '\x2', '\x164', '\x165', 
		'\a', '\a', '\x2', '\x2', '\x165', '\x166', '\x5', 'h', '\x35', '\x2', 
		'\x166', '\x167', '\a', '\b', '\x2', '\x2', '\x167', '\x169', '\x3', '\x2', 
		'\x2', '\x2', '\x168', '\x155', '\x3', '\x2', '\x2', '\x2', '\x168', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x163', '\x3', '\x2', '\x2', '\x2', '\x169', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x16B', '\a', '\x17', '\x2', '\x2', '\x16B', 
		'\x16C', '\a', '\a', '\x2', '\x2', '\x16C', '\x16D', '\x5', 'h', '\x35', 
		'\x2', '\x16D', '\x16E', '\a', '\b', '\x2', '\x2', '\x16E', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x16F', '\x170', '\a', '\x18', '\x2', '\x2', '\x170', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\a', '\x19', '\x2', 
		'\x2', '\x172', '\x39', '\x3', '\x2', '\x2', '\x2', '\x173', '\x177', 
		'\x5', '\x1E', '\x10', '\x2', '\x174', '\x177', '\x5', ' ', '\x11', '\x2', 
		'\x175', '\x177', '\x5', '<', '\x1F', '\x2', '\x176', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x174', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x175', '\x3', '\x2', '\x2', '\x2', '\x177', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '\x179', '\x5', 'h', '\x35', '\x2', '\x179', '\x17A', 
		'\a', '\x12', '\x2', '\x2', '\x17A', '\x17B', '\x5', 'V', ',', '\x2', 
		'\x17B', '=', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17F', '\x5', '\x42', 
		'\"', '\x2', '\x17D', '\x17F', '\x5', '@', '!', '\x2', '\x17E', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '?', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\x5', 'h', 
		'\x35', '\x2', '\x181', '\x184', '\a', '\x12', '\x2', '\x2', '\x182', 
		'\x185', '\x5', 'X', '-', '\x2', '\x183', '\x185', '\x5', '\x44', '#', 
		'\x2', '\x184', '\x182', '\x3', '\x2', '\x2', '\x2', '\x184', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x187', '\a', '\x1A', '\x2', '\x2', '\x187', '\x188', '\x5', 
		'h', '\x35', '\x2', '\x188', '\x18B', '\a', '\x12', '\x2', '\x2', '\x189', 
		'\x18C', '\x5', 'X', '-', '\x2', '\x18A', '\x18C', '\x5', '\x44', '#', 
		'\x2', '\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x18D', '\x18E', '\t', '\x2', '\x2', '\x2', '\x18E', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x18F', '\x193', '\x5', 'H', '%', '\x2', '\x190', '\x192', 
		'\x5', 'J', '&', '\x2', '\x191', '\x190', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x195', '\x3', '\x2', '\x2', '\x2', '\x193', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x194', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x195', '\x193', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x198', '\x5', 'L', '\'', '\x2', '\x197', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x197', '\x198', '\x3', '\x2', '\x2', '\x2', '\x198', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\a', '\x1D', '\x2', 
		'\x2', '\x19A', '\x19B', '\a', '\a', '\x2', '\x2', '\x19B', '\x19C', '\x5', 
		'X', '-', '\x2', '\x19C', '\x19D', '\a', '\b', '\x2', '\x2', '\x19D', 
		'\x19E', '\x5', '\x6', '\x4', '\x2', '\x19E', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x1A0', '\a', '\x1E', '\x2', '\x2', '\x1A0', '\x1A1', 
		'\a', '\a', '\x2', '\x2', '\x1A1', '\x1A2', '\x5', 'X', '-', '\x2', '\x1A2', 
		'\x1A3', '\a', '\b', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', '\x6', '\x4', 
		'\x2', '\x1A4', 'K', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\a', 
		'\x1F', '\x2', '\x2', '\x1A6', '\x1A7', '\x5', '\x6', '\x4', '\x2', '\x1A7', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AB', '\x5', 'P', ')', '\x2', 
		'\x1A9', '\x1AB', '\x5', 'R', '*', '\x2', '\x1AA', '\x1A8', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AB', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\a', ' ', '\x2', '\x2', 
		'\x1AD', '\x1AF', '\a', '\a', '\x2', '\x2', '\x1AE', '\x1B0', '\x5', '\x1E', 
		'\x10', '\x2', '\x1AF', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1B2', '\a', '\x5', '\x2', '\x2', '\x1B2', '\x1B3', 
		'\x5', 'X', '-', '\x2', '\x1B3', '\x1B4', '\a', '\x5', '\x2', '\x2', '\x1B4', 
		'\x1B5', '\x5', '`', '\x31', '\x2', '\x1B5', '\x1B6', '\a', '\b', '\x2', 
		'\x2', '\x1B6', '\x1B7', '\x5', '\x6', '\x4', '\x2', '\x1B7', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\a', '!', '\x2', '\x2', '\x1B9', 
		'\x1BA', '\a', '\a', '\x2', '\x2', '\x1BA', '\x1BB', '\x5', 'X', '-', 
		'\x2', '\x1BB', '\x1BC', '\a', '\b', '\x2', '\x2', '\x1BC', '\x1BD', '\x5', 
		'\x6', '\x4', '\x2', '\x1BD', 'S', '\x3', '\x2', '\x2', '\x2', '\x1BE', 
		'\x1BF', '\a', '\"', '\x2', '\x2', '\x1BF', '\x1C0', '\a', '\a', '\x2', 
		'\x2', '\x1C0', '\x1C1', '\x5', '\x62', '\x32', '\x2', '\x1C1', '\x1C2', 
		'\a', '\x10', '\x2', '\x2', '\x1C2', '\x1C3', '\x5', '\x62', '\x32', '\x2', 
		'\x1C3', '\x1C4', '\a', '\b', '\x2', '\x2', '\x1C4', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x1C5', '\x1C6', '\b', ',', '\x1', '\x2', '\x1C6', '\x1C7', 
		'\a', '\a', '\x2', '\x2', '\x1C7', '\x1C8', '\x5', 'V', ',', '\x2', '\x1C8', 
		'\x1C9', '\a', '\b', '\x2', '\x2', '\x1C9', '\x1D0', '\x3', '\x2', '\x2', 
		'\x2', '\x1CA', '\x1CB', '\x5', 'Z', '.', '\x2', '\x1CB', '\x1CC', '\x5', 
		'V', ',', '\b', '\x1CC', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CD', 
		'\x1D0', '\x5', 'T', '+', '\x2', '\x1CE', '\x1D0', '\x5', '\x62', '\x32', 
		'\x2', '\x1CF', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1CA', 
		'\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1CD', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1E0', '\x3', 
		'\x2', '\x2', '\x2', '\x1D1', '\x1D4', '\f', '\a', '\x2', '\x2', '\x1D2', 
		'\x1D5', '\x5', '^', '\x30', '\x2', '\x1D3', '\x1D5', '\x5', '\\', '/', 
		'\x2', '\x1D4', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x1D7', '\x5', 'V', ',', '\b', '\x1D7', '\x1DF', '\x3', '\x2', 
		'\x2', '\x2', '\x1D8', '\x1D9', '\f', '\x6', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\t', '\x3', '\x2', '\x2', '\x1DA', '\x1DF', '\x5', 'V', ',', '\a', '\x1DB', 
		'\x1DC', '\f', '\x5', '\x2', '\x2', '\x1DC', '\x1DD', '\t', '\x4', '\x2', 
		'\x2', '\x1DD', '\x1DF', '\x5', 'V', ',', '\x6', '\x1DE', '\x1D1', '\x3', 
		'\x2', '\x2', '\x2', '\x1DE', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DE', 
		'\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E2', '\x3', '\x2', '\x2', 
		'\x2', '\x1E0', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', 
		'\x3', '\x2', '\x2', '\x2', '\x1E1', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\b', 
		'-', '\x1', '\x2', '\x1E4', '\x1E5', '\a', '(', '\x2', '\x2', '\x1E5', 
		'\x1E6', '\a', '\a', '\x2', '\x2', '\x1E6', '\x1E7', '\x5', 'X', '-', 
		'\x2', '\x1E7', '\x1E8', '\a', '\b', '\x2', '\x2', '\x1E8', '\x1EE', '\x3', 
		'\x2', '\x2', '\x2', '\x1E9', '\x1EB', '\a', '(', '\x2', '\x2', '\x1EA', 
		'\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', '\x2', '\x2', 
		'\x2', '\x1EB', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1EE', 
		'\x5', 'V', ',', '\x2', '\x1ED', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1ED', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1FE', '\x3', 
		'\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\f', '\a', '\x2', '\x2', '\x1F0', 
		'\x1F2', '\t', '\x5', '\x2', '\x2', '\x1F1', '\x1F3', '\a', '\x12', '\x2', 
		'\x2', '\x1F2', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', 
		'\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1FD', '\x5', 'X', '-', '\b', '\x1F5', '\x1F6', '\f', '\x6', 
		'\x2', '\x2', '\x1F6', '\x1F7', '\t', '\x6', '\x2', '\x2', '\x1F7', '\x1F8', 
		'\a', '\x12', '\x2', '\x2', '\x1F8', '\x1FD', '\x5', 'X', '-', '\a', '\x1F9', 
		'\x1FA', '\f', '\x5', '\x2', '\x2', '\x1FA', '\x1FB', '\t', '\a', '\x2', 
		'\x2', '\x1FB', '\x1FD', '\x5', 'X', '-', '\x6', '\x1FC', '\x1EF', '\x3', 
		'\x2', '\x2', '\x2', '\x1FC', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1FC', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x200', '\x3', '\x2', '\x2', 
		'\x2', '\x1FE', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FF', 
		'\x3', '\x2', '\x2', '\x2', '\x1FF', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\a', 
		'+', '\x2', '\x2', '\x202', '[', '\x3', '\x2', '\x2', '\x2', '\x203', 
		'\x204', '\a', ',', '\x2', '\x2', '\x204', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '\x206', '\a', '-', '\x2', '\x2', '\x206', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x207', '\x208', '\x5', 'h', '\x35', '\x2', '\x208', '\x209', 
		'\a', '.', '\x2', '\x2', '\x209', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\x20A', '\x20B', '\x5', 'h', '\x35', '\x2', '\x20B', '\x20C', '\a', '/', 
		'\x2', '\x2', '\x20C', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x207', 
		'\x3', '\x2', '\x2', '\x2', '\x20D', '\x20A', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x61', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x22C', '\x5', 
		'h', '\x35', '\x2', '\x210', '\x212', '\a', '%', '\x2', '\x2', '\x211', 
		'\x210', '\x3', '\x2', '\x2', '\x2', '\x211', '\x212', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x213', '\x3', '\x2', '\x2', '\x2', '\x213', '\x22C', 
		'\x5', 'j', '\x36', '\x2', '\x214', '\x215', '\x5', 'h', '\x35', '\x2', 
		'\x215', '\x216', '\a', '\xE', '\x2', '\x2', '\x216', '\x217', '\x5', 
		'\x62', '\x32', '\x2', '\x217', '\x218', '\a', '\xF', '\x2', '\x2', '\x218', 
		'\x22C', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21A', '\x5', 'h', '\x35', 
		'\x2', '\x21A', '\x21B', '\a', '\xE', '\x2', '\x2', '\x21B', '\x21C', 
		'\x5', '\x62', '\x32', '\x2', '\x21C', '\x21D', '\a', '\x10', '\x2', '\x2', 
		'\x21D', '\x21E', '\x5', '\x62', '\x32', '\x2', '\x21E', '\x21F', '\a', 
		'\xF', '\x2', '\x2', '\x21F', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x221', '\x5', 'h', '\x35', '\x2', '\x221', '\x222', '\a', '\x30', '\x2', 
		'\x2', '\x222', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x223', '\x224', 
		'\x5', 'h', '\x35', '\x2', '\x224', '\x225', '\a', '\x31', '\x2', '\x2', 
		'\x225', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x226', '\x227', '\x5', 
		'h', '\x35', '\x2', '\x227', '\x228', '\a', '\x32', '\x2', '\x2', '\x228', 
		'\x22C', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22C', '\x5', '\x64', 
		'\x33', '\x2', '\x22A', '\x22C', '\x5', '\x66', '\x34', '\x2', '\x22B', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x211', '\x3', '\x2', '\x2', 
		'\x2', '\x22B', '\x214', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\x22B', '\x220', '\x3', '\x2', '\x2', '\x2', 
		'\x22B', '\x223', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x22B', '\x229', '\x3', '\x2', '\x2', '\x2', '\x22B', 
		'\x22A', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x22D', '\x22E', '\x5', 'h', '\x35', '\x2', '\x22E', '\x237', 
		'\a', '\a', '\x2', '\x2', '\x22F', '\x234', '\x5', 'h', '\x35', '\x2', 
		'\x230', '\x231', '\a', '\x10', '\x2', '\x2', '\x231', '\x233', '\x5', 
		'h', '\x35', '\x2', '\x232', '\x230', '\x3', '\x2', '\x2', '\x2', '\x233', 
		'\x236', '\x3', '\x2', '\x2', '\x2', '\x234', '\x232', '\x3', '\x2', '\x2', 
		'\x2', '\x234', '\x235', '\x3', '\x2', '\x2', '\x2', '\x235', '\x238', 
		'\x3', '\x2', '\x2', '\x2', '\x236', '\x234', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\x3', 
		'\x2', '\x2', '\x2', '\x238', '\x239', '\x3', '\x2', '\x2', '\x2', '\x239', 
		'\x23A', '\a', '\b', '\x2', '\x2', '\x23A', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x23B', '\x23C', '\x5', 'h', '\x35', '\x2', '\x23C', '\x245', 
		'\a', '\a', '\x2', '\x2', '\x23D', '\x242', '\x5', 'h', '\x35', '\x2', 
		'\x23E', '\x23F', '\a', '\x10', '\x2', '\x2', '\x23F', '\x241', '\x5', 
		'h', '\x35', '\x2', '\x240', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x241', 
		'\x244', '\x3', '\x2', '\x2', '\x2', '\x242', '\x240', '\x3', '\x2', '\x2', 
		'\x2', '\x242', '\x243', '\x3', '\x2', '\x2', '\x2', '\x243', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '\x244', '\x242', '\x3', '\x2', '\x2', '\x2', 
		'\x245', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', '\x3', 
		'\x2', '\x2', '\x2', '\x246', '\x247', '\x3', '\x2', '\x2', '\x2', '\x247', 
		'\x248', '\a', '\b', '\x2', '\x2', '\x248', '\x249', '\a', '\x33', '\x2', 
		'\x2', '\x249', 'g', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', '\a', 
		'\x38', '\x2', '\x2', '\x24B', 'i', '\x3', '\x2', '\x2', '\x2', '\x24C', 
		'\x24D', '\t', '\b', '\x2', '\x2', '\x24D', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x24E', '\x24F', '\t', '\t', '\x2', '\x2', '\x24F', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x34', 's', '\x83', '\x8B', '\x8D', '\x93', '\x9B', 
		'\xA6', '\xB0', '\xC4', '\xC9', '\xCF', '\xE3', '\xE9', '\xF2', '\xFB', 
		'\x101', '\x10A', '\x10F', '\x114', '\x120', '\x122', '\x12E', '\x130', 
		'\x136', '\x153', '\x168', '\x176', '\x17E', '\x184', '\x18B', '\x193', 
		'\x197', '\x1AA', '\x1AF', '\x1CF', '\x1D4', '\x1DE', '\x1E0', '\x1EA', 
		'\x1ED', '\x1F2', '\x1FC', '\x1FE', '\x20D', '\x211', '\x22B', '\x234', 
		'\x237', '\x242', '\x245',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\noobs\Documents\Github\P4-Emotional-Damage\Compiler\EmotionalDamage\EmotionalDamage.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class EmotionalDamageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, Inum=45, Fnum=46, 
		IDENTIFIER=47, STRING_CONSTANT=48, WS=49;
	public const int
		RULE_prog = 0, RULE_stmts = 1, RULE_numtype = 2, RULE_print = 3, RULE_types = 4, 
		RULE_returntype = 5, RULE_dcl = 6, RULE_stmt = 7, RULE_ifstmt = 8, RULE_elifstmt = 9, 
		RULE_elsestmt = 10, RULE_expr = 11, RULE_bexpr = 12;
	public static readonly string[] ruleNames = {
		"prog", "stmts", "numtype", "print", "types", "returntype", "dcl", "stmt", 
		"ifstmt", "elifstmt", "elsestmt", "expr", "bexpr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'print'", "'println'", "'['", "']'", "'bool'", 
		"'string'", "'void'", "'('", "','", "')'", "'{'", "'}'", "';'", "'='", 
		"'return'", "'++'", "'--'", "'T'", "'while'", "'for'", "'if'", "'elif'", 
		"'else'", "'sqrt'", "'**'", "'%'", "'*'", "'/'", "'+'", "'-'", "'\\\\'", 
		"'.row'", "'.col'", "'.len'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", 
		"'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "Inum", "Fnum", 
		"IDENTIFIER", "STRING_CONSTANT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EmotionalDamage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EmotionalDamageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EmotionalDamageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EmotionalDamageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(EmotionalDamageParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; stmts();
			State = 27; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public DclContext[] dcl() {
			return GetRuleContexts<DclContext>();
		}
		public DclContext dcl(int i) {
			return GetRuleContext<DclContext>(i);
		}
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__16) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 31;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__6:
				case T__7:
				case T__8:
					{
					State = 29; dcl();
					}
					break;
				case T__2:
				case T__3:
				case T__16:
				case T__19:
				case T__20:
				case T__21:
				case T__22:
				case IDENTIFIER:
					{
					State = 30; stmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumtypeContext : ParserRuleContext {
		public NumtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numtype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumtypeContext numtype() {
		NumtypeContext _localctx = new NumtypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_numtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 6, RULE_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesContext : ParserRuleContext {
		public ITerminalNode[] Inum() { return GetTokens(EmotionalDamageParser.Inum); }
		public ITerminalNode Inum(int i) {
			return GetToken(EmotionalDamageParser.Inum, i);
		}
		public TypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_types; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypesContext types() {
		TypesContext _localctx = new TypesContext(Context, State);
		EnterRule(_localctx, 8, RULE_types);
		int _la;
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; Match(T__0);
				State = 44;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 41; Match(T__4);
					State = 42; Match(Inum);
					State = 43; Match(T__5);
					}
					break;
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 46; Match(T__4);
					State = 47; Match(Inum);
					State = 48; Match(T__5);
					}
				}

				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; Match(T__1);
				State = 55;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 52; Match(T__4);
					State = 53; Match(Inum);
					State = 54; Match(T__5);
					}
					break;
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4) {
					{
					State = 57; Match(T__4);
					State = 58; Match(Inum);
					State = 59; Match(T__5);
					}
				}

				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 62; Match(T__6);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63; Match(T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturntypeContext : ParserRuleContext {
		public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		public ReturntypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returntype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturntype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturntypeContext returntype() {
		ReturntypeContext _localctx = new ReturntypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_returntype);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__6:
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; types();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
	 
		public DclContext() { }
		public virtual void CopyFrom(DclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayDeclarationContext : DclContext {
		public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public NumtypeContext numtype() {
			return GetRuleContext<NumtypeContext>(0);
		}
		public ArrayDeclarationContext(DclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringDclContext : DclContext {
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(EmotionalDamageParser.STRING_CONSTANT, 0); }
		public StringDclContext(DclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDcl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatrixDeclarationContext : DclContext {
		public NumtypeContext numtype() {
			return GetRuleContext<NumtypeContext>(0);
		}
		public ITerminalNode[] Inum() { return GetTokens(EmotionalDamageParser.Inum); }
		public ITerminalNode Inum(int i) {
			return GetToken(EmotionalDamageParser.Inum, i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public MatrixDeclarationContext(DclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumDclContext : DclContext {
		public NumtypeContext numtype() {
			return GetRuleContext<NumtypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NumDclContext(DclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumDcl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncDclContext : DclContext {
		public ReturntypeContext returntype() {
			return GetRuleContext<ReturntypeContext>(0);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public TypesContext[] types() {
			return GetRuleContexts<TypesContext>();
		}
		public TypesContext types(int i) {
			return GetRuleContext<TypesContext>(i);
		}
		public FuncDclContext(DclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDcl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolDeclarationContext : DclContext {
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BoolDeclarationContext(DclContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 12, RULE_dcl);
		int _la;
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new FuncDclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; returntype();
				State = 71; Match(IDENTIFIER);
				State = 72; Match(T__9);
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__6) | (1L << T__7))) != 0)) {
					{
					{
					State = 73; types();
					State = 74; Match(IDENTIFIER);
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__10) {
						{
						{
						State = 76; Match(T__10);
						State = 77; types();
						State = 78; Match(IDENTIFIER);
						}
						}
						State = 84;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 87; Match(T__11);
				State = 88; Match(T__12);
				State = 89; stmts();
				State = 90; Match(T__13);
				}
				break;
			case 2:
				_localctx = new MatrixDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; numtype();
				State = 93; Match(T__4);
				State = 94; Match(Inum);
				State = 95; Match(T__5);
				State = 96; Match(T__4);
				State = 97; Match(Inum);
				State = 98; Match(T__5);
				State = 99; Match(IDENTIFIER);
				State = 100; Match(T__14);
				}
				break;
			case 3:
				_localctx = new ArrayDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 104;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
					{
					State = 102; numtype();
					}
					break;
				case T__7:
					{
					State = 103; Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 106; Match(T__4);
				State = 107; Match(Inum);
				State = 108; Match(T__5);
				State = 109; Match(IDENTIFIER);
				State = 110; Match(T__14);
				}
				break;
			case 4:
				_localctx = new NumDclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 111; numtype();
				State = 112; Match(IDENTIFIER);
				State = 113; Match(T__15);
				State = 114; expr(0);
				State = 115; Match(T__14);
				}
				break;
			case 5:
				_localctx = new StringDclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 117; Match(T__7);
				State = 118; Match(IDENTIFIER);
				State = 119; Match(T__15);
				State = 120; Match(STRING_CONSTANT);
				State = 121; Match(T__14);
				}
				break;
			case 6:
				_localctx = new BoolDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 122; Match(T__6);
				State = 123; Match(IDENTIFIER);
				State = 124; Match(T__15);
				State = 125; bexpr(0);
				State = 126; Match(T__14);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolAssignStmtContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public BoolAssignStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStmtContext : StmtContext {
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public ITerminalNode STRING_CONSTANT() { return GetToken(EmotionalDamageParser.STRING_CONSTANT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumAssignStmtContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NumAssignStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatrixElementAssignStmtContext : StmtContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] Inum() { return GetTokens(EmotionalDamageParser.Inum); }
		public ITerminalNode Inum(int i) {
			return GetToken(EmotionalDamageParser.Inum, i);
		}
		public MatrixElementAssignStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatrixElementAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StmtContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public WhileStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectiveContext : StmtContext {
		public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		public ElifstmtContext[] elifstmt() {
			return GetRuleContexts<ElifstmtContext>();
		}
		public ElifstmtContext elifstmt(int i) {
			return GetRuleContext<ElifstmtContext>(i);
		}
		public ElsestmtContext elsestmt() {
			return GetRuleContext<ElsestmtContext>(0);
		}
		public SelectiveContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelective(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public UnaryPlusContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public UnaryMinusContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayElementAssignStmtContext : StmtContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public ArrayElementAssignStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public ReturnStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : StmtContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ForStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TransposeMatrixStmtContext : StmtContext {
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public TransposeMatrixStmtContext(StmtContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransposeMatrixStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_stmt);
		int _la;
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new PrintStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; print();
				State = 131; Match(T__9);
				State = 134;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_CONSTANT:
					{
					State = 132; Match(STRING_CONSTANT);
					}
					break;
				case T__9:
				case T__25:
				case T__31:
				case Inum:
				case Fnum:
				case IDENTIFIER:
					{
					State = 133; expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 136; Match(T__11);
				State = 137; Match(T__14);
				}
				break;
			case 2:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; Match(T__16);
				State = 140; Match(IDENTIFIER);
				State = 141; Match(T__14);
				}
				break;
			case 3:
				_localctx = new NumAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 142; Match(IDENTIFIER);
				State = 143; Match(T__15);
				State = 144; expr(0);
				State = 145; Match(T__14);
				}
				break;
			case 4:
				_localctx = new BoolAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 147; Match(IDENTIFIER);
				State = 148; Match(T__15);
				State = 149; bexpr(0);
				State = 150; Match(T__14);
				}
				break;
			case 5:
				_localctx = new MatrixElementAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 152; Match(IDENTIFIER);
				State = 153; Match(T__4);
				State = 154;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 155; Match(T__5);
				State = 156; Match(T__4);
				State = 157;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 158; Match(T__5);
				State = 159; Match(T__15);
				State = 160; expr(0);
				State = 161; Match(T__14);
				}
				break;
			case 6:
				_localctx = new ArrayElementAssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 163; Match(IDENTIFIER);
				State = 164; Match(T__4);
				State = 165;
				_la = TokenStream.LA(1);
				if ( !(_la==Inum || _la==IDENTIFIER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 166; Match(T__5);
				State = 167; Match(T__15);
				State = 168; expr(0);
				State = 169; Match(T__14);
				}
				break;
			case 7:
				_localctx = new UnaryPlusContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 171; Match(IDENTIFIER);
				State = 172; Match(T__17);
				State = 173; Match(T__14);
				}
				break;
			case 8:
				_localctx = new UnaryMinusContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 174; Match(IDENTIFIER);
				State = 175; Match(T__18);
				State = 176; Match(T__14);
				}
				break;
			case 9:
				_localctx = new TransposeMatrixStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 177; Match(T__19);
				State = 178; Match(T__9);
				State = 179; Match(IDENTIFIER);
				State = 180; Match(T__11);
				State = 181; Match(T__14);
				}
				break;
			case 10:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 182; Match(T__20);
				State = 183; Match(T__9);
				State = 184; bexpr(0);
				State = 185; Match(T__11);
				State = 186; Match(T__12);
				State = 187; stmts();
				State = 188; Match(T__13);
				}
				break;
			case 11:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 190; Match(T__21);
				State = 191; Match(T__9);
				State = 192; Match(T__0);
				State = 193; Match(IDENTIFIER);
				State = 194; Match(T__15);
				State = 195; expr(0);
				State = 196; Match(T__14);
				State = 197; bexpr(0);
				State = 198; Match(T__14);
				State = 203;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 199; Match(IDENTIFIER);
					State = 200; Match(T__17);
					}
					break;
				case 2:
					{
					State = 201; Match(IDENTIFIER);
					State = 202; Match(T__18);
					}
					break;
				}
				State = 205; Match(T__11);
				State = 206; Match(T__12);
				State = 207; stmts();
				State = 208; Match(T__13);
				}
				break;
			case 12:
				_localctx = new SelectiveContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 210; ifstmt();
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__23) {
					{
					{
					State = 211; elifstmt();
					}
					}
					State = 216;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__24) {
					{
					State = 217; elsestmt();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(T__22);
			State = 223; Match(T__9);
			State = 224; bexpr(0);
			State = 225; Match(T__11);
			State = 226; Match(T__12);
			State = 227; stmts();
			State = 228; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifstmtContext : ParserRuleContext {
		public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ElifstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifstmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifstmtContext elifstmt() {
		ElifstmtContext _localctx = new ElifstmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_elifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(T__23);
			State = 231; Match(T__9);
			State = 232; bexpr(0);
			State = 233; Match(T__11);
			State = 234; Match(T__12);
			State = 235; stmts();
			State = 236; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsestmtContext : ParserRuleContext {
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public ElsestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsestmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsestmtContext elsestmt() {
		ElsestmtContext _localctx = new ElsestmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_elsestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(T__24);
			State = 239; Match(T__12);
			State = 240; stmts();
			State = 241; Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RowidContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public RowidContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LengthidContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public LengthidContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntValContext : ExprContext {
		public ITerminalNode Inum() { return GetToken(EmotionalDamageParser.Inum, 0); }
		public IntValContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PowExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegValContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegValContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatValContext : ExprContext {
		public ITerminalNode Fnum() { return GetToken(EmotionalDamageParser.Fnum, 0); }
		public FloatValContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatVal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DivideExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GradientExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public GradientExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGradientExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallContext : ExprContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public FuncCallContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PlusExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumArrMatrixValueContext : ExprContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(EmotionalDamageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(EmotionalDamageParser.IDENTIFIER, i);
		}
		public ITerminalNode[] Inum() { return GetTokens(EmotionalDamageParser.Inum); }
		public ITerminalNode Inum(int i) {
			return GetToken(EmotionalDamageParser.Inum, i);
		}
		public NumArrMatrixValueContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumArrMatrixValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqrtExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SqrtExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrtExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ModExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimesExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TimesExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimesExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColidContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(EmotionalDamageParser.IDENTIFIER, 0); }
		public ColidContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MinusExprContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 244; Match(T__9);
				State = 245; expr(0);
				State = 246; Match(T__11);
				}
				break;
			case 2:
				{
				_localctx = new FuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 248; Match(IDENTIFIER);
				State = 249; Match(T__9);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 250; Match(IDENTIFIER);
					State = 255;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__10) {
						{
						{
						State = 251; Match(T__10);
						State = 252; Match(IDENTIFIER);
						}
						}
						State = 257;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 260; Match(T__11);
				}
				break;
			case 3:
				{
				_localctx = new SqrtExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 261; Match(T__25);
				State = 262; expr(15);
				}
				break;
			case 4:
				{
				_localctx = new NumArrMatrixValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 263; Match(IDENTIFIER);
				State = 267;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 264; Match(T__4);
					State = 265;
					_la = TokenStream.LA(1);
					if ( !(_la==Inum || _la==IDENTIFIER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 266; Match(T__5);
					}
					break;
				}
				State = 272;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 269; Match(T__4);
					State = 270;
					_la = TokenStream.LA(1);
					if ( !(_la==Inum || _la==IDENTIFIER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 271; Match(T__5);
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new RowidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 274; Match(IDENTIFIER);
				State = 275; Match(T__33);
				}
				break;
			case 6:
				{
				_localctx = new ColidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 276; Match(IDENTIFIER);
				State = 277; Match(T__34);
				}
				break;
			case 7:
				{
				_localctx = new LengthidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 278; Match(IDENTIFIER);
				State = 279; Match(T__35);
				}
				break;
			case 8:
				{
				_localctx = new NegValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 280; Match(T__31);
				State = 281; expr(3);
				}
				break;
			case 9:
				{
				_localctx = new IntValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 282; Match(Inum);
				}
				break;
			case 10:
				{
				_localctx = new FloatValContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 283; Match(Fnum);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 307;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new PowExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 286;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 287; Match(T__26);
						State = 288; expr(15);
						}
						break;
					case 2:
						{
						_localctx = new ModExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 289;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 290; Match(T__27);
						State = 291; expr(14);
						}
						break;
					case 3:
						{
						_localctx = new TimesExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 292;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 293; Match(T__28);
						State = 294; expr(13);
						}
						break;
					case 4:
						{
						_localctx = new DivideExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 295;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 296; Match(T__29);
						State = 297; expr(12);
						}
						break;
					case 5:
						{
						_localctx = new PlusExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 298;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 299; Match(T__30);
						State = 300; expr(11);
						}
						break;
					case 6:
						{
						_localctx = new MinusExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 301;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 302; Match(T__31);
						State = 303; expr(10);
						}
						break;
					case 7:
						{
						_localctx = new GradientExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 304;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 305; Match(T__32);
						State = 306; expr(9);
						}
						break;
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BexprContext : ParserRuleContext {
		public BexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bexpr; } }
	 
		public BexprContext() { }
		public virtual void CopyFrom(BexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolExprContext : BexprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BoolExprContext(BexprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualsContext : BexprContext {
		public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		public EqualsContext(BexprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterEqualsContext : BexprContext {
		public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		public GreaterEqualsContext(BexprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolValueContext : BexprContext {
		public BoolValueContext(BexprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerEqualsContext : BexprContext {
		public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		public SmallerEqualsContext(BexprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallerEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterContext : BexprContext {
		public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		public GreaterContext(BexprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreater(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallerContext : BexprContext {
		public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		public SmallerContext(BexprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmaller(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualsContext : BexprContext {
		public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		public NotEqualsContext(BexprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEmotionalDamageVisitor<TResult> typedVisitor = visitor as IEmotionalDamageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEquals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BexprContext bexpr() {
		return bexpr(0);
	}

	private BexprContext bexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BexprContext _localctx = new BexprContext(Context, _parentState);
		BexprContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_bexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__42:
			case T__43:
				{
				_localctx = new BoolValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 313;
				_la = TokenStream.LA(1);
				if ( !(_la==T__42 || _la==T__43) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__9:
			case T__25:
			case T__31:
			case Inum:
			case Fnum:
			case IDENTIFIER:
				{
				_localctx = new BoolExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 314; expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 337;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 335;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new GreaterContext(new BexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 317;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 318; Match(T__36);
						State = 319; bexpr(9);
						}
						break;
					case 2:
						{
						_localctx = new SmallerContext(new BexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 320;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 321; Match(T__37);
						State = 322; bexpr(8);
						}
						break;
					case 3:
						{
						_localctx = new GreaterEqualsContext(new BexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 323;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 324; Match(T__38);
						State = 325; bexpr(7);
						}
						break;
					case 4:
						{
						_localctx = new SmallerEqualsContext(new BexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 326;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 327; Match(T__39);
						State = 328; bexpr(6);
						}
						break;
					case 5:
						{
						_localctx = new EqualsContext(new BexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 329;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 330; Match(T__40);
						State = 331; bexpr(5);
						}
						break;
					case 6:
						{
						_localctx = new NotEqualsContext(new BexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 332;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 333; Match(T__41);
						State = 334; bexpr(4);
						}
						break;
					}
					} 
				}
				State = 339;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expr_sempred((ExprContext)_localctx, predIndex);
		case 12: return bexpr_sempred((BexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		}
		return true;
	}
	private bool bexpr_sempred(BexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x33', '\x157', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '\"', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '%', 
		'\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '/', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x34', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', ':', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '?', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x43', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'G', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'S', '\n', 
		'\b', '\f', '\b', '\xE', '\b', 'V', '\v', '\b', '\x5', '\b', 'X', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', 'k', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x83', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x89', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\xCE', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', '\xD7', '\n', '\t', '\f', '\t', '\xE', '\t', '\xDA', 
		'\v', '\t', '\x3', '\t', '\x5', '\t', '\xDD', '\n', '\t', '\x5', '\t', 
		'\xDF', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '\x100', '\n', '\r', '\f', '\r', '\xE', '\r', '\x103', '\v', '\r', 
		'\x5', '\r', '\x105', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x10E', 
		'\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x113', 
		'\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x11F', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\a', '\r', '\x136', '\n', '\r', '\f', '\r', '\xE', 
		'\r', '\x139', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x13E', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\x152', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x155', 
		'\v', '\xE', '\x3', '\xE', '\x2', '\x4', '\x18', '\x1A', '\xF', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x2', '\x6', '\x3', '\x2', '\x3', '\x4', '\x3', '\x2', 
		'\x5', '\x6', '\x4', '\x2', '/', '/', '\x31', '\x31', '\x3', '\x2', '-', 
		'.', '\x2', '\x185', '\x2', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x6', '&', '\x3', '\x2', '\x2', '\x2', 
		'\b', '(', '\x3', '\x2', '\x2', '\x2', '\n', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x46', '\x3', '\x2', '\x2', '\x2', '\xE', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\xDE', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\x14', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xF0', '\x3', '\x2', '\x2', '\x2', '\x18', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1D', '\x5', '\x4', '\x3', '\x2', '\x1D', '\x1E', '\a', '\x2', '\x2', 
		'\x3', '\x1E', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1F', '\"', '\x5', 
		'\xE', '\b', '\x2', ' ', '\"', '\x5', '\x10', '\t', '\x2', '!', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', 
		'%', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\x3', '\x2', '\x2', '\x2', '$', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\t', '\x2', '\x2', 
		'\x2', '\'', '\a', '\x3', '\x2', '\x2', '\x2', '(', ')', '\t', '\x3', 
		'\x2', '\x2', ')', '\t', '\x3', '\x2', '\x2', '\x2', '*', '.', '\a', '\x3', 
		'\x2', '\x2', '+', ',', '\a', '\a', '\x2', '\x2', ',', '-', '\a', '/', 
		'\x2', '\x2', '-', '/', '\a', '\b', '\x2', '\x2', '.', '+', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\a', '\x2', '\x2', '\x31', 
		'\x32', '\a', '/', '\x2', '\x2', '\x32', '\x34', '\a', '\b', '\x2', '\x2', 
		'\x33', '\x30', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x43', '\x3', '\x2', '\x2', '\x2', '\x35', '\x39', 
		'\a', '\x4', '\x2', '\x2', '\x36', '\x37', '\a', '\a', '\x2', '\x2', '\x37', 
		'\x38', '\a', '/', '\x2', '\x2', '\x38', ':', '\a', '\b', '\x2', '\x2', 
		'\x39', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', 
		'\x2', '\x2', ':', '>', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '\a', 
		'\x2', '\x2', '<', '=', '\a', '/', '\x2', '\x2', '=', '?', '\a', '\b', 
		'\x2', '\x2', '>', ';', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', 
		'\x2', '\x2', '?', '\x43', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\a', 
		'\t', '\x2', '\x2', '\x41', '\x43', '\a', '\n', '\x2', '\x2', '\x42', 
		'*', '\x3', '\x2', '\x2', '\x2', '\x42', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\v', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'G', '\x5', '\n', '\x6', '\x2', '\x45', 'G', '\a', '\v', '\x2', '\x2', 
		'\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\r', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x5', 
		'\f', '\a', '\x2', 'I', 'J', '\a', '\x31', '\x2', '\x2', 'J', 'W', '\a', 
		'\f', '\x2', '\x2', 'K', 'L', '\x5', '\n', '\x6', '\x2', 'L', 'M', '\a', 
		'\x31', '\x2', '\x2', 'M', 'T', '\x3', '\x2', '\x2', '\x2', 'N', 'O', 
		'\a', '\r', '\x2', '\x2', 'O', 'P', '\x5', '\n', '\x6', '\x2', 'P', 'Q', 
		'\a', '\x31', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 'R', 
		'N', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 
		'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 
		'U', 'X', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 
		'W', 'K', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\xE', '\x2', '\x2', 
		'Z', '[', '\a', '\xF', '\x2', '\x2', '[', '\\', '\x5', '\x4', '\x3', '\x2', 
		'\\', ']', '\a', '\x10', '\x2', '\x2', ']', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\x5', '\x6', '\x4', '\x2', '_', '`', '\a', '\a', '\x2', 
		'\x2', '`', '\x61', '\a', '/', '\x2', '\x2', '\x61', '\x62', '\a', '\b', 
		'\x2', '\x2', '\x62', '\x63', '\a', '\a', '\x2', '\x2', '\x63', '\x64', 
		'\a', '/', '\x2', '\x2', '\x64', '\x65', '\a', '\b', '\x2', '\x2', '\x65', 
		'\x66', '\a', '\x31', '\x2', '\x2', '\x66', 'g', '\a', '\x11', '\x2', 
		'\x2', 'g', '\x83', '\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x5', '\x6', 
		'\x4', '\x2', 'i', 'k', '\a', '\n', '\x2', '\x2', 'j', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'm', '\a', '\a', '\x2', '\x2', 'm', 'n', '\a', '/', 
		'\x2', '\x2', 'n', 'o', '\a', '\b', '\x2', '\x2', 'o', 'p', '\a', '\x31', 
		'\x2', '\x2', 'p', '\x83', '\a', '\x11', '\x2', '\x2', 'q', 'r', '\x5', 
		'\x6', '\x4', '\x2', 'r', 's', '\a', '\x31', '\x2', '\x2', 's', 't', '\a', 
		'\x12', '\x2', '\x2', 't', 'u', '\x5', '\x18', '\r', '\x2', 'u', 'v', 
		'\a', '\x11', '\x2', '\x2', 'v', '\x83', '\x3', '\x2', '\x2', '\x2', 'w', 
		'x', '\a', '\n', '\x2', '\x2', 'x', 'y', '\a', '\x31', '\x2', '\x2', 'y', 
		'z', '\a', '\x12', '\x2', '\x2', 'z', '{', '\a', '\x32', '\x2', '\x2', 
		'{', '\x83', '\a', '\x11', '\x2', '\x2', '|', '}', '\a', '\t', '\x2', 
		'\x2', '}', '~', '\a', '\x31', '\x2', '\x2', '~', '\x7F', '\a', '\x12', 
		'\x2', '\x2', '\x7F', '\x80', '\x5', '\x1A', '\xE', '\x2', '\x80', '\x81', 
		'\a', '\x11', '\x2', '\x2', '\x81', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x82', 'H', '\x3', '\x2', '\x2', '\x2', '\x82', '^', '\x3', '\x2', '\x2', 
		'\x2', '\x82', 'j', '\x3', '\x2', '\x2', '\x2', '\x82', 'q', '\x3', '\x2', 
		'\x2', '\x2', '\x82', 'w', '\x3', '\x2', '\x2', '\x2', '\x82', '|', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\xF', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\x5', '\b', '\x5', '\x2', '\x85', '\x88', '\a', '\f', '\x2', 
		'\x2', '\x86', '\x89', '\a', '\x32', '\x2', '\x2', '\x87', '\x89', '\x5', 
		'\x18', '\r', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\a', '\xE', '\x2', '\x2', '\x8B', '\x8C', '\a', 
		'\x11', '\x2', '\x2', '\x8C', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\a', '\x13', '\x2', '\x2', '\x8E', '\x8F', '\a', '\x31', '\x2', 
		'\x2', '\x8F', '\xDF', '\a', '\x11', '\x2', '\x2', '\x90', '\x91', '\a', 
		'\x31', '\x2', '\x2', '\x91', '\x92', '\a', '\x12', '\x2', '\x2', '\x92', 
		'\x93', '\x5', '\x18', '\r', '\x2', '\x93', '\x94', '\a', '\x11', '\x2', 
		'\x2', '\x94', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\x31', '\x2', '\x2', '\x96', '\x97', '\a', '\x12', '\x2', '\x2', '\x97', 
		'\x98', '\x5', '\x1A', '\xE', '\x2', '\x98', '\x99', '\a', '\x11', '\x2', 
		'\x2', '\x99', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		'\x31', '\x2', '\x2', '\x9B', '\x9C', '\a', '\a', '\x2', '\x2', '\x9C', 
		'\x9D', '\t', '\x4', '\x2', '\x2', '\x9D', '\x9E', '\a', '\b', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '\a', '\x2', '\x2', '\x9F', '\xA0', '\t', 
		'\x4', '\x2', '\x2', '\xA0', '\xA1', '\a', '\b', '\x2', '\x2', '\xA1', 
		'\xA2', '\a', '\x12', '\x2', '\x2', '\xA2', '\xA3', '\x5', '\x18', '\r', 
		'\x2', '\xA3', '\xA4', '\a', '\x11', '\x2', '\x2', '\xA4', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x31', '\x2', '\x2', '\xA6', 
		'\xA7', '\a', '\a', '\x2', '\x2', '\xA7', '\xA8', '\t', '\x4', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', '\b', '\x2', '\x2', '\xA9', '\xAA', '\a', 
		'\x12', '\x2', '\x2', '\xAA', '\xAB', '\x5', '\x18', '\r', '\x2', '\xAB', 
		'\xAC', '\a', '\x11', '\x2', '\x2', '\xAC', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\a', '\x31', '\x2', '\x2', '\xAE', '\xAF', '\a', 
		'\x14', '\x2', '\x2', '\xAF', '\xDF', '\a', '\x11', '\x2', '\x2', '\xB0', 
		'\xB1', '\a', '\x31', '\x2', '\x2', '\xB1', '\xB2', '\a', '\x15', '\x2', 
		'\x2', '\xB2', '\xDF', '\a', '\x11', '\x2', '\x2', '\xB3', '\xB4', '\a', 
		'\x16', '\x2', '\x2', '\xB4', '\xB5', '\a', '\f', '\x2', '\x2', '\xB5', 
		'\xB6', '\a', '\x31', '\x2', '\x2', '\xB6', '\xB7', '\a', '\xE', '\x2', 
		'\x2', '\xB7', '\xDF', '\a', '\x11', '\x2', '\x2', '\xB8', '\xB9', '\a', 
		'\x17', '\x2', '\x2', '\xB9', '\xBA', '\a', '\f', '\x2', '\x2', '\xBA', 
		'\xBB', '\x5', '\x1A', '\xE', '\x2', '\xBB', '\xBC', '\a', '\xE', '\x2', 
		'\x2', '\xBC', '\xBD', '\a', '\xF', '\x2', '\x2', '\xBD', '\xBE', '\x5', 
		'\x4', '\x3', '\x2', '\xBE', '\xBF', '\a', '\x10', '\x2', '\x2', '\xBF', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', '\x18', '\x2', 
		'\x2', '\xC1', '\xC2', '\a', '\f', '\x2', '\x2', '\xC2', '\xC3', '\a', 
		'\x3', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x31', '\x2', '\x2', '\xC4', 
		'\xC5', '\a', '\x12', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x18', '\r', 
		'\x2', '\xC6', '\xC7', '\a', '\x11', '\x2', '\x2', '\xC7', '\xC8', '\x5', 
		'\x1A', '\xE', '\x2', '\xC8', '\xCD', '\a', '\x11', '\x2', '\x2', '\xC9', 
		'\xCA', '\a', '\x31', '\x2', '\x2', '\xCA', '\xCE', '\a', '\x14', '\x2', 
		'\x2', '\xCB', '\xCC', '\a', '\x31', '\x2', '\x2', '\xCC', '\xCE', '\a', 
		'\x15', '\x2', '\x2', '\xCD', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\a', '\xE', '\x2', '\x2', '\xD0', '\xD1', '\a', 
		'\xF', '\x2', '\x2', '\xD1', '\xD2', '\x5', '\x4', '\x3', '\x2', '\xD2', 
		'\xD3', '\a', '\x10', '\x2', '\x2', '\xD3', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD8', '\x5', '\x12', '\n', '\x2', '\xD5', '\xD7', '\x5', 
		'\x14', '\v', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDD', '\x5', '\x16', '\f', '\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\x84', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\x95', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xDF', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\a', '\x19', '\x2', '\x2', '\xE1', '\xE2', '\a', 
		'\f', '\x2', '\x2', '\xE2', '\xE3', '\x5', '\x1A', '\xE', '\x2', '\xE3', 
		'\xE4', '\a', '\xE', '\x2', '\x2', '\xE4', '\xE5', '\a', '\xF', '\x2', 
		'\x2', '\xE5', '\xE6', '\x5', '\x4', '\x3', '\x2', '\xE6', '\xE7', '\a', 
		'\x10', '\x2', '\x2', '\xE7', '\x13', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\a', '\x1A', '\x2', '\x2', '\xE9', '\xEA', '\a', '\f', '\x2', 
		'\x2', '\xEA', '\xEB', '\x5', '\x1A', '\xE', '\x2', '\xEB', '\xEC', '\a', 
		'\xE', '\x2', '\x2', '\xEC', '\xED', '\a', '\xF', '\x2', '\x2', '\xED', 
		'\xEE', '\x5', '\x4', '\x3', '\x2', '\xEE', '\xEF', '\a', '\x10', '\x2', 
		'\x2', '\xEF', '\x15', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\a', 
		'\x1B', '\x2', '\x2', '\xF1', '\xF2', '\a', '\xF', '\x2', '\x2', '\xF2', 
		'\xF3', '\x5', '\x4', '\x3', '\x2', '\xF3', '\xF4', '\a', '\x10', '\x2', 
		'\x2', '\xF4', '\x17', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\b', 
		'\r', '\x1', '\x2', '\xF6', '\xF7', '\a', '\f', '\x2', '\x2', '\xF7', 
		'\xF8', '\x5', '\x18', '\r', '\x2', '\xF8', '\xF9', '\a', '\xE', '\x2', 
		'\x2', '\xF9', '\x11F', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\a', 
		'\x31', '\x2', '\x2', '\xFB', '\x104', '\a', '\f', '\x2', '\x2', '\xFC', 
		'\x101', '\a', '\x31', '\x2', '\x2', '\xFD', '\xFE', '\a', '\r', '\x2', 
		'\x2', '\xFE', '\x100', '\a', '\x31', '\x2', '\x2', '\xFF', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x103', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x105', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\xFC', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x11F', '\a', '\xE', '\x2', '\x2', '\x107', 
		'\x108', '\a', '\x1C', '\x2', '\x2', '\x108', '\x11F', '\x5', '\x18', 
		'\r', '\x11', '\x109', '\x10D', '\a', '\x31', '\x2', '\x2', '\x10A', '\x10B', 
		'\a', '\a', '\x2', '\x2', '\x10B', '\x10C', '\t', '\x4', '\x2', '\x2', 
		'\x10C', '\x10E', '\a', '\b', '\x2', '\x2', '\x10D', '\x10A', '\x3', '\x2', 
		'\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\a', '\a', '\x2', '\x2', 
		'\x110', '\x111', '\t', '\x4', '\x2', '\x2', '\x111', '\x113', '\a', '\b', 
		'\x2', '\x2', '\x112', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\a', '\x31', '\x2', '\x2', '\x115', '\x11F', '\a', 
		'$', '\x2', '\x2', '\x116', '\x117', '\a', '\x31', '\x2', '\x2', '\x117', 
		'\x11F', '\a', '%', '\x2', '\x2', '\x118', '\x119', '\a', '\x31', '\x2', 
		'\x2', '\x119', '\x11F', '\a', '&', '\x2', '\x2', '\x11A', '\x11B', '\a', 
		'\"', '\x2', '\x2', '\x11B', '\x11F', '\x5', '\x18', '\r', '\x5', '\x11C', 
		'\x11F', '\a', '/', '\x2', '\x2', '\x11D', '\x11F', '\a', '\x30', '\x2', 
		'\x2', '\x11E', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x11E', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x107', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x114', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x116', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x137', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x121', '\f', '\x10', '\x2', '\x2', '\x121', '\x122', '\a', '\x1D', '\x2', 
		'\x2', '\x122', '\x136', '\x5', '\x18', '\r', '\x11', '\x123', '\x124', 
		'\f', '\xF', '\x2', '\x2', '\x124', '\x125', '\a', '\x1E', '\x2', '\x2', 
		'\x125', '\x136', '\x5', '\x18', '\r', '\x10', '\x126', '\x127', '\f', 
		'\xE', '\x2', '\x2', '\x127', '\x128', '\a', '\x1F', '\x2', '\x2', '\x128', 
		'\x136', '\x5', '\x18', '\r', '\xF', '\x129', '\x12A', '\f', '\r', '\x2', 
		'\x2', '\x12A', '\x12B', '\a', ' ', '\x2', '\x2', '\x12B', '\x136', '\x5', 
		'\x18', '\r', '\xE', '\x12C', '\x12D', '\f', '\f', '\x2', '\x2', '\x12D', 
		'\x12E', '\a', '!', '\x2', '\x2', '\x12E', '\x136', '\x5', '\x18', '\r', 
		'\r', '\x12F', '\x130', '\f', '\v', '\x2', '\x2', '\x130', '\x131', '\a', 
		'\"', '\x2', '\x2', '\x131', '\x136', '\x5', '\x18', '\r', '\f', '\x132', 
		'\x133', '\f', '\n', '\x2', '\x2', '\x133', '\x134', '\a', '#', '\x2', 
		'\x2', '\x134', '\x136', '\x5', '\x18', '\r', '\v', '\x135', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x126', '\x3', '\x2', '\x2', '\x2', '\x135', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x135', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x139', '\x3', '\x2', '\x2', '\x2', '\x137', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x19', '\x3', '\x2', '\x2', '\x2', '\x139', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13B', '\b', '\xE', '\x1', '\x2', '\x13B', 
		'\x13E', '\t', '\x5', '\x2', '\x2', '\x13C', '\x13E', '\x5', '\x18', '\r', 
		'\x2', '\x13D', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13C', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\f', '\n', '\x2', '\x2', '\x140', '\x141', '\a', '\'', 
		'\x2', '\x2', '\x141', '\x152', '\x5', '\x1A', '\xE', '\v', '\x142', '\x143', 
		'\f', '\t', '\x2', '\x2', '\x143', '\x144', '\a', '(', '\x2', '\x2', '\x144', 
		'\x152', '\x5', '\x1A', '\xE', '\n', '\x145', '\x146', '\f', '\b', '\x2', 
		'\x2', '\x146', '\x147', '\a', ')', '\x2', '\x2', '\x147', '\x152', '\x5', 
		'\x1A', '\xE', '\t', '\x148', '\x149', '\f', '\a', '\x2', '\x2', '\x149', 
		'\x14A', '\a', '*', '\x2', '\x2', '\x14A', '\x152', '\x5', '\x1A', '\xE', 
		'\b', '\x14B', '\x14C', '\f', '\x6', '\x2', '\x2', '\x14C', '\x14D', '\a', 
		'+', '\x2', '\x2', '\x14D', '\x152', '\x5', '\x1A', '\xE', '\a', '\x14E', 
		'\x14F', '\f', '\x5', '\x2', '\x2', '\x14F', '\x150', '\a', ',', '\x2', 
		'\x2', '\x150', '\x152', '\x5', '\x1A', '\xE', '\x6', '\x151', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x151', '\x145', '\x3', '\x2', '\x2', '\x2', '\x151', '\x148', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x152', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x153', '\x3', '\x2', '\x2', '\x2', '\x1D', '!', '#', '.', '\x33', 
		'\x39', '>', '\x42', '\x46', 'T', 'W', 'j', '\x82', '\x88', '\xCD', '\xD8', 
		'\xDC', '\xDE', '\x101', '\x104', '\x10D', '\x112', '\x11E', '\x135', 
		'\x137', '\x13D', '\x151', '\x153',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

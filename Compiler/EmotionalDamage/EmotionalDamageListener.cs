//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EmotionalDamage.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="EmotionalDamageParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public interface IEmotionalDamageListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProg([NotNull] EmotionalDamageParser.ProgContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.prog"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProg([NotNull] EmotionalDamageParser.ProgContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.stmts"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmts([NotNull] EmotionalDamageParser.StmtsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.stmts"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmts([NotNull] EmotionalDamageParser.StmtsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] EmotionalDamageParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] EmotionalDamageParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmt([NotNull] EmotionalDamageParser.StmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.stmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmt([NotNull] EmotionalDamageParser.StmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrint([NotNull] EmotionalDamageParser.PrintContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.print"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrint([NotNull] EmotionalDamageParser.PrintContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.println"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintln([NotNull] EmotionalDamageParser.PrintlnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.println"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintln([NotNull] EmotionalDamageParser.PrintlnContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.returnstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnstmt([NotNull] EmotionalDamageParser.ReturnstmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.returnstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnstmt([NotNull] EmotionalDamageParser.ReturnstmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc([NotNull] EmotionalDamageParser.FuncContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.func"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc([NotNull] EmotionalDamageParser.FuncContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.gradfunc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGradfunc([NotNull] EmotionalDamageParser.GradfuncContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.gradfunc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGradfunc([NotNull] EmotionalDamageParser.GradfuncContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.rettype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRettype([NotNull] EmotionalDamageParser.RettypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.rettype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRettype([NotNull] EmotionalDamageParser.RettypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameters([NotNull] EmotionalDamageParser.ParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameters([NotNull] EmotionalDamageParser.ParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameter([NotNull] EmotionalDamageParser.ParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameter([NotNull] EmotionalDamageParser.ParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.matrixparameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatrixparameter([NotNull] EmotionalDamageParser.MatrixparameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.matrixparameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatrixparameter([NotNull] EmotionalDamageParser.MatrixparameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.arrparameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrparameter([NotNull] EmotionalDamageParser.ArrparameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.arrparameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrparameter([NotNull] EmotionalDamageParser.ArrparameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.graddcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGraddcl([NotNull] EmotionalDamageParser.GraddclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.graddcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGraddcl([NotNull] EmotionalDamageParser.GraddclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.intdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntdcl([NotNull] EmotionalDamageParser.IntdclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.intdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntdcl([NotNull] EmotionalDamageParser.IntdclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.floatdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloatdcl([NotNull] EmotionalDamageParser.FloatdclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.floatdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloatdcl([NotNull] EmotionalDamageParser.FloatdclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.intarrdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntarrdcl([NotNull] EmotionalDamageParser.IntarrdclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.intarrdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntarrdcl([NotNull] EmotionalDamageParser.IntarrdclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.floatarrdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloatarrdcl([NotNull] EmotionalDamageParser.FloatarrdclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.floatarrdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloatarrdcl([NotNull] EmotionalDamageParser.FloatarrdclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.arrupdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrupdate([NotNull] EmotionalDamageParser.ArrupdateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.arrupdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrupdate([NotNull] EmotionalDamageParser.ArrupdateContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.arrassign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrassign([NotNull] EmotionalDamageParser.ArrassignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.arrassign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrassign([NotNull] EmotionalDamageParser.ArrassignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.matrixassign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatrixassign([NotNull] EmotionalDamageParser.MatrixassignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.matrixassign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatrixassign([NotNull] EmotionalDamageParser.MatrixassignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.intmatrixdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntmatrixdcl([NotNull] EmotionalDamageParser.IntmatrixdclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.intmatrixdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntmatrixdcl([NotNull] EmotionalDamageParser.IntmatrixdclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.floatmatrixdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloatmatrixdcl([NotNull] EmotionalDamageParser.FloatmatrixdclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.floatmatrixdcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloatmatrixdcl([NotNull] EmotionalDamageParser.FloatmatrixdclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.matrixupdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatrixupdate([NotNull] EmotionalDamageParser.MatrixupdateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.matrixupdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatrixupdate([NotNull] EmotionalDamageParser.MatrixupdateContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.matrixarrexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatrixarrexpr([NotNull] EmotionalDamageParser.MatrixarrexprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.matrixarrexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatrixarrexpr([NotNull] EmotionalDamageParser.MatrixarrexprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.arrexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrexpr([NotNull] EmotionalDamageParser.ArrexprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.arrexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrexpr([NotNull] EmotionalDamageParser.ArrexprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.matrixtranspose"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatrixtranspose([NotNull] EmotionalDamageParser.MatrixtransposeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.matrixtranspose"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatrixtranspose([NotNull] EmotionalDamageParser.MatrixtransposeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.matrixinverse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMatrixinverse([NotNull] EmotionalDamageParser.MatrixinverseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.matrixinverse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMatrixinverse([NotNull] EmotionalDamageParser.MatrixinverseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.numassign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumassign([NotNull] EmotionalDamageParser.NumassignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.numassign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumassign([NotNull] EmotionalDamageParser.NumassignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.numupdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumupdate([NotNull] EmotionalDamageParser.NumupdateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.numupdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumupdate([NotNull] EmotionalDamageParser.NumupdateContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.boolassign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolassign([NotNull] EmotionalDamageParser.BoolassignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.boolassign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolassign([NotNull] EmotionalDamageParser.BoolassignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.boolupdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolupdate([NotNull] EmotionalDamageParser.BoolupdateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.boolupdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolupdate([NotNull] EmotionalDamageParser.BoolupdateContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.booldcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooldcl([NotNull] EmotionalDamageParser.BooldclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.booldcl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooldcl([NotNull] EmotionalDamageParser.BooldclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.boolval"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolval([NotNull] EmotionalDamageParser.BoolvalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.boolval"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolval([NotNull] EmotionalDamageParser.BoolvalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.selective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelective([NotNull] EmotionalDamageParser.SelectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.selective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelective([NotNull] EmotionalDamageParser.SelectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.ifstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfstmt([NotNull] EmotionalDamageParser.IfstmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.ifstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfstmt([NotNull] EmotionalDamageParser.IfstmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.elifstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElifstmt([NotNull] EmotionalDamageParser.ElifstmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.elifstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElifstmt([NotNull] EmotionalDamageParser.ElifstmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.elsestmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElsestmt([NotNull] EmotionalDamageParser.ElsestmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.elsestmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElsestmt([NotNull] EmotionalDamageParser.ElsestmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.iterative"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIterative([NotNull] EmotionalDamageParser.IterativeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.iterative"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIterative([NotNull] EmotionalDamageParser.IterativeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.forstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForstmt([NotNull] EmotionalDamageParser.ForstmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.forstmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForstmt([NotNull] EmotionalDamageParser.ForstmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.whilestmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhilestmt([NotNull] EmotionalDamageParser.WhilestmtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.whilestmt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhilestmt([NotNull] EmotionalDamageParser.WhilestmtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.random"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRandom([NotNull] EmotionalDamageParser.RandomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.random"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRandom([NotNull] EmotionalDamageParser.RandomContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.randomtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRandomtype([NotNull] EmotionalDamageParser.RandomtypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.randomtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRandomtype([NotNull] EmotionalDamageParser.RandomtypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.numexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumexpr([NotNull] EmotionalDamageParser.NumexprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.numexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumexpr([NotNull] EmotionalDamageParser.NumexprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.bexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBexpr([NotNull] EmotionalDamageParser.BexprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.bexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBexpr([NotNull] EmotionalDamageParser.BexprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.sqrt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSqrt([NotNull] EmotionalDamageParser.SqrtContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.sqrt"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSqrt([NotNull] EmotionalDamageParser.SqrtContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.power"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPower([NotNull] EmotionalDamageParser.PowerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.power"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPower([NotNull] EmotionalDamageParser.PowerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.mod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMod([NotNull] EmotionalDamageParser.ModContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.mod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMod([NotNull] EmotionalDamageParser.ModContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.unaryoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryoperator([NotNull] EmotionalDamageParser.UnaryoperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.unaryoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryoperator([NotNull] EmotionalDamageParser.UnaryoperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.val"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVal([NotNull] EmotionalDamageParser.ValContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.val"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVal([NotNull] EmotionalDamageParser.ValContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.funccall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunccall([NotNull] EmotionalDamageParser.FunccallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.funccall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunccall([NotNull] EmotionalDamageParser.FunccallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.gradfunccall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGradfunccall([NotNull] EmotionalDamageParser.GradfunccallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.gradfunccall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGradfunccall([NotNull] EmotionalDamageParser.GradfunccallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterId([NotNull] EmotionalDamageParser.IdContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitId([NotNull] EmotionalDamageParser.IdContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNum([NotNull] EmotionalDamageParser.NumContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNum([NotNull] EmotionalDamageParser.NumContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="EmotionalDamageParser.numtypes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumtypes([NotNull] EmotionalDamageParser.NumtypesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="EmotionalDamageParser.numtypes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumtypes([NotNull] EmotionalDamageParser.NumtypesContext context);
}

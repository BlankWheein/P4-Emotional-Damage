//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TestGrammar.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class TestGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, Inum=30, Fnum=31, Dnum=32, 
		ID=33, WHITESPACE=34, NEWLINE=35, W=36;
	public const int
		RULE_prog = 0, RULE_stmts = 1, RULE_stmt = 2, RULE_assignment = 3, RULE_forassignment = 4, 
		RULE_exprs = 5, RULE_expr = 6, RULE_selective = 7, RULE_ifstatement = 8, 
		RULE_elifstatement = 9, RULE_elsestatement = 10, RULE_iterative = 11, 
		RULE_bexpr = 12, RULE_textstring = 13, RULE_print = 14, RULE_dummy = 15, 
		RULE_val = 16, RULE_valtype = 17, RULE_id = 18, RULE_num = 19;
	public static readonly string[] ruleNames = {
		"prog", "stmts", "stmt", "assignment", "forassignment", "exprs", "expr", 
		"selective", "ifstatement", "elifstatement", "elsestatement", "iterative", 
		"bexpr", "textstring", "print", "dummy", "val", "valtype", "id", "num"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "','", "'('", "')'", "'sqrt'", "'%'", "'**'", "'*'", 
		"'/'", "'+'", "'-'", "'++'", "'--'", "'{'", "'}'", "'if'", "'elif'", "'else'", 
		"'for'", "'>'", "'<'", "'!'", "'\"'", "'print'", "'dummy'", "'int'", "'float'", 
		"'double'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "Inum", "Fnum", "Dnum", "ID", "WHITESPACE", 
		"NEWLINE", "W"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TestGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TestGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TestGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TestGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TestGrammarParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			stmts();
			State = 41;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__19) | (1L << T__24) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << ID))) != 0)) {
				{
				State = 43;
				stmt();
				State = 44;
				stmts();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForassignmentContext forassignment() {
			return GetRuleContext<ForassignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectiveContext selective() {
			return GetRuleContext<SelectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterativeContext iterative() {
			return GetRuleContext<IterativeContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmt);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
			case T__26:
			case T__27:
			case T__28:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 51;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 48;
					assignment();
					}
					break;
				case 2:
					{
					State = 49;
					forassignment();
					}
					break;
				case 3:
					{
					State = 50;
					print();
					}
					break;
				}
				State = 53;
				Match(T__0);
				}
				}
				break;
			case T__16:
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__16:
					{
					State = 55;
					selective();
					}
					break;
				case T__19:
					{
					State = 56;
					iterative();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValtypeContext valtype() {
			return GetRuleContext<ValtypeContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__26) | (1L << T__27) | (1L << T__28))) != 0)) {
				{
				State = 61;
				valtype();
				}
			}

			State = 64;
			id();
			State = 65;
			Match(T__1);
			State = 66;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForassignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValtypeContext valtype() {
			return GetRuleContext<ValtypeContext>(0);
		}
		public ForassignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forassignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterForassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitForassignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForassignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForassignmentContext forassignment() {
		ForassignmentContext _localctx = new ForassignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_forassignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__26) | (1L << T__27) | (1L << T__28))) != 0)) {
				{
				State = 68;
				valtype();
				}
			}

			State = 71;
			id();
			State = 72;
			Match(T__1);
			State = 73;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		public ExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterExprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitExprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprsContext exprs() {
		ExprsContext _localctx = new ExprsContext(Context, State);
		EnterRule(_localctx, 10, RULE_exprs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			expr(0);
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 76;
				Match(T__2);
				State = 77;
				exprs();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				{
				State = 81;
				Match(T__3);
				State = 82;
				expr(0);
				State = 83;
				Match(T__4);
				}
				break;
			case T__5:
				{
				State = 85;
				Match(T__5);
				State = 86;
				expr(7);
				}
				break;
			case T__10:
			case T__11:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 87;
				val();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 103;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 90;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 91;
						_la = TokenStream.LA(1);
						if ( !(_la==T__6 || _la==T__7) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 92;
						expr(7);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 93;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 94;
						_la = TokenStream.LA(1);
						if ( !(_la==T__8 || _la==T__9) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 95;
						expr(6);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 96;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 97;
						_la = TokenStream.LA(1);
						if ( !(_la==T__10 || _la==T__11) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 98;
						expr(5);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 99;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 100;
						Match(T__12);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 101;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 102;
						Match(T__13);
						}
						break;
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfstatementContext ifstatement() {
			return GetRuleContext<IfstatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext[] stmts() {
			return GetRuleContexts<StmtsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts(int i) {
			return GetRuleContext<StmtsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifstatementContext[] elifstatement() {
			return GetRuleContexts<ElifstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifstatementContext elifstatement(int i) {
			return GetRuleContext<ElifstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsestatementContext elsestatement() {
			return GetRuleContext<ElsestatementContext>(0);
		}
		public SelectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterSelective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitSelective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectiveContext selective() {
		SelectiveContext _localctx = new SelectiveContext(Context, State);
		EnterRule(_localctx, 14, RULE_selective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			ifstatement();
			State = 109;
			Match(T__3);
			State = 110;
			bexpr(0);
			State = 111;
			Match(T__4);
			State = 112;
			Match(T__14);
			State = 113;
			stmts();
			State = 114;
			Match(T__15);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17) {
				{
				{
				State = 115;
				elifstatement();
				State = 116;
				Match(T__3);
				State = 117;
				bexpr(0);
				State = 118;
				Match(T__4);
				State = 119;
				Match(T__14);
				State = 120;
				stmts();
				State = 121;
				Match(T__15);
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 128;
				elsestatement();
				State = 129;
				Match(T__14);
				State = 130;
				stmts();
				State = 131;
				Match(T__15);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstatementContext : ParserRuleContext {
		public IfstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterIfstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitIfstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstatementContext ifstatement() {
		IfstatementContext _localctx = new IfstatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifstatementContext : ParserRuleContext {
		public ElifstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterElifstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitElifstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifstatementContext elifstatement() {
		ElifstatementContext _localctx = new ElifstatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_elifstatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsestatementContext : ParserRuleContext {
		public ElsestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsestatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterElsestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitElsestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsestatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsestatementContext elsestatement() {
		ElsestatementContext _localctx = new ElsestatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_elsestatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(T__18);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForassignmentContext forassignment() {
			return GetRuleContext<ForassignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public IterativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterIterative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitIterative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterativeContext iterative() {
		IterativeContext _localctx = new IterativeContext(Context, State);
		EnterRule(_localctx, 22, RULE_iterative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__19);
			State = 142;
			Match(T__3);
			State = 143;
			forassignment();
			State = 144;
			Match(T__0);
			State = 145;
			bexpr(0);
			State = 146;
			Match(T__0);
			State = 147;
			expr(0);
			State = 148;
			Match(T__4);
			State = 149;
			Match(T__14);
			State = 150;
			stmts();
			State = 151;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext[] bexpr() {
			return GetRuleContexts<BexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr(int i) {
			return GetRuleContext<BexprContext>(i);
		}
		public BexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterBexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitBexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BexprContext bexpr() {
		return bexpr(0);
	}

	private BexprContext bexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BexprContext _localctx = new BexprContext(Context, _parentState);
		BexprContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_bexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__22) {
					{
					State = 154;
					Match(T__22);
					}
				}

				State = 157;
				expr(0);
				}
				break;
			case 2:
				{
				State = 158;
				Match(T__22);
				State = 159;
				Match(T__3);
				State = 160;
				bexpr(0);
				State = 161;
				Match(T__4);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 175;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new BexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 165;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 166;
						_la = TokenStream.LA(1);
						if ( !(_la==T__20 || _la==T__21) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 168;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__1) {
							{
							State = 167;
							Match(T__1);
							}
						}

						State = 170;
						bexpr(5);
						}
						break;
					case 2:
						{
						_localctx = new BexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bexpr);
						State = 171;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 172;
						_la = TokenStream.LA(1);
						if ( !(_la==T__1 || _la==T__22) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 173;
						Match(T__1);
						State = 174;
						bexpr(4);
						}
						break;
					}
					} 
				}
				State = 179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TextstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] W() { return GetTokens(TestGrammarParser.W); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode W(int i) {
			return GetToken(TestGrammarParser.W, i);
		}
		public TextstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterTextstring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitTextstring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextstringContext textstring() {
		TextstringContext _localctx = new TextstringContext(Context, State);
		EnterRule(_localctx, 26, RULE_textstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(T__23);
			State = 181;
			MatchWildcard();
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==W) {
				{
				{
				State = 182;
				Match(W);
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 188;
			Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextstringContext textstring() {
			return GetRuleContext<TextstringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BexprContext bexpr() {
			return GetRuleContext<BexprContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 28, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(T__24);
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				{
				State = 191;
				textstring();
				}
				break;
			case T__3:
			case T__5:
			case T__10:
			case T__11:
			case T__22:
			case Inum:
			case Fnum:
			case Dnum:
			case ID:
				{
				State = 192;
				bexpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DummyContext : ParserRuleContext {
		public DummyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dummy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterDummy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitDummy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDummy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DummyContext dummy() {
		DummyContext _localctx = new DummyContext(Context, State);
		EnterRule(_localctx, 30, RULE_dummy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValContext val() {
		ValContext _localctx = new ValContext(Context, State);
		EnterRule(_localctx, 32, RULE_val);
		int _la;
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				id();
				}
				break;
			case T__10:
			case T__11:
			case Inum:
			case Fnum:
			case Dnum:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__10:
					{
					State = 198;
					Match(T__10);
					}
					break;
				case T__11:
				case Inum:
				case Fnum:
				case Dnum:
					{
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__11) {
						{
						State = 199;
						Match(T__11);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 204;
				num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValtypeContext : ParserRuleContext {
		public ValtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterValtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitValtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValtypeContext valtype() {
		ValtypeContext _localctx = new ValtypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_valtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__26) | (1L << T__27) | (1L << T__28))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(TestGrammarParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 36, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inum() { return GetToken(TestGrammarParser.Inum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fnum() { return GetToken(TestGrammarParser.Fnum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dnum() { return GetToken(TestGrammarParser.Dnum, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITestGrammarListener typedListener = listener as ITestGrammarListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITestGrammarVisitor<TResult> typedVisitor = visitor as ITestGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 38, RULE_num);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Inum) | (1L << Fnum) | (1L << Dnum))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		case 12: return bexpr_sempred((BexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool bexpr_sempred(BexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\xD8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x31', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x36', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '<', '\n', '\x4', '\x5', 
		'\x4', '>', '\n', '\x4', '\x3', '\x5', '\x5', '\x5', '\x41', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x5', '\x6', 'H', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'Q', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '[', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\a', '\b', 'j', '\n', '\b', '\f', '\b', '\xE', 
		'\b', 'm', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', '~', '\n', '\t', '\f', '\t', '\xE', '\t', '\x81', '\v', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x88', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x9E', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xA6', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xAB', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\xB2', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xB5', 
		'\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xBA', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xBD', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xC4', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\xCB', '\n', '\x12', '\x5', '\x12', 
		'\xCD', '\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\xD0', '\n', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x2', '\x4', '\xE', '\x1A', '\x16', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '\x2', '\t', 
		'\x3', '\x2', '\t', '\n', '\x3', '\x2', '\v', '\f', '\x3', '\x2', '\r', 
		'\xE', '\x3', '\x2', '\x17', '\x18', '\x4', '\x2', '\x4', '\x4', '\x19', 
		'\x19', '\x3', '\x2', '\x1D', '\x1F', '\x3', '\x2', ' ', '\"', '\x2', 
		'\xDE', '\x2', '*', '\x3', '\x2', '\x2', '\x2', '\x4', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '=', '\x3', '\x2', '\x2', '\x2', '\b', '@', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'G', '\x3', '\x2', '\x2', '\x2', '\f', 
		'M', '\x3', '\x2', '\x2', '\x2', '\xE', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'n', '\x3', '\x2', '\x2', '\x2', '\x12', '\x89', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x16', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xC0', '\x3', '\x2', '\x2', '\x2', ' ', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xD1', '\x3', '\x2', '\x2', '\x2', '&', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xD5', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x5', '\x4', 
		'\x3', '\x2', '+', ',', '\a', '\x2', '\x2', '\x3', ',', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '-', '.', '\x5', '\x6', '\x4', '\x2', '.', '/', '\x5', 
		'\x4', '\x3', '\x2', '/', '\x31', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x5', '\x3', '\x2', '\x2', '\x2', '\x32', '\x36', '\x5', 
		'\b', '\x5', '\x2', '\x33', '\x36', '\x5', '\n', '\x6', '\x2', '\x34', 
		'\x36', '\x5', '\x1E', '\x10', '\x2', '\x35', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\x3', '\x2', '\x2', '\x38', '>', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '<', '\x5', '\x10', '\t', '\x2', ':', '<', '\x5', '\x18', '\r', 
		'\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', ':', '\x3', '\x2', 
		'\x2', '\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', '=', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '\a', 
		'\x3', '\x2', '\x2', '\x2', '?', '\x41', '\x5', '$', '\x13', '\x2', '@', 
		'?', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x5', '&', 
		'\x14', '\x2', '\x43', '\x44', '\a', '\x4', '\x2', '\x2', '\x44', '\x45', 
		'\x5', '\xE', '\b', '\x2', '\x45', '\t', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'H', '\x5', '$', '\x13', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x5', '&', '\x14', '\x2', 'J', 'K', '\a', '\x4', '\x2', '\x2', 
		'K', 'L', '\x5', '\xE', '\b', '\x2', 'L', '\v', '\x3', '\x2', '\x2', '\x2', 
		'M', 'P', '\x5', '\xE', '\b', '\x2', 'N', 'O', '\a', '\x5', '\x2', '\x2', 
		'O', 'Q', '\x5', '\f', '\a', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\b', '\b', '\x1', '\x2', 'S', 'T', '\a', '\x6', '\x2', 
		'\x2', 'T', 'U', '\x5', '\xE', '\b', '\x2', 'U', 'V', '\a', '\a', '\x2', 
		'\x2', 'V', '[', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\b', '\x2', 
		'\x2', 'X', '[', '\x5', '\xE', '\b', '\t', 'Y', '[', '\x5', '\"', '\x12', 
		'\x2', 'Z', 'R', '\x3', '\x2', '\x2', '\x2', 'Z', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\f', '\b', '\x2', '\x2', ']', '^', '\t', '\x2', '\x2', 
		'\x2', '^', 'j', '\x5', '\xE', '\b', '\t', '_', '`', '\f', '\a', '\x2', 
		'\x2', '`', '\x61', '\t', '\x3', '\x2', '\x2', '\x61', 'j', '\x5', '\xE', 
		'\b', '\b', '\x62', '\x63', '\f', '\x6', '\x2', '\x2', '\x63', '\x64', 
		'\t', '\x4', '\x2', '\x2', '\x64', 'j', '\x5', '\xE', '\b', '\a', '\x65', 
		'\x66', '\f', '\x5', '\x2', '\x2', '\x66', 'j', '\a', '\xF', '\x2', '\x2', 
		'g', 'h', '\f', '\x4', '\x2', '\x2', 'h', 'j', '\a', '\x10', '\x2', '\x2', 
		'i', '\\', '\x3', '\x2', '\x2', '\x2', 'i', '_', '\x3', '\x2', '\x2', 
		'\x2', 'i', '\x62', '\x3', '\x2', '\x2', '\x2', 'i', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\xF', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\x5', '\x12', '\n', '\x2', 'o', 'p', '\a', 
		'\x6', '\x2', '\x2', 'p', 'q', '\x5', '\x1A', '\xE', '\x2', 'q', 'r', 
		'\a', '\a', '\x2', '\x2', 'r', 's', '\a', '\x11', '\x2', '\x2', 's', 't', 
		'\x5', '\x4', '\x3', '\x2', 't', '\x7F', '\a', '\x12', '\x2', '\x2', 'u', 
		'v', '\x5', '\x14', '\v', '\x2', 'v', 'w', '\a', '\x6', '\x2', '\x2', 
		'w', 'x', '\x5', '\x1A', '\xE', '\x2', 'x', 'y', '\a', '\a', '\x2', '\x2', 
		'y', 'z', '\a', '\x11', '\x2', '\x2', 'z', '{', '\x5', '\x4', '\x3', '\x2', 
		'{', '|', '\a', '\x12', '\x2', '\x2', '|', '~', '\x3', '\x2', '\x2', '\x2', 
		'}', 'u', '\x3', '\x2', '\x2', '\x2', '~', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x87', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x5', '\x16', '\f', 
		'\x2', '\x83', '\x84', '\a', '\x11', '\x2', '\x2', '\x84', '\x85', '\x5', 
		'\x4', '\x3', '\x2', '\x85', '\x86', '\a', '\x12', '\x2', '\x2', '\x86', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x87', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '\x13', '\x2', '\x2', '\x8A', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\a', '\x14', '\x2', 
		'\x2', '\x8C', '\x15', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', 
		'\x15', '\x2', '\x2', '\x8E', '\x17', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\a', '\x16', '\x2', '\x2', '\x90', '\x91', '\a', '\x6', '\x2', 
		'\x2', '\x91', '\x92', '\x5', '\n', '\x6', '\x2', '\x92', '\x93', '\a', 
		'\x3', '\x2', '\x2', '\x93', '\x94', '\x5', '\x1A', '\xE', '\x2', '\x94', 
		'\x95', '\a', '\x3', '\x2', '\x2', '\x95', '\x96', '\x5', '\xE', '\b', 
		'\x2', '\x96', '\x97', '\a', '\a', '\x2', '\x2', '\x97', '\x98', '\a', 
		'\x11', '\x2', '\x2', '\x98', '\x99', '\x5', '\x4', '\x3', '\x2', '\x99', 
		'\x9A', '\a', '\x12', '\x2', '\x2', '\x9A', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9D', '\b', '\xE', '\x1', '\x2', '\x9C', '\x9E', '\a', 
		'\x19', '\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA6', '\x5', '\xE', '\b', '\x2', '\xA0', '\xA1', '\a', 
		'\x19', '\x2', '\x2', '\xA1', '\xA2', '\a', '\x6', '\x2', '\x2', '\xA2', 
		'\xA3', '\x5', '\x1A', '\xE', '\x2', '\xA3', '\xA4', '\a', '\a', '\x2', 
		'\x2', '\xA4', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\f', '\x6', '\x2', 
		'\x2', '\xA8', '\xAA', '\t', '\x5', '\x2', '\x2', '\xA9', '\xAB', '\a', 
		'\x4', '\x2', '\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xB2', '\x5', '\x1A', '\xE', '\a', '\xAD', '\xAE', '\f', 
		'\x5', '\x2', '\x2', '\xAE', '\xAF', '\t', '\x6', '\x2', '\x2', '\xAF', 
		'\xB0', '\a', '\x4', '\x2', '\x2', '\xB0', '\xB2', '\x5', '\x1A', '\xE', 
		'\x6', '\xB1', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x1A', '\x2', '\x2', '\xB7', 
		'\xBB', '\v', '\x2', '\x2', '\x2', '\xB8', '\xBA', '\a', '&', '\x2', '\x2', 
		'\xB9', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\a', '\x1A', 
		'\x2', '\x2', '\xBF', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', 
		'\a', '\x1B', '\x2', '\x2', '\xC1', '\xC4', '\x5', '\x1C', '\xF', '\x2', 
		'\xC2', '\xC4', '\x5', '\x1A', '\xE', '\x2', '\xC3', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x1C', '\x2', '\x2', 
		'\xC6', '!', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xD0', '\x5', '&', '\x14', 
		'\x2', '\xC8', '\xCD', '\a', '\r', '\x2', '\x2', '\xC9', '\xCB', '\a', 
		'\xE', '\x2', '\x2', '\xCA', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xD0', '\x5', '(', '\x15', '\x2', '\xCF', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD0', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD2', '\t', '\a', '\x2', '\x2', '\xD2', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', '#', '\x2', '\x2', 
		'\xD4', '\'', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\t', '\b', 
		'\x2', '\x2', '\xD6', ')', '\x3', '\x2', '\x2', '\x2', '\x18', '\x30', 
		'\x35', ';', '=', '@', 'G', 'P', 'Z', 'i', 'k', '\x7F', '\x87', '\x9D', 
		'\xA5', '\xAA', '\xB1', '\xB3', '\xBB', '\xC3', '\xCA', '\xCC', '\xCF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
